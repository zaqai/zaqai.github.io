<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://blog.zaqai.com/atom.xml" rel="self"/>
  
  <link href="https://blog.zaqai.com/"/>
  <updated>2023-12-31T12:19:56.833Z</updated>
  <id>https://blog.zaqai.com/</id>
  
  <author>
    <name>zaqai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过RSSHub订阅学院通知</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E9%80%9A%E8%BF%87RSSHub%E8%AE%A2%E9%98%85%E5%AD%A6%E9%99%A2%E9%80%9A%E7%9F%A5/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E9%80%9A%E8%BF%87RSSHub%E8%AE%A2%E9%98%85%E5%AD%A6%E9%99%A2%E9%80%9A%E7%9F%A5/</id>
    <published>2023-12-31T20:18:03.330Z</published>
    <updated>2023-12-31T12:19:56.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过RSSHub订阅学院通知"><a href="#通过RSSHub订阅学院通知" class="headerlink" title="通过RSSHub订阅学院通知"></a>通过RSSHub订阅学院通知</h1><blockquote><p>今天看到以为up主在介绍RSSHub, 遂入坑, 上午在了解RSS, 并搭建了RSSHub, 下午费了九牛二虎之力终于给学院写了个RSS订阅(只怪自己js学的不够通透)</p><p><a href="https://www.bilibili.com/video/BV1pT4y1y7AH">【干货分享】三分钟教你部署RSSHub!_哔哩哔哩_bilibili</a></p></blockquote><p><a href="http://ssdut.dlut.edu.cn/">大连理工大学软件学院(新) (dlut.edu.cn)</a>RSS订阅地址: <a href="https://rss.zaqai.com/ssdut">https://rss.zaqai.com/ssdut</a></p><p>路由: 默认是本科生通知, 即<a href="https://rss.zaqai.com/ssdut%E5%92%8Chttps://rss.zaqai.com/ssdut/bkstz%E7%AD%89%E4%BB%B7">https://rss.zaqai.com/ssdut和https://rss.zaqai.com/ssdut/bkstz等价</a>, 对应于<a href="http://ssdut.dlut.edu.cn/index/bkstz.htm">本科生通知-大连理工大学软件学院(新) (dlut.edu.cn)</a></p><p>还有学院通知: <a href="https://rss.zaqai.com/ssdut/xytz">https://rss.zaqai.com/ssdut/xytz</a>, 对应于<a href="http://ssdut.dlut.edu.cn/index/xytz.htm">学院通知-大连理工大学软件学院(新) (dlut.edu.cn)</a></p><p>其他的通知对我来说用处不大, 所以没有适配, 大体上差不多, 只需要更改一些jquery选择器的东西</p><h2 id="RSSHub介绍"><a href="#RSSHub介绍" class="headerlink" title="RSSHub介绍"></a>RSSHub介绍</h2><p><img src="https://oss.zaqai.com/img/image-20220222171045161.png" alt="image-20220222171045161"></p><blockquote><p>万物皆可RSS, 其实就是给你提供一个大体框架, 具体爬取哪些元素要你自己写</p><p>原理就是当你访问RSSHub, 它会根据路由去请求指定的资源, 并转换为RSS格式</p></blockquote><h2 id="RSSHub搭建"><a href="#RSSHub搭建" class="headerlink" title="RSSHub搭建"></a>RSSHub搭建</h2><p><a href="https://docs.rsshub.app/install/#shou-dong-bu-shu">部署 | RSSHub</a>讲的很详细了, 虽然有服务器, 不过我还是推荐Vercel托管(我看的视频就是讲这个的), 直接域名cname到它提供的域名就行了. 但是有一点, github仓库里的代码改了之后, 它会自动重新部署, 但是好像并没有改变.</p><h2 id="为没有适配RSS的网站适配RSS"><a href="#为没有适配RSS的网站适配RSS" class="headerlink" title="为没有适配RSS的网站适配RSS"></a>为没有适配RSS的网站适配RSS</h2><blockquote><p> 参考: <a href="https://maronyea.me/restless/72/">为任意网站创建 RSSHub 路由的思路 | Maron的自留地 (maronyea.me)</a></p></blockquote><p>只需修改两个文件: </p><ul><li><p>RSSHub目录\lib\router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大连理工大学</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/dut/:subsite/:type&#x27;</span>, <span class="title function_">lazyloadRouteHandler</span>(<span class="string">&#x27;./routes/universities/dut/index&#x27;</span>));</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/ssdut/:type?&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./routes/universities/dut/ssdut&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>增加一个ssdut的路由, :type?为可选参数</p></blockquote></li><li><p>RSSHub目录\lib\routes\universities\dut\ssdut.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;@/utils/got&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 域名</span></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;http://ssdut.dlut.edu.cn&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 分类</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="attr">bkstz</span>: <span class="string">&#x27;/index/bkstz.htm&#x27;</span>,</span><br><span class="line">    <span class="attr">xytz</span>: <span class="string">&#x27;/index/xytz.htm&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里获取到传入的参数，也就是 /ncu/jwc/:type? 中的 type</span></span><br><span class="line">    <span class="comment">// 通过 || 来实现设置一个默认值</span></span><br><span class="line">    <span class="keyword">const</span> type = ctx.<span class="property">params</span>.<span class="property">type</span> || <span class="string">&#x27;bkstz&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 要抓取的网址</span></span><br><span class="line">    <span class="keyword">const</span> link = host + map[type] ;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 获取列表页，也就是发出请求，来获得这个文章列表页</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">got</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,    <span class="comment">// 请求的方法是 get，这里一般都是 get</span></span><br><span class="line">        <span class="attr">url</span>: link,        <span class="comment">// 请求的链接，也就是文章列表页</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 cheerio 来把请求回来的数据转成 DOM，方便操作</span></span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 提取列表项</span></span><br><span class="line">    <span class="keyword">const</span> urlList = $(<span class="string">&#x27;.c_hzjl_list1&#x27;</span>)    <span class="comment">// 筛选出所有 class=&quot;.c_hzjl_list1&quot; 的内容</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>)                <span class="comment">// 找到所有 &lt;a&gt; 标签，也就是文章的链接</span></span><br><span class="line">        .<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">20</span>)             <span class="comment">// 获取 10 个，也可以把它调大一点，比如 15 个。最大的个数要看这个网页中有多少条</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">i, e</span>) =&gt;</span> $(e).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>))    <span class="comment">// 作为键值对来存储 &lt;a&gt; 标签们的 href 属性</span></span><br><span class="line">        .<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要输出的文章内容保存到 out 中</span></span><br><span class="line">    <span class="keyword">const</span> out = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">        <span class="comment">// 抓取操作放这里</span></span><br><span class="line">        urlList.<span class="title function_">map</span>(<span class="keyword">async</span> (itemUrl) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取文章的完整链接</span></span><br><span class="line">            itemUrl = url.<span class="title function_">resolve</span>(host+map[type] , itemUrl);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 这里是使用 RSSHub 的缓存机制</span></span><br><span class="line">            <span class="keyword">const</span> cache = <span class="keyword">await</span> ctx.<span class="property">cache</span>.<span class="title function_">get</span>(itemUrl);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(cache));</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 获取列表项中的网页</span></span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> got.<span class="title function_">get</span>(itemUrl);</span><br><span class="line">            <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// single 就是一篇文章了，里面包括了标题、链接、内容和时间</span></span><br><span class="line">            <span class="keyword">const</span> single = &#123;</span><br><span class="line">                <span class="attr">title</span>: $(<span class="string">&#x27;title&#x27;</span>).<span class="title function_">text</span>(),      <span class="comment">// 提取标题</span></span><br><span class="line">                <span class="attr">link</span>: itemUrl,                 <span class="comment">// 文章链接</span></span><br><span class="line">                <span class="attr">description</span>: $(<span class="string">&#x27;.v_news_content&#x27;</span>)        <span class="comment">// 文章内容，并且用了个将文章的链接和图片转成完整路径的 replace() 方法</span></span><br><span class="line">                    .<span class="title function_">html</span>()</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/src=&quot;\//g</span>, <span class="string">`src=&quot;<span class="subst">$&#123;url.resolve(host, <span class="string">&#x27;.&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/href=&quot;\//g</span>, <span class="string">`href=&quot;<span class="subst">$&#123;url.resolve(host, <span class="string">&#x27;.&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">                    .<span class="title function_">trim</span>(),</span><br><span class="line">                <span class="attr">pubDate</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;/</span>)+<span class="string">&#x27;-&#x27;</span>+</span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[0-9]&#123;2&#125;/g</span>)[<span class="number">2</span>]+<span class="string">&#x27;-&#x27;</span>+                        </span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[0-9]&#123;2&#125;/g</span>)[<span class="number">3</span>]            </span><br><span class="line"></span><br><span class="line">                ).<span class="title function_">toUTCString</span>(),                                     <span class="comment">// 将时间的文本文字转换成 Date 对象</span></span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 设置缓存及时间</span></span><br><span class="line">            ctx.<span class="property">cache</span>.<span class="title function_">set</span>(itemUrl, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(single), <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 输出一篇文章的所有信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(single);</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置分类的标题</span></span><br><span class="line">    <span class="keyword">let</span> info = <span class="string">&#x27;本科生通知&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;xytz&#x27;</span>) &#123;</span><br><span class="line">        info = <span class="string">&#x27;学院通知&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 访问 RSS 链接时会输出的信息</span></span><br><span class="line">    ctx.<span class="property">state</span>.<span class="property">data</span> = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;大工软院 - &#x27;</span> + info,</span><br><span class="line">        <span class="attr">link</span>: link,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;大工软院 - &#x27;</span> + info + <span class="string">&#x27; ssdut.dlut.edu.cn&#x27;</span>,</span><br><span class="line">        <span class="attr">item</span>: out,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>获取专属消息通知, 避免遗漏学院重要通知</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="https://oss.zaqai.com/img/Screenshot_2022-02-22-17-55-13-001_com.levelup.palabre.jpg" alt="Screenshot_2022-02-22-17-55-13-001_com.levelup.palabre" style="zoom: 33%;" /><p><img src="https://oss.zaqai.com/img/image-20220222175505752.png" alt="image-20220222175505752"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过RSSHub订阅学院通知&quot;&gt;&lt;a href=&quot;#通过RSSHub订阅学院通知&quot; class=&quot;headerlink&quot; title=&quot;通过RSSHub订阅学院通知&quot;&gt;&lt;/a&gt;通过RSSHub订阅学院通知&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天看到以为up主</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨域解决</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3/</id>
    <published>2023-12-31T20:18:03.323Z</published>
    <updated>2023-12-31T12:19:55.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于跨域"><a href="#关于跨域" class="headerlink" title="关于跨域"></a>关于跨域</h1><p>出于安全问题考虑, 浏览器都会有跨域限制, 但这个限制只在浏览器端, 你都不想浏览器在和你的服务器交互时还和别的服务器有联系吧. </p><p>试想这样一种场景, 服务器A通过一系列认证手段信任了你的浏览器, 你的浏览器也可以自由地和服务器A交换数据. 忽然你点击某个链接, 跳转到服务器B提供的网页中, 而该网页包含一段js代码, 是去服务器A中取数据的, 这种情况下就非常危险了, 如果没有跨域限制, 浏览器就会就会将服务器A发来的数据显示出来, 服务器B也可以轻松地从服务器A取得数据(这些数据本应通过认证才可以取得).<br> <img src="https://oss.zaqai.com/img/ac56888e0a00b08b.png"></p><blockquote><p>协议 域名 端口号有一个不同, 都是跨域, 注意二级域名不同也是跨域</p></blockquote><h2 id="跨域请求分类"><a href="#跨域请求分类" class="headerlink" title="跨域请求分类"></a>跨域请求分类</h2><ul><li>简单跨域请求<ul><li>请求方法是GET、HEAD或者POST，并且当请求方法是POST时，Content-Type必须是application&#x2F;x-www-form-urlencoded, multipart&#x2F;form-data或着text&#x2F;plain中的一个值。</li><li>请求中没有自定义HTTP头部(只有Accept、Content-Type、Accept-Language、Content-Language)</li></ul></li><li>非简单跨域请求(带预检的请求)<ul><li><em>简单跨域请求第一条的其他情况</em></li><li>请求中包含自定义HTTP头部</li></ul></li></ul><blockquote><p>对于简单跨域请求, 浏览器在请求头部增加<code>origin</code>字段, 值为js代码所在的域, 也就是上文中的服务器B, 服务器收到请求, 在响应头部增加<code>Access-Control-Allow-Origin</code>字段, 直接返回数据, 至于这个数据能否被js代码拿到, 全凭浏览器的判断, 如果响应头部<code>Access-Control-Allow-Origin</code>包含请求头部中的<code>origin</code>, 浏览器就会返回数据给js代码, 否则忽略该响应</p><img src="https://oss.zaqai.com/img/image-20221004223034640.png" alt="image-20221004223034640" style="zoom: 67%;" /><p>对于非简单跨域请求, 浏览器首先发送一个预检请求,  请求方法为options, 头部除了<code>origin</code>, 还有<code>Access-Control-Request-Headers</code>和<code>Access-Control-Request-Method:</code>, 服务器会在响应头添加以下三个字段, 响应中不包含数据. 浏览器根据响应判断, 如果通过就正常发送请求, 否则直接不发送请求</p><img src="https://oss.zaqai.com/img/image-20221004224840650.png" alt="image-20221004224840650" style="zoom:67%;" /></blockquote><p>了解以上知识后, 就能很清晰地看到, 解决跨域可以从两大方面入手–浏览器 服务器</p><h2 id="跨域实现"><a href="#跨域实现" class="headerlink" title="跨域实现"></a>跨域实现</h2><h3 id="从浏览器入手"><a href="#从浏览器入手" class="headerlink" title="从浏览器入手"></a>从浏览器入手</h3><blockquote><p>只要浏览器不进行跨域检查, 就可以实现跨域</p></blockquote><h4 id="1-关闭浏览器跨域检查-最暴力的方式"><a href="#1-关闭浏览器跨域检查-最暴力的方式" class="headerlink" title="1. 关闭浏览器跨域检查(最暴力的方式)"></a>1. 关闭浏览器跨域检查(最暴力的方式)</h4><p>可以用命令行启动浏览器, 并加一些启动参数, 我在windows上没测试成功, 看到网上有博客说mac可以</p><p>当然这种方法不太实用, 也不安全, 不过在开发调试时使用还是挺方便的</p><h4 id="2-script标签的jsonp"><a href="#2-script标签的jsonp" class="headerlink" title="2. script标签的jsonp"></a>2. script标签的jsonp</h4><blockquote><p>JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。–来源百度</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求8080端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;http://127.0.0.1:8080/index.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        show()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>跨域资源文件在本机8080端口<br><img src="https://oss.zaqai.com/img/4c36ac839b36b1f8.png"></li></ul><blockquote><p>当我们打开html, 控制台即可见到输出, 成功跨域<br><img src="https://oss.zaqai.com/img/7365b2da99e14d83.png"></p></blockquote><h3 id="从服务端入手"><a href="#从服务端入手" class="headerlink" title="从服务端入手"></a>从服务端入手</h3><p>既然浏览器的跨域检查无可避免, 那就设法让他的检查通过</p><blockquote><p>其实原理就是在响应头部添加允许跨域的字段, 以nodejs为例, 下面这段代码等价于<code>app.use(cors())</code>, 只不过是做了一个封装, 让我们更简便地调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;X-Powered-By&quot;</span>, <span class="string">&#x27; 3.2.1&#x27;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-服务端配置允许跨域"><a href="#1-服务端配置允许跨域" class="headerlink" title="1. 服务端配置允许跨域"></a>1. 服务端配置允许跨域</h4><p><strong>本文章服务端使用nodejs, 其他语言也类似, springboot是通过添加注解<code>@CrossOrigin</code></strong></p><h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求3000端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(&quot;http://localhost:3000&quot;)</span><br><span class="line">            .then(res =&gt; res.json())</span><br><span class="line">            .then(data =&gt; &#123; console.log(data) &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>服务端监听本机3000端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">// const cors = require(&#x27;cors&#x27;)</span><br><span class="line">// app.use(cors(&#123;</span><br><span class="line">//     origin: &#x27;http://localhost:5500&#x27;,</span><br><span class="line">// &#125;))</span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123; &quot;name&quot;: &quot;zq&quot;, &quot;age&quot;: 18 &#125;)</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure><blockquote><p>当我们打开html, 可以看到开头熟悉的报错. 将js文件中的注释打开(<code>app.use(cors())</code>, 允许所有origin跨域), 重新启动服务端, 即可解决<br><strong>亲测localhost 和 127.0.0.1 不能混用, 也会存在跨域</strong><br><img src="https://oss.zaqai.com/img/46cac3db2e54580e.png"></p></blockquote><h4 id="2-nginx反向代理"><a href="#2-nginx反向代理" class="headerlink" title="2. nginx反向代理"></a>2. nginx反向代理</h4><p>相当于是做了一个跳板, 在代理服务器端设置允许跨域, 由服务器去请求目标服务器, 再返回给浏览器</p><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求nginx监听的8080端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(&quot;http://localhost:8080&quot;)</span><br><span class="line">            .then(res =&gt; res.json())</span><br><span class="line">            .then(data =&gt; &#123; console.log(data) &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>nginx监听8080端口, 将请求转发至服务端的3000端口<br><img src="https://oss.zaqai.com/img/aebde8e9b66f7c0b.png"></li></ul><blockquote><p>画线的头部可加可不加, 都可以实现跨域, 因为nginx已经帮我们配置好允许跨域</p></blockquote><ul><li>服务端监听本机3000端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123; &quot;name&quot;: &quot;zq&quot;, &quot;age&quot;: 18 &#125;)</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/db6b3681384ee382.png"></p><blockquote><p>参考: B站视频: <a href="https://www.bilibili.com/video/BV1Ei4y1o7jK">https://www.bilibili.com/video/BV1Ei4y1o7jK</a></p><p>[Http跨域时候预检没通过的几种原因 - jyLi - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/linxingyun/p/6772937.html#:~:text=%E5%B8%A6%E9%A2%84%E6%A3%80">https://www.cnblogs.com/linxingyun/p/6772937.html#:~:text=带预检</a> (Preflighted)的跨域请求需要浏览器在发送真实HTTP请求之前先发送一个OPTIONS的预检请求，检测服务器端是否支持真实请求进行跨域资源访问，真实请求的信息在OPTIONS请求中通过Access-Control-Request-Method,Header和Access-Control-Request-Headers Header描述，此外与简单跨域请求一样，浏览器也会添加Origin Header。)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于跨域&quot;&gt;&lt;a href=&quot;#关于跨域&quot; class=&quot;headerlink&quot; title=&quot;关于跨域&quot;&gt;&lt;/a&gt;关于跨域&lt;/h1&gt;&lt;p&gt;出于安全问题考虑, 浏览器都会有跨域限制, 但这个限制只在浏览器端, 你都不想浏览器在和你的服务器交互时还和别的服务器有联系</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一个ipv6+ddns</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E8%AE%B0%E4%B8%80%E4%B8%AAipv6+ddns/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E8%AE%B0%E4%B8%80%E4%B8%AAipv6+ddns/</id>
    <published>2023-12-31T20:18:03.322Z</published>
    <updated>2023-12-31T12:19:54.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一个ipv6-ddns"><a href="#记一个ipv6-ddns" class="headerlink" title="记一个ipv6+ddns"></a>记一个ipv6+ddns</h1><p>所谓ddns, 就是动态dns, 适用于服务器ip地址不固定, 过一段时间就会改变的场景</p><p>推荐使用dynv6, 我用着挺好的, 地址: <a href="https://dynv6.com/">Free dynamic DNS for IPv6 (dynv6.com)</a></p><p>虽然是英文, 但大致能看明白吧</p><h2 id="dynv6步骤"><a href="#dynv6步骤" class="headerlink" title="dynv6步骤"></a>dynv6步骤</h2><ul><li><p>首先新建域名, 在<a href="https://dynv6.com/keys">dynv6</a>中查看token</p></li><li><p>推荐使用他提供的脚本<a href="https://gist.github.com/corny/7a07f5ac901844bd20c9">gist.github.com</a>, 其他方式可自行参考他提供的API<a href="https://dynv6.com/docs/apis">dynv6 APIs</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line">hostname=$1</span><br><span class="line">device=$2</span><br><span class="line">file=$HOME/.dynv6.addr6</span><br><span class="line">[ -e $file ] &amp;&amp; old=`cat $file`</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$hostname&quot; -o -z &quot;$token&quot; ]; then</span><br><span class="line">  echo &quot;Usage: token=&lt;your-authentication-token&gt; [netmask=64] $0 your-name.dynv6.net [device]&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$netmask&quot; ]; then</span><br><span class="line">  netmask=128</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$device&quot; ]; then</span><br><span class="line">  device=&quot;dev $device&quot;</span><br><span class="line">fi</span><br><span class="line">address=$(ip -6 addr list scope global $device | grep -v &quot; fd&quot; | sed -n &#x27;s/.*inet6 \([0-9a-f:]\+\).*/\1/p&#x27; | head -n 1)</span><br><span class="line"></span><br><span class="line">if [ -e /usr/bin/curl ]; then</span><br><span class="line">  bin=&quot;curl -fsS&quot;</span><br><span class="line">elif [ -e /usr/bin/wget ]; then</span><br><span class="line">  bin=&quot;wget -O-&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;neither curl nor wget found&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$address&quot; ]; then</span><br><span class="line">  echo &quot;no IPv6 address found&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">address with netmask</span></span><br><span class="line">current=$address/$netmask</span><br><span class="line"></span><br><span class="line">if [ &quot;$old&quot; = &quot;$current&quot; ]; then</span><br><span class="line">  echo &quot;IPv6 address unchanged&quot;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">send addresses to dynv6</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">bin <span class="string">&quot;http://dynv6.com/api/update?hostname=<span class="variable">$hostname</span>&amp;ipv6=<span class="variable">$current</span>&amp;token=<span class="variable">$token</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">bin <span class="string">&quot;http://ipv4.dynv6.com/api/update?hostname=<span class="variable">$hostname</span>&amp;ipv4=auto&amp;token=<span class="variable">$token</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save current address</span></span><br><span class="line">echo $current &gt; $file</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>考虑到脚本的网站不是那么好打开, 在这里放上脚本. 默认ipv4 ipv6都会被上传记录, 如果只想要ipv6, 将<code>$bin &quot;http://ipv4.dynv6.com/api/update?hostname=$hostname&amp;ipv4=auto&amp;token=$token&quot;</code>删掉即可. 我是删掉了, 防止某些情况下解析到ipv4, 导致无法访问</p></blockquote><blockquote><p>脚本抓取网络接口显示的ipv6地址, 在$HOME&#x2F;.dynv6.addr6创建文件记录上次更新的ip地址, 如果再次执行更新操作, 会先判断获取的ip地址和文件中的是否一致, 如果一致便不会上传更新</p></blockquote></li><li><p>命令 <code>token=你的token ./dynv6.sh 你的域名</code></p></li></ul><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>可以设置定时任务, 如<code>0 0 * * *</code>代表每天0点</p><table><thead><tr><th align="center">分</th><th align="center">时</th><th align="center">日</th><th align="center">月</th><th align="center">周</th></tr></thead><tbody><tr><td align="center">0~59</td><td align="center">0~23</td><td align="center">1~31</td><td align="center">1~12</td><td align="center">0~7</td></tr></tbody></table><blockquote><p>周的数字为 0 或 7 时，都代表“星期天”的意思</p></blockquote><table><thead><tr><th align="center">特殊字符</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">*(星号)</td><td align="center">代表任何时刻都接受的意思。举例来说，0 12 * * * command 日、月、周都是*，就代表着不论何月、何日的礼拜几的12：00都执行后续命令的意思。</td></tr><tr><td align="center">,(逗号)</td><td align="center">代表分隔时段的意思。举例来说，如果要执行的工作是3：00与6：00时，就会是：0 3,6 * * * command时间还是有五列，不过第二列是 3,6 ，代表3与6都适用</td></tr><tr><td align="center">-(减号)</td><td align="center">代表一段时间范围内，举例来说，8点到12点之间的每小时的20分都进行一项工作：20 8-12 * * * command仔细看到第二列变成8-12.代表 8,9,10,11,12 都适用的意思</td></tr><tr><td align="center">&#x2F;n(斜线)</td><td align="center">那个n代表数字，即是每隔n单位间隔的意思，例如每五分钟进行一次，则：*&#x2F;5 * * * * command用*与&#x2F;5来搭配，也可以写成0-59&#x2F;5，意思相同</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记一个ipv6-ddns&quot;&gt;&lt;a href=&quot;#记一个ipv6-ddns&quot; class=&quot;headerlink&quot; title=&quot;记一个ipv6+ddns&quot;&gt;&lt;/a&gt;记一个ipv6+ddns&lt;/h1&gt;&lt;p&gt;所谓ddns, 就是动态dns, 适用于服务器ip地址不固定</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>编程心得</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/</id>
    <published>2023-12-31T20:18:03.320Z</published>
    <updated>2023-12-31T12:19:52.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则匹配关键字符"><a href="#正则匹配关键字符" class="headerlink" title="正则匹配关键字符"></a>正则匹配关键字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;/data/cache/style_1_common.css?y7a&quot;;</span><br><span class="line">System.out.println(s.split(&quot;\\?&quot;)[0]);</span><br></pre></td></tr></table></figure><blockquote><p><code>split(&quot;?&quot;) split(&quot;\?&quot;) split(&quot;/?&quot;)</code>都不行<br><code>split(&quot;\\?&quot;) split(&quot;[?]&quot;)</code>行</p></blockquote><h2 id="C-关于NULL和nullptr"><a href="#C-关于NULL和nullptr" class="headerlink" title="C++关于NULL和nullptr"></a>C++关于NULL和nullptr</h2><blockquote><p>NULL在C语言被定义为<code>#define NULL ((void *)0)</code>,可以发生隐式类型转换(<code> int  *pi = NULL;</code>)<br>nullptr是在C++中引入的,代表空指针,因为C++是强类型语言,void*是不能隐式转换成其他类型的指针的,所以NULL会被解释为0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">void func(int x) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;void func(int x)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void func(char *y) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;void func(int *y)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func(NULL);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会有重载二义性错误,换成nullptr就没问题<br><strong>不用NULL,用nullptr</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则匹配关键字符&quot;&gt;&lt;a href=&quot;#正则匹配关键字符&quot; class=&quot;headerlink&quot; title=&quot;正则匹配关键字符&quot;&gt;&lt;/a&gt;正则匹配关键字符&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>牛客刷题笔记</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-31T20:18:03.319Z</published>
    <updated>2023-12-31T12:19:55.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="牛客刷题笔记"><a href="#牛客刷题笔记" class="headerlink" title="牛客刷题笔记"></a>牛客刷题笔记</h1><ul><li>抽象类 特点: <ul><li>1.抽象类中可以有构造方法 </li><li>2.抽象类中可以存在普通属性，方法，静态属性和方法。 </li><li>3.抽象类中可以存在抽象方法。</li><li>4.如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法</li><li>5.抽象类中的抽象方法，需要有子类实现，如果子类不实现，则子类也需要定义为抽象的。</li></ul></li><li>接口 </li><li>1.在接口中只有方法的声明，没有方法体。 </li><li>2.在接口中只有常量，因为定义的变量，在编译的时候都会默认加上 &#x3D;&#x3D;public static final&#x3D;&#x3D;  </li><li>3.在接口中的方法，永远都被public来修饰。</li><li>4.接口中没有构造方法，也不能实例化接口的对象。 </li><li>5.接口可以实现多继承 </li><li>6.接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法 </li><li>7.则实现类定义为抽象类。</li><li>线程私有:java虚拟机栈，程序计数器，本地方法栈 </li><li>线程共享:java堆，方法区</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;牛客刷题笔记&quot;&gt;&lt;a href=&quot;#牛客刷题笔记&quot; class=&quot;headerlink&quot; title=&quot;牛客刷题笔记&quot;&gt;&lt;/a&gt;牛客刷题笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;抽象类 特点: &lt;ul&gt;
&lt;li&gt;1.抽象类中可以有构造方法 &lt;/li&gt;
&lt;li&gt;2.抽象类中可</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>斐讯n1安装centos7+docker openwrt</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E6%96%90%E8%AE%AFn1%E5%AE%89%E8%A3%85centos7+docker%20openwrt/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E6%96%90%E8%AE%AFn1%E5%AE%89%E8%A3%85centos7+docker%20openwrt/</id>
    <published>2023-12-31T20:18:03.311Z</published>
    <updated>2023-12-31T12:19:53.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐讯n1安装centos7-docker-openwrt"><a href="#斐讯n1安装centos7-docker-openwrt" class="headerlink" title="斐讯n1安装centos7+docker openwrt"></a>斐讯n1安装centos7+docker openwrt</h1><blockquote><p>首先声明,我的n1是降级过的,系统默认usb启动优先级大于emmc,所以可以直接将镜像写入u盘,通过u盘启动系统,同时通过脚本将系统写入emmc.</p><p>同时,由于n1的usb是2.0,推荐将常用系统写入emmc,而不是通过u盘启动(虽然emmc只有8G).亲测速度快的不是一点半点,最直观的感受就是执行<code>yum update</code>.</p></blockquote><h3 id="centos镜像"><a href="#centos镜像" class="headerlink" title="centos镜像"></a>centos镜像</h3><p><a href="https://www.right.com.cn/forum/thread-4061041-1-7.html">N1盒子 CentOS7.9系统镜像，支持写入EMMC - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p><p>同时附上论坛上的简单教程:</p><p><a href="https://www.right.com.cn/forum/thread-6804025-1-1.html">分享N1盒子CentOS7.9系统下安装最新版本的宝塔面板linux7.7简单教程 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p><p><strong>特别感谢恩山论坛的各位大佬!</strong></p><blockquote><p>在此我也简单记录一下,以防某天重装系统:joy:</p></blockquote><p>修改写入emmc的脚本,添加上复制lib64文件夹的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.install_os_to_emmc/install.sh</span><br><span class="line"></span><br><span class="line">在153行后添加下面命令</span><br><span class="line"></span><br><span class="line">echo &quot;Copy LIB64...&quot;</span><br><span class="line">tar -cf - lib64 | (cd $DIR_INSTALL; tar -xpf -)</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/image-20220116094823830.png" alt="image-20220116094823830"></p><h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><blockquote><p>禁止宝塔打开swap内存,纯净系统只占用200-300MB内存,对于n1的2G内存来说,基本上够用了,何况8G的emmc也很稀缺</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改宝塔安装脚本</span><br><span class="line">删除或注释掉以下三条命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;MEM_TOTAL&#125;</span>&quot;</span> -le <span class="string">&quot;1&quot;</span> ];<span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       Auto_Swap</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure><p>关于宝塔安装nginx和php,听说是编译安装性能更优,只是安装较慢,本人亲测Nginx 1.20.2  Nginx 1.18  php7.4均可编译安装成功</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>网上也有很多教程,我就直接一点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="docker安装openwrt"><a href="#docker安装openwrt" class="headerlink" title="docker安装openwrt"></a>docker安装openwrt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先开启网卡混杂模式</span><br><span class="line">ip link set eth0 promisc on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建vlan</span></span><br><span class="line">docker network create -d macvlan --subnet=192.168.10.0/24 --gateway=192.168.10.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><p>网段与主路由相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:latest /sbin/init</span><br><span class="line">此时openwrt已在运行</span><br><span class="line">进入容器修改lan接口</span><br><span class="line">docker exec -it openwrt bash</span><br><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>只需修改<code>config interface &#39;lan&#39;</code>中的配置</p><p>ipaddr为主路由网段下的一个ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">option ipaddr &#x27;192.168.1.111&#x27;</span><br><span class="line">option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">option dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure><p>重启<code>/etc/init.d/network restart</code>之后就可以在浏览器输入<code>192.168.1.111</code>进入openwrt管理页面,默认密码为password</p><h3 id="关于旁路网关上网"><a href="#关于旁路网关上网" class="headerlink" title="关于旁路网关上网"></a>关于旁路网关上网</h3><p>使用<code>服务</code>-&gt;<code>PassWall</code>操作就行,实际上就是一个代理工具客户端</p><p>配置好之后,只需在设备上修改为静态ip,注意网关和DNS都要改为openwrt的ip<code>192.168.1.111</code>,大功告成,可以去测试一下</p><p><font color="red">记得去接口里把桥接关掉!!!</font></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li><p>解决宿主机无法和docker的macvlan通信</p><blockquote><p><a href="https://piaoyun.cc/1527.html">Docker的macvlan模式容器与宿主机通信问题-飘云 (piaoyun.cc)</a></p><p><a href="https://smalloutcome.com/2021/07/18/Docker-%E4%BD%BF%E7%94%A8-macvlan-%E7%BD%91%E7%BB%9C%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/">Docker 使用 macvlan 网络容器与宿主机的通信过程 | 一小步 (smalloutcome.com)</a></p></blockquote><p>一句话:</p><blockquote><p>mavlan 虚拟出来的网口不能和父网口直通，但是可以和同一子网的其他网口互通（包括其他虚拟出来的网口）。</p><p>通过在宿主机上用 macvlan 添加一个虚拟网口 mynet ，并在宿主机上配置路由到容器的数据包由 mynet 发出，就架起了宿主机与容器的通信桥梁。<br>宿主机发往容器的数据包，由 mynet 发给容器；容器发往宿主机的数据包先发给 mynet，再由 mynet 转交给 eth0。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip link add mynet link eth0 type macvlan mode bridge</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip addr add 192.168.1.112 dev mynet</span></span><br><span class="line">ip link set mynet up</span><br><span class="line">ip route add 192.168.1.111 dev mynet</span><br></pre></td></tr></table></figure><p>至此, 宿主机和容器应该是能互相ping通</p></li><li><p>解决宿主机使用openwrt网关时无法联网</p><blockquote><p><a href="https://github.com/lisaac/blog/issues/4">在docker中运行openwrt · Issue #4 · lisaac&#x2F;blog (github.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip route del default #删除默认路由</span><br><span class="line">ip route add default via 192.168.1.111 dev mynet # 设置静态路由</span><br></pre></td></tr></table></figure></li></ol><h4 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h4><blockquote><p>我们使用代理时,软件将我们的网络请求拦截,进而向代理服务器发送请求,代理服务器再向我们的目标服务器发送我们被软件拦截的原始请求,最后再返回</p><p>使用旁路网关时,我们的设备首先将请求发送至openwrt,在openwrt端一番操作再返回</p><p>两种方式本质都是一样的,只是第一种一个设备一个代理,第二种多个设备一个代理,对我们的使用体验来说,当然是第二种更好</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://mlapp.cn/376.html">在Docker 中运行 OpenWrt 旁路网关 | 美丽应用 (mlapp.cn)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;斐讯n1安装centos7-docker-openwrt&quot;&gt;&lt;a href=&quot;#斐讯n1安装centos7-docker-openwrt&quot; class=&quot;headerlink&quot; title=&quot;斐讯n1安装centos7+docker openwrt&quot;&gt;&lt;/a&gt;斐讯</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>家用电器功率统计</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%8A%9F%E7%8E%87%E7%BB%9F%E8%AE%A1/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%8A%9F%E7%8E%87%E7%BB%9F%E8%AE%A1/</id>
    <published>2023-12-31T20:18:03.304Z</published>
    <updated>2023-12-31T12:19:54.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="家用电器功率统计"><a href="#家用电器功率统计" class="headerlink" title="家用电器功率统计"></a>家用电器功率统计</h1><h2 id="冰箱"><a href="#冰箱" class="headerlink" title="冰箱"></a>冰箱</h2><blockquote><p>夜晚测量, 未打开过冰箱</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165619292.png" alt="image-20220805165619292"></p><p><img src="https://oss.zaqai.com/img/image-20220805155434589.png" alt="image-20220805155434589"></p><p>工作(85+80+78)&#x2F;3&#x3D;81min, 停止(67+69+71)&#x2F;3&#x3D;69min, 工作时间占比8&#x2F;15</p><p>工作时平均功率50w</p><p>一月大概消耗19度电</p><h2 id="冰柜"><a href="#冰柜" class="headerlink" title="冰柜"></a>冰柜</h2><blockquote><p>白天测量, 大概打开冰柜一次</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165508081.png" alt="image-20220805165508081"></p><p><img src="https://oss.zaqai.com/img/image-20220805154752162.png" alt="image-20220805154752162"></p><p>工作(14+14+25+17)&#x2F;4&#x3D;17.5min, 停止(24+23+18+21)&#x2F;4&#x3D;21.5min, 工作时间占比0.45</p><p>工作时平均功率80w</p><p>一月大概消耗26度电</p><h2 id="米家摄像头"><a href="#米家摄像头" class="headerlink" title="米家摄像头"></a>米家摄像头</h2><p><img src="https://oss.zaqai.com/img/image-20220805163303418.png" alt="image-20220805163303418"></p><p>2w!</p><h2 id="电风扇"><a href="#电风扇" class="headerlink" title="电风扇"></a>电风扇</h2><blockquote><p>不摇头</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165906206.png" alt="image-20220805165906206"></p><p>2档功率48w, 1档功率46w, 差别不大啊</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><blockquote><p>中间看了一段视频</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805174727491.png"></p><p><img src="https://oss.zaqai.com/img/image-20220805174204635.png" alt="image-20220805174204635"></p><p>权当6.5w吧</p><h2 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h2><p><img src="https://oss.zaqai.com/img/image-20220805174834318.png" alt="image-20220805174834318"></p><p><img src="https://oss.zaqai.com/img/image-20220805175659137.png" alt="image-20220805175659137"></p><p>2w吧</p><h2 id="外面摄像头"><a href="#外面摄像头" class="headerlink" title="外面摄像头"></a>外面摄像头</h2><p><img src="https://oss.zaqai.com/img/image-20220805213014673.png" alt="image-20220805213014673"></p><p>大概是夜晚开启夜视功能, 功率变高了, 算作4w吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;家用电器功率统计&quot;&gt;&lt;a href=&quot;#家用电器功率统计&quot; class=&quot;headerlink&quot; title=&quot;家用电器功率统计&quot;&gt;&lt;/a&gt;家用电器功率统计&lt;/h1&gt;&lt;h2 id=&quot;冰箱&quot;&gt;&lt;a href=&quot;#冰箱&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>好用的docker镜像</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%A5%BD%E7%94%A8%E7%9A%84docker%E9%95%9C%E5%83%8F/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%A5%BD%E7%94%A8%E7%9A%84docker%E9%95%9C%E5%83%8F/</id>
    <published>2023-12-31T20:18:03.302Z</published>
    <updated>2023-12-31T12:19:53.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="好用的docker镜像"><a href="#好用的docker镜像" class="headerlink" title="好用的docker镜像"></a>好用的docker镜像</h1><h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br><span class="line">docker run -d --name portainer -p 39000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /root/data/docker_data/portainer/data:/data -v /root/data/docker_data/portainer/public:/public portainer/portainer</span><br></pre></td></tr></table></figure><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/docker_data/portainer</span><br><span class="line">wget https://alist.zaqai.com/d/ali/share/portainer汉化/public.zip</span><br><span class="line">unzip ./public.zip</span><br></pre></td></tr></table></figure><h2 id="alist"><a href="#alist" class="headerlink" title="alist"></a>alist</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always -v /etc/alist:/opt/alist/data -v /xa:/xa -p 39244:5244 --name=&quot;alist&quot; xhofe/alist:latest</span><br></pre></td></tr></table></figure><h2 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet -v /xa:/xa -v /ali:/ali --privileged sulinggg/openwrt:latest /sbin/init</span><br></pre></td></tr></table></figure><h2 id="home-assistant"><a href="#home-assistant" class="headerlink" title="home-assistant"></a>home-assistant</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=&quot;home-assistant&quot; -e TZ=Asia/Shanghai -v /root/data/docker_data/hassistant:/config -p 8123:8123 -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure><p>安装<code>Xiaomi Miot Auto</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it home-assistant /bin/bash</span><br><span class="line">wget -q -O - https://raw.fastgit.org/al-one/hass-xiaomi-miot/master/install.sh | HUB_DOMAIN=hub.fastgit.xyz ARCHIVE_TAG=latest bash -</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://zhuanlan.zhihu.com/p/352903303">https://zhuanlan.zhihu.com/p/352903303</a></p></blockquote><h2 id="青龙面板"><a href="#青龙面板" class="headerlink" title="青龙面板"></a>青龙面板</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line"> --name ql \</span><br><span class="line"> --hostname ql \</span><br><span class="line"> --restart always \</span><br><span class="line"> -p 35700:5700 \</span><br><span class="line"> -p 35701:5701 \</span><br><span class="line"> -v /root/data/docker_data/ql/config:/ql/config \</span><br><span class="line"> -v /root/data/docker_data/ql/log:/ql/log \</span><br><span class="line"> -v /root/data/docker_data/ql/db:/ql/db \</span><br><span class="line"> -v /root/data/docker_data/ql/scripts:/ql/scripts \</span><br><span class="line"> -v /root/data/docker_data/ql/jbot:/ql/jbot \</span><br><span class="line"> -v /root/data/docker_data/ql/ninja:/ql/ninja \</span><br><span class="line"> whyour/qinglong:latest</span><br></pre></td></tr></table></figure><h2 id="nodered"><a href="#nodered" class="headerlink" title="nodered"></a>nodered</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1880:1880 --restart=always -e TZ=&quot;Asia/Shanghai&quot; -v /root/data/docker_data/nodered:/data --name nodered nodered/node-red</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/">https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;好用的docker镜像&quot;&gt;&lt;a href=&quot;#好用的docker镜像&quot; class=&quot;headerlink&quot; title=&quot;好用的docker镜像&quot;&gt;&lt;/a&gt;好用的docker镜像&lt;/h1&gt;&lt;h2 id=&quot;portainer&quot;&gt;&lt;a href=&quot;#portaine</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十种方式实现WordCount(scala)</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%8D%81%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount(scala)/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%8D%81%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount(scala)/</id>
    <published>2023-12-31T20:18:03.301Z</published>
    <updated>2023-12-31T12:19:55.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十种方式实现WordCount-scala"><a href="#十种方式实现WordCount-scala" class="headerlink" title="十种方式实现WordCount(scala)"></a>十种方式实现WordCount(scala)</h1><blockquote><p>本质上都是各种RDD算子的灵活使用</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.scala.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.&#123;<span class="type">AccumulatorV2</span>, <span class="type">LongAccumulator</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Wordcount的不同实现方式</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount_40_周绮</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;data/file*.txt&quot;</span>)</span><br><span class="line">    dataRDD.cache()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法1: groupBy、map、t._2.size ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .groupBy(word =&gt; word)</span><br><span class="line">      .map(t =&gt; (t._1, t._2.size))</span><br><span class="line">      .collect</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法2: map、reduceByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      .collect</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法3: 累加器 ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wcAcc = <span class="keyword">new</span> <span class="type">MyAccumulator</span>() <span class="comment">//创建累加器</span></span><br><span class="line">    sc.register(wcAcc, <span class="string">&quot;WordCountAcc&quot;</span>) <span class="comment">//向SparkContext注册累加器</span></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).foreach(</span><br><span class="line">      word =&gt; (wcAcc.add(word)) <span class="comment">//使用累加器进行单词累加</span></span><br><span class="line">    )</span><br><span class="line">    wcAcc.value.foreach((k)=&gt;&#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k._1 + <span class="string">&quot;,&quot;</span> + k._2 + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法4: map、aggregateByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .aggregateByKey(<span class="number">0</span>)(</span><br><span class="line">        (x, y) =&gt; x + y, <span class="comment">//分区内的聚合规则</span></span><br><span class="line">        (x, y) =&gt; x + y <span class="comment">//分区间的聚合规则</span></span><br><span class="line">      ).collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法5: map、foldByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .foldByKey(<span class="number">0</span>)(_ + _)</span><br><span class="line">      .collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法6: map、combineByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>)).combineByKey(</span><br><span class="line">      <span class="comment">//第一个参数：将相同 key 的第一个数据进行结构的转换</span></span><br><span class="line">      v =&gt; v,</span><br><span class="line">      <span class="comment">//指定分区内的聚合规则：</span></span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y,</span><br><span class="line">      <span class="comment">//分区间的聚合规则</span></span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y,</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法7: map、groupByKey、map ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .groupByKey()</span><br><span class="line">      .map((t) =&gt; (t._1, t._2.size))</span><br><span class="line">      .collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法8: countByValue ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> m = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).countByValue()</span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- m) &#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;,&quot;</span> + v + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;--------- 方法9: map、countByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> m2 = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_, <span class="number">1</span>)).countByKey()</span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- m2) &#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;,&quot;</span> + v + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法10: map+LongAccumulator(实在想不到了...) ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mm = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> scalaAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;scala&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line">    <span class="keyword">val</span> helloAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;hello&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line">    <span class="keyword">val</span> sparkAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;spark&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k &lt;- mm) &#123;</span><br><span class="line">      k <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;scala&quot;</span> =&gt; scalaAcc.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> =&gt; helloAcc.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;spark&quot;</span> =&gt; sparkAcc.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + scalaAcc.name.get + <span class="string">&quot;,&quot;</span> + scalaAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + helloAcc.name.get + <span class="string">&quot;,&quot;</span> + helloAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + sparkAcc.name.get + <span class="string">&quot;,&quot;</span> + sparkAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAccumulator</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]] </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> wcMap = collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]() <span class="comment">//定义Map集合，保存每个单词及次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断累加器是否为初始状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">      wcMap.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      wcMap.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义累计规则，将累加结果写入wcMap对象</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(word: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> newCount = wcMap.getOrElse(word, <span class="number">0</span>L) + <span class="number">1</span></span><br><span class="line">      wcMap.update(word, newCount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取累加器结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = &#123;</span><br><span class="line">      wcMap</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Driver合并多个累加器的规则</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> map1 = <span class="keyword">this</span>.wcMap</span><br><span class="line">      <span class="keyword">val</span> map2 = other.value</span><br><span class="line">      map2.foreach &#123;</span><br><span class="line">        <span class="keyword">case</span> (word, count) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> newCount: <span class="type">Long</span> = map1.getOrElse(word, <span class="number">0</span>L) + count</span><br><span class="line">          map1.update(word, newCount)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]] = &#123;</span><br><span class="line">      <span class="keyword">val</span> newMyAccumulator = <span class="keyword">new</span> <span class="type">MyAccumulator</span>()</span><br><span class="line">      newMyAccumulator.wcMap = <span class="keyword">this</span>.wcMap</span><br><span class="line">      newMyAccumulator</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>更多RDD算子相关内容可参考<a href="https://blog.zaqai.com/index.php/archives/27/">创建RDD &amp; RDD算子 - zaqai_blog</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十种方式实现WordCount-scala&quot;&gt;&lt;a href=&quot;#十种方式实现WordCount-scala&quot; class=&quot;headerlink&quot; title=&quot;十种方式实现WordCount(scala)&quot;&gt;&lt;/a&gt;十种方式实现WordCount(scala)</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题笔记-链表</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%93%BE%E8%A1%A8/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%93%BE%E8%A1%A8/</id>
    <published>2023-12-31T20:18:03.300Z</published>
    <updated>2023-12-31T12:19:56.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题笔记-链表"><a href="#刷题笔记-链表" class="headerlink" title="刷题笔记-链表"></a>刷题笔记-链表</h1><h2 id="完整链表操作模板"><a href="#完整链表操作模板" class="headerlink" title="完整链表操作模板"></a>完整链表操作模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    struct ListNode &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        ListNode() : val(<span class="number">0</span>), next(nullptr) &#123;&#125;</span><br><span class="line">        ListNode(<span class="type">int</span> x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line">        ListNode(<span class="type">int</span> x, ListNode* next) : val(x), next(next) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    MyLinkedList() &#123;</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size - <span class="number">1</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;next-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;index out of range!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        delete temp;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr) &#123;</span><br><span class="line">            cout &lt;&lt; cur-&gt;next-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">()</span> &#123;</span><br><span class="line">        ListNode* temp;</span><br><span class="line">        ListNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        ListNode* pre = nullptr;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            temp = cur-&gt;next;  <span class="comment">// 保存一下</span></span><br><span class="line">                               <span class="comment">// cur的下一个节点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">            cur-&gt;next = pre;  <span class="comment">// 翻转操作</span></span><br><span class="line">            <span class="comment">// 更新pre 和 cur指针</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        _dummyHead-&gt;next = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeNthFromEnd</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ListNode* slow = _dummyHead;</span><br><span class="line">        ListNode* fast = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (n-- &amp;&amp; fast != nullptr) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == nullptr) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != nullptr) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tem = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        delete tem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">()</span> &#123;<span class="comment">// 两两节点交换</span></span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr &amp;&amp; cur-&gt;next-&gt;next != nullptr) &#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;               <span class="comment">// 记录临时节点</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;  <span class="comment">// 记录临时节点</span></span><br><span class="line"></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;   <span class="comment">// 步骤一</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp;         <span class="comment">// 步骤二</span></span><br><span class="line">            cur-&gt;next-&gt;next-&gt;next = tmp1;  <span class="comment">// 步骤三</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next;  <span class="comment">// cur移动两位，准备下一轮交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _size;</span><br><span class="line">        ListNode* _dummyHead;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyLinkedList linkedList;</span><br><span class="line">    linkedList.addAtHead(<span class="number">1</span>);</span><br><span class="line">    linkedList.addAtHead(<span class="number">2</span>);</span><br><span class="line">    linkedList.addAtHead(<span class="number">3</span>);</span><br><span class="line">    linkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// linkedList.reverseList();</span></span><br><span class="line">    linkedList.printLinkedList();</span><br><span class="line">    <span class="comment">// cout&lt;&lt;linkedList.get(2);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p></blockquote><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><img src="https://camo.githubusercontent.com/36cf9298bccf54091dbcabb9ede884bf98d5b2f6f04bd89a36ac2904b26d0971/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303865476d5a456c7931676e7266316f626f757067333067793063343471702e676966" alt="img" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        tmp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷题笔记-链表&quot;&gt;&lt;a href=&quot;#刷题笔记-链表&quot; class=&quot;headerlink&quot; title=&quot;刷题笔记-链表&quot;&gt;&lt;/a&gt;刷题笔记-链表&lt;/h1&gt;&lt;h2 id=&quot;完整链表操作模板&quot;&gt;&lt;a href=&quot;#完整链表操作模板&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题笔记-二叉树</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2023-12-31T20:18:03.299Z</published>
    <updated>2023-12-31T12:19:56.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题笔记-二叉树"><a href="#刷题笔记-二叉树" class="headerlink" title="刷题笔记-二叉树"></a>刷题笔记-二叉树</h1><ul><li>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，所以map、set的增删操作时间时间复杂度是logn</li><li>unordered_map、unordered_map底层实现是哈希表</li><li>顺序存储完全二叉树: 如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2</li><li>深度优先遍历(前中后序)一般通过递归实现, 也可通过栈使用非递归实现</li><li>广度优先遍历(层次遍历)一般通过队列实现</li></ul><h2 id="二叉树创建"><a href="#二叉树创建" class="headerlink" title="二叉树创建"></a>二叉树创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">CreateTree</span><span class="params">(Integer[] c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size &gt;= c.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">var</span> <span class="operator">=</span> c[size++];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="keyword">var</span>);</span><br><span class="line">    System.out.println(<span class="keyword">var</span>);</span><br><span class="line">    node.left = CreateTree(c);</span><br><span class="line">    node.right = CreateTree(c);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="深度优先遍历-递归"><a href="#深度优先遍历-递归" class="headerlink" title="深度优先遍历(递归)"></a>深度优先遍历(递归)</h2><ul><li><p>前序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="深度优先遍历-非递归-利用栈"><a href="#深度优先遍历-非递归-利用栈" class="headerlink" title="深度优先遍历(非递归, 利用栈)"></a>深度优先遍历(非递归, 利用栈)</h2><ul><li><p>前序</p><blockquote><p>较为简单, 因为对每一个节点的孩子来说, 他都是根节点, 在访问到它时, 直接将他的值放入数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        result.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序</p><blockquote><p>较前序复杂, 因为访问到一个节点时, 需先放入栈中, 直到它的左子树为空, 才弹出将它的值放入数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            result.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序</p><blockquote><p>利用一个规律–<strong>根右左</strong>的遍历结果反转一下就是后序遍历结果</p><p>为什么这样做呢, 因为这样跟前序一样简单</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        result.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="深度优先遍历一致性代码-非递归"><a href="#深度优先遍历一致性代码-非递归" class="headerlink" title="深度优先遍历一致性代码(非递归)"></a>深度优先遍历一致性代码(非递归)</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">  ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">           node = stack.peek();</span><br><span class="line">      <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">          stack.pop();</span><br><span class="line">          <span class="comment">// 后序遍历</span></span><br><span class="line">          stack.push(node);</span><br><span class="line">          stack.push(<span class="literal">null</span>);</span><br><span class="line">          <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">              stack.push(node.right);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">              stack.push(node.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 后序遍历 从下向上看, 左右根, 为后序</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          stack.pop();</span><br><span class="line">          node = stack.pop();</span><br><span class="line">          result.add(node.val);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他遍历顺序只需调整一下注释部分的顺序</p></blockquote><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">        ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            al.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        resList.add(al);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="广度优先遍历-返回一维数组-如果节点没有左孩子或右孩子-为null"><a href="#广度优先遍历-返回一维数组-如果节点没有左孩子或右孩子-为null" class="headerlink" title="广度优先遍历(返回一维数组, 如果节点没有左孩子或右孩子, 为null)"></a>广度优先遍历(返回一维数组, 如果节点没有左孩子或右孩子, 为null)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flagR</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        resList.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (flagR) resList.add(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">            flagR = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">        res=[]</span><br><span class="line">        l=deque()</span><br><span class="line">        l.append(root)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(l)!=<span class="number">0</span>:</span><br><span class="line">            root=l.popleft()</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                l.append(root.left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(<span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                l.append(root.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t=TreeNode(<span class="number">3</span>)</span><br><span class="line">t.left=TreeNode(<span class="number">9</span>)</span><br><span class="line">t.right=TreeNode(<span class="number">20</span>)</span><br><span class="line">t.right.left=TreeNode(<span class="number">15</span>)</span><br><span class="line">t.right.right=TreeNode(<span class="number">7</span>)</span><br><span class="line">s = Solution()</span><br><span class="line">s.levelOrder(t)</span><br></pre></td></tr></table></figure><blockquote><p>貌似和上边的Java代码效果一样…</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220804110825088.png" alt="image-20220804110825088"></p><h2 id="最底层-最左边-节点的值"><a href="#最底层-最左边-节点的值" class="headerlink" title="最底层 最左边 节点的值"></a>最底层 最左边 节点的值</h2><p><img src="https://oss.zaqai.com/img/image-20220622151349281.png" alt="image-20220622151349281"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          root = queue.poll();</span><br><span class="line">          <span class="keyword">if</span> (root.right != <span class="literal">null</span>) queue.offer(root.right);</span><br><span class="line">          <span class="keyword">if</span> (root.left != <span class="literal">null</span>) queue.offer(root.left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root.val;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>队列广度遍历，先放右孩子，保证最后出来是最左</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; depth)&#123;</span><br><span class="line">                max = depth;</span><br><span class="line">                res = node.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left, depth + <span class="number">1</span>);</span><br><span class="line">        dfs(node.right, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>深度搜索＋递归, 一条路行到黑, 只要不是叶子节点, 就递归左 右, 碰到叶子节点再比较深度, 由于同一层次最左边的值先赋值给res, 右边深度相等, 不会赋值.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷题笔记-二叉树&quot;&gt;&lt;a href=&quot;#刷题笔记-二叉树&quot; class=&quot;headerlink&quot; title=&quot;刷题笔记-二叉树&quot;&gt;&lt;/a&gt;刷题笔记-二叉树&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;C++中map、set、multimap，multiset的底层实现都是平衡二叉</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于计网的笔记</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%BD%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%BD%91%E7%9A%84%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-31T20:18:03.290Z</published>
    <updated>2023-12-31T12:19:53.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于计网的笔记"><a href="#关于计网的笔记" class="headerlink" title="关于计网的笔记"></a>关于计网的笔记</h1><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><h3 id="TLS握手过程"><a href="#TLS握手过程" class="headerlink" title="TLS握手过程"></a>TLS握手过程</h3><p><img src="https://oss.zaqai.com/img/image-20220527090819147.png"></p><ul><li>Client Hello:报文中选项字段包含客户端支持的 SSL的指定版本和所使用的加密算法等</li><li>Server Hello: 根据客户端的加密组件筛选自己的加密组件发送, 发送 Certificate 报文。 报文中包含公开密钥证书。服务器同时还提供了一个用作产生密钥的随机数</li><li>Client Key Exchange: 证书可信, 客户端用随机数和 hash 签名生成一串对称密钥, 用 crt 公钥对对称密钥进行加密</li><li>服务端解密后回应</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>先三次握手建立TCP连接, 再TLS握手</li></ul><p><img src="https://oss.zaqai.com/img/image-20220527090052005.png" alt="image-20220527090052005"></p><ul><li><p>1.2四次握手 1.3两次就可以</p><p><img src="https://oss.zaqai.com/img/image-20220527090234953.png" alt="image-20220527090234953"></p></li><li><p><strong>HTTPS 中的 TLS 握手过程可以同时进行三次握手</strong>必须满足两个条件</p><ul><li>客户端和服务端都开启了 TCP Fast Open 功能，且 TLS 版本是 1.3；</li><li>客户端和服务端已经完成过一次通信。</li></ul></li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="SYN洪泛攻击"><a href="#SYN洪泛攻击" class="headerlink" title="SYN洪泛攻击"></a>SYN洪泛攻击</h3><ul><li>原理: 只有两次握手</li><li>客户端发送SYN后, 服务器收到后进入<strong>半开连接</strong>状态, 此时会为这次连接分配资源, 如果没有收到第三次握手, 会等待一段时间才释放资源</li><li>防止手段: <strong>SYN cookie</strong><ul><li>在二次握手时服务器不分配资源, 而是生成一个初始的序列号：该序列号是 “SYN报文段中的源和目的IP地址与端口号以及一个只有服务器自己知道的秘密数 (secret number) ” 的hash值</li><li>如果没有第三次, 对服务器无影响, 如果有第三次, 服务器根据ip和端口号以及秘密数计算出序列号, 加一后和ACK的确认号对比, 相同才创建连接</li></ul></li></ul><h3 id="两次握手会造成什么"><a href="#两次握手会造成什么" class="headerlink" title="两次握手会造成什么"></a>两次握手会造成什么</h3><ul><li>在这种情况下, 服务端回复SYN+ACK便认为连接建立, 就会发送数据</li><li>如果客户端第一次的SYN没有及时得到响应, 便会第二次SYN, 第二次正常传输完成后, 第一次的SYN到达服务器, 这时客户端并不需要连接, 处于CLOSED状态, 对于服务端发来的数据也是直接丢弃(当然客户端发现服务端总是给自己发送, 而自己总是丢弃, 会发送<strong>RST</strong>终止连接)</li><li>在三次握手的情况下， 可以在服务端建立连接之前，可以阻止掉了历史连接，从而保证建立的连接不是历史连接。</li><li><img src="https://oss.zaqai.com/img/image-20220527094123394.png" alt="image-20220527094123394"></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul><li>TCP 的第一次和第二次握手是不能够携带数据的, 但由于是SYN报文(SYN标志位为1), 会占用一个序列号</li><li>第三次的ACK, 不占用序列号, 可以携带数据, 如果不携带数据, 客户端发送的下一个seq和第三次的seq相同</li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><h3 id="冷知识"><a href="#冷知识" class="headerlink" title="冷知识"></a>冷知识</h3><ul><li><p>四次挥手中，不管是程序主动执行close()，还是进程被杀，都有可能发出第一次挥手FIN包。如果机器上FIN-WAIT-2状态特别多，一般是因为对端一直不执行close()方法发出第三次挥手。</p></li><li><p>Close()会同时关闭发送和接收消息的功能。shutdown() 能单独关闭发送或接受消息。</p></li><li><p>第二、第三次挥手，是有可能合在一起的(FIN+ACK 或 FIN+ACK+数据)。于是四次挥手就变成三次挥手了。</p></li><li><p>同一个socket自己连自己，会产生TCP自连接，自连接的挥手是两次挥手。</p></li><li><p>没有listen，两个客户端之间也能建立连接。这种情况叫TCP同时打开，它由四次握手产生。</p></li><li><p>参考<a href="https://blog.csdn.net/WantFlyDaCheng/article/details/119922543">活久见！TCP两次挥手，你见过吗？那四次握手呢？_程序员乔戈里的博客-CSDN博客</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于计网的笔记&quot;&gt;&lt;a href=&quot;#关于计网的笔记&quot; class=&quot;headerlink&quot; title=&quot;关于计网的笔记&quot;&gt;&lt;/a&gt;关于计网的笔记&lt;/h1&gt;&lt;h2 id=&quot;https&quot;&gt;&lt;a href=&quot;#https&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一些有用的显示服务器信息的脚本</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E7%9A%84%E8%84%9A%E6%9C%AC/</id>
    <published>2023-12-31T20:18:03.289Z</published>
    <updated>2023-12-31T12:19:37.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些有用的显示服务器信息的脚本"><a href="#一些有用的显示服务器信息的脚本" class="headerlink" title="一些有用的显示服务器信息的脚本"></a>一些有用的显示服务器信息的脚本</h1><blockquote><p>ssh登录服务器的时候最先看到的便是一些欢迎的信息, 但默认的欢迎信息可以说是毫无用处, 我们便可以自行修改来展示一些有用的信息.</p></blockquote><p><img src="https://oss.zaqai.com/img/202312302351397.png" alt="image-20231230235121076"></p><h2 id="motd"><a href="#motd" class="headerlink" title="motd"></a>motd</h2><p>motd, 全称Message Of The Day, 是Linux中发送问候消息的功能, 每次任意用户登录时都会触发motd服务的功能, 这个功能的脚本几乎都是使用root 权限来启动的</p><p>脚本位置在<code>/etc/update-motd.d</code>, 不想执行某些脚本, 可以直接取消执行权限</p><p><img src="https://oss.zaqai.com/img/202312302355753.png" alt="image-20231230235518657"></p><h2 id="10-hostname-color"><a href="#10-hostname-color" class="headerlink" title="10-hostname-color"></a>10-hostname-color</h2><p>类似于logo banner之类的东西, 比如Spring Boot项目启动后就会显示<code>Spring Boot</code>的logo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/bin/figlet <span class="string">&quot;<span class="subst">$(hostname)</span>&quot;</span> | /usr/bin/lolcat -f</span><br></pre></td></tr></table></figure><h2 id="10-uname"><a href="#10-uname" class="headerlink" title="10-uname"></a>10-uname</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">uname</span> -snrvm</span><br></pre></td></tr></table></figure><h2 id="20-sysinfo"><a href="#20-sysinfo" class="headerlink" title="20-sysinfo"></a>20-sysinfo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get load averages</span></span><br><span class="line">IFS=<span class="string">&quot; &quot;</span> <span class="built_in">read</span> LOAD1 LOAD5 LOAD15 &lt;&lt;&lt;$(<span class="built_in">cat</span> /proc/loadavg | awk <span class="string">&#x27;&#123; print $1,$2,$3 &#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># get free memory</span></span><br><span class="line">IFS=<span class="string">&quot; &quot;</span> <span class="built_in">read</span> USED AVAIL TOTAL &lt;&lt;&lt;$(free -htm | sed -n <span class="string">&#x27;2p&#x27;</span> | awk &#123;<span class="string">&#x27;print $3,$7,$2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># get processes</span></span><br><span class="line">PROCESS=`ps -eo user=|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c | awk <span class="string">&#x27;&#123; print $2 &quot; &quot; $1 &#125;&#x27;</span>`</span><br><span class="line">PROCESS_ALL=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125; | awk <span class="string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`</span><br><span class="line">PROCESS_ROOT=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| grep root | awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125;`</span><br><span class="line">PROCESS_USER=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| grep -v root | awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125; | awk <span class="string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># get processors</span></span><br><span class="line">PROCESSOR_NAME=`grep <span class="string">&quot;model name&quot;</span> /proc/cpuinfo | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f3- | awk &#123;<span class="string">&#x27;print $0&#x27;</span>&#125; | <span class="built_in">head</span> -1`</span><br><span class="line">PROCESSOR_COUNT=`grep -ioP <span class="string">&#x27;processor\t:&#x27;</span> /proc/cpuinfo | <span class="built_in">wc</span> -l`</span><br><span class="line"></span><br><span class="line">W=<span class="string">&quot;\e[0;39m&quot;</span></span><br><span class="line">G=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;</span></span><br><span class="line"><span class="string"><span class="variable">$&#123;W&#125;</span>system info:</span></span><br><span class="line"><span class="string"><span class="variable">$W</span>  Distro......: <span class="variable">$W</span>`cat /etc/*release | grep &quot;</span>PRETTY_NAME<span class="string">&quot; | cut -d &quot;</span>=<span class="string">&quot; -f 2- | sed &#x27;s/&quot;</span>//g<span class="string">&#x27;`</span></span><br><span class="line"><span class="string">$W  Kernel......: $W`uname -sr`</span></span><br><span class="line"><span class="string">$W  Uptime......: $W`uptime -p`</span></span><br><span class="line"><span class="string">$W  Load........: $G$LOAD1$W (1m), $G$LOAD5$W (5m), $G$LOAD15$W (15m)</span></span><br><span class="line"><span class="string">$W  Processes...:$W $G$PROCESS_ROOT$W (root), $G$PROCESS_USER$W (user), $G$PROCESS_ALL$W (total)</span></span><br><span class="line"><span class="string">$W  CPU.........: $W$PROCESSOR_NAME ($G$PROCESSOR_COUNT$W vCPU)</span></span><br><span class="line"><span class="string">$W  Memory......: $G$USED$W used, $G$AVAIL$W avail, $G$TOTAL$W total$W &quot;</span></span><br></pre></td></tr></table></figure><h2 id="30-gpu-utility"><a href="#30-gpu-utility" class="headerlink" title="30-gpu-utility"></a>30-gpu-utility</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\ngpu utility:\n&quot;</span></span><br><span class="line">GPUNUM=`nvidia-smi -q|grep Attached|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 $((<span class="variable">$GPUNUM</span>-<span class="number">1</span>)))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;GPU<span class="variable">$i</span> Utilization: &quot;</span>`nvidia-smi -q -i <span class="variable">$i</span> -d Utilization|sed -n <span class="string">&quot;11p&quot;</span>|awk <span class="string">&#x27;&#123;print $3$4&#125;&#x27;</span>`\</span><br><span class="line">         <span class="string">&quot;Memory Used: &quot;</span>`nvidia-smi -q -i <span class="variable">$i</span> -d Utilization|sed -n <span class="string">&quot;12p&quot;</span>|awk <span class="string">&#x27;&#123;print $3$4&#125;&#x27;</span>`;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="35-diskspace"><a href="#35-diskspace" class="headerlink" title="35-diskspace"></a>35-diskspace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">max_usage=90</span><br><span class="line">bar_width=50</span><br><span class="line"><span class="comment"># colors</span></span><br><span class="line">white=<span class="string">&quot;\e[39m&quot;</span></span><br><span class="line">green=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line">red=<span class="string">&quot;\e[1;31m&quot;</span></span><br><span class="line">dim=<span class="string">&quot;\e[2m&quot;</span></span><br><span class="line">undim=<span class="string">&quot;\e[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disk usage: ignore zfs, squashfs &amp; tmpfs</span></span><br><span class="line"><span class="built_in">mapfile</span> -t dfs &lt; &lt;(<span class="built_in">df</span> -H -x zfs -x squashfs -x tmpfs -x devtmpfs -x overlay --output=target,pcent,size | <span class="built_in">tail</span> -n+2)</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\ndisk usage:\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;dfs[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># get disk usage</span></span><br><span class="line">    usage=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | sed <span class="string">&#x27;s/%//&#x27;</span>)</span><br><span class="line">    used_width=$(((<span class="variable">$usage</span>*<span class="variable">$bar_width</span>)/<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># color is green if usage &lt; max_usage, else red</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;usage&#125;</span>&quot;</span> -ge <span class="string">&quot;<span class="variable">$&#123;max_usage&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        color=<span class="variable">$red</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color=<span class="variable">$green</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># print green/red bar until used_width</span></span><br><span class="line">    bar=<span class="string">&quot;[<span class="variable">$&#123;color&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="variable">$used_width</span>; i++)); <span class="keyword">do</span></span><br><span class="line">        bar+=<span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="comment"># print dimmmed bar until end</span></span><br><span class="line">    bar+=<span class="string">&quot;<span class="variable">$&#123;white&#125;</span><span class="variable">$&#123;dim&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="variable">$used_width</span>; i&lt;<span class="variable">$bar_width</span>; i++)); <span class="keyword">do</span></span><br><span class="line">        bar+=<span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    bar+=<span class="string">&quot;<span class="variable">$&#123;undim&#125;</span>]&quot;</span></span><br><span class="line">    <span class="comment"># print usage line &amp; bar</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;line&#125;</span>&quot;</span> | awk <span class="string">&#x27;&#123; printf(&quot;%-31s%+3s used out of %+4s\n&quot;, $1, $2, $3); &#125;&#x27;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;bar&#125;</span>&quot;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="40-services"><a href="#40-services" class="headerlink" title="40-services"></a>40-services</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set column width</span></span><br><span class="line">COLUMNS=3</span><br><span class="line"><span class="comment"># colors</span></span><br><span class="line">green=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line">red=<span class="string">&quot;\e[1;31m&quot;</span></span><br><span class="line">undim=<span class="string">&quot;\e[0m&quot;</span></span><br><span class="line"></span><br><span class="line">services=(<span class="string">&quot;ssh&quot;</span> <span class="string">&quot;docker&quot;</span> <span class="string">&quot;apache2&quot;</span> <span class="string">&quot;nginx&quot;</span> <span class="string">&quot;mysql&quot;</span> <span class="string">&quot;networking&quot;</span> <span class="string">&quot;ufw&quot;</span> <span class="string">&quot;xrdp&quot;</span>)</span><br><span class="line"><span class="comment"># sort services</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> services=($(<span class="built_in">sort</span> &lt;&lt;&lt;<span class="string">&quot;<span class="variable">$&#123;services[*]&#125;</span>&quot;</span>))</span><br><span class="line"><span class="built_in">unset</span> IFS</span><br><span class="line"></span><br><span class="line">service_status=()</span><br><span class="line"><span class="comment"># get status of all services</span></span><br><span class="line"><span class="keyword">for</span> service <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;services[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    service_status+=($(systemctl is-active <span class="string">&quot;<span class="variable">$service</span>&quot;</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">out=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!services[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># color green if service is active, else red</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;service_status[$i]&#125;</span>&quot;</span> == <span class="string">&quot;active&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        out+=<span class="string">&quot;<span class="variable">$&#123;services[$i]&#125;</span>:,<span class="variable">$&#123;green&#125;</span><span class="variable">$&#123;service_status[$i]&#125;</span><span class="variable">$&#123;undim&#125;</span>,&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        out+=<span class="string">&quot;<span class="variable">$&#123;services[$i]&#125;</span>:,<span class="variable">$&#123;red&#125;</span><span class="variable">$&#123;service_status[$i]&#125;</span><span class="variable">$&#123;undim&#125;</span>,&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># insert \n every $COLUMNS column</span></span><br><span class="line">    <span class="keyword">if</span> [ $(((<span class="variable">$i</span>+<span class="number">1</span>) % <span class="variable">$COLUMNS</span>)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        out+=<span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">out+=<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\nservices:\n&quot;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$out</span>&quot;</span> | column -ts $<span class="string">&#x27;,&#x27;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一些有用的显示服务器信息的脚本&quot;&gt;&lt;a href=&quot;#一些有用的显示服务器信息的脚本&quot; class=&quot;headerlink&quot; title=&quot;一些有用的显示服务器信息的脚本&quot;&gt;&lt;/a&gt;一些有用的显示服务器信息的脚本&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ssh登录</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【狂神说Java】网络编程实战讲解</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/</id>
    <published>2023-12-31T20:18:03.287Z</published>
    <updated>2023-12-31T12:19:38.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【狂神说Java】网络编程实战讲解"><a href="#【狂神说Java】网络编程实战讲解" class="headerlink" title="【狂神说Java】网络编程实战讲解"></a>【狂神说Java】网络编程实战讲解</h1><h2 id="tcpChat"><a href="#tcpChat" class="headerlink" title="tcpChat"></a>tcpChat</h2><blockquote><p>客户端循环输入时不知道哪些东西该放进去, 如果不用<code>os.close()</code>, 字节只是写进了流中, 没有发送, 服务端接收不到, <code>os.flush()</code>也不行</p></blockquote><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            os.write(msg.getBytes());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                os.close();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            socket = ss.accept();</span><br><span class="line"></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(byteArrayOutputStream.toString())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCPFileUpload"><a href="#TCPFileUpload" class="headerlink" title="TCPFileUpload"></a>TCPFileUpload</h2><h3 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPUpload.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\17513\\Pictures\\锁屏壁纸\\dc7d4e3bf3b1e123eb082393cf104bb6bb4488f235a0fb2f35fbc5d24a9658b5.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPUpload.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;ewceive.png&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UDPSendAndReceive"><a href="#UDPSendAndReceive" class="headerlink" title="UDPSendAndReceive"></a>UDPSendAndReceive</h2><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSend</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length).trim();</span><br><span class="line"><span class="comment">//            System.out.println(data.length+&quot;LLL&quot;);</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UDP互相聊天"><a href="#UDP互相聊天" class="headerlink" title="UDP互相聊天"></a>UDP互相聊天</h2><h2 id="TalkSend-java"><a href="#TalkSend-java" class="headerlink" title="TalkSend.java"></a>TalkSend.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkSend</span><span class="params">(<span class="type">int</span> fromPort, String toIP, <span class="type">int</span> toPort)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(fromPort);</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg = reader.readLine();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP, <span class="built_in">this</span>.toPort));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkReceive-java"><a href="#TalkReceive-java" class="headerlink" title="TalkReceive.java"></a>TalkReceive.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkReceive</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkReceive</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length).trim();</span><br><span class="line"><span class="comment">//            System.out.println(data.length+&quot;LLL&quot;);</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkMain1-java"><a href="#TalkMain1-java" class="headerlink" title="TalkMain1.java"></a>TalkMain1.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkMain1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">7777</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>), <span class="string">&quot;meng&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">8888</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkMain2-java"><a href="#TalkMain2-java" class="headerlink" title="TalkMain2.java"></a>TalkMain2.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkMain2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">5555</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;jk&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">9999</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URLDownload"><a href="#URLDownload" class="headerlink" title="URLDownload"></a>URLDownload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDownload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://pic1.zhimg.com/v2-f6290c8c1e1c722ea275646d4f780309_qhd.jpg?source=172ae18b&quot;</span>);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;tu.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【狂神说Java】网络编程实战讲解&quot;&gt;&lt;a href=&quot;#【狂神说Java】网络编程实战讲解&quot; class=&quot;headerlink&quot; title=&quot;【狂神说Java】网络编程实战讲解&quot;&gt;&lt;/a&gt;【狂神说Java】网络编程实战讲解&lt;/h1&gt;&lt;h2 id=&quot;tcpCh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【狂神说Java】注解和反射</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</id>
    <published>2023-12-31T20:18:03.276Z</published>
    <updated>2023-12-31T12:19:38.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【狂神说Java】注解和反射"><a href="#【狂神说Java】注解和反射" class="headerlink" title="【狂神说Java】注解和反射"></a>【狂神说Java】注解和反射</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="https://oss.zaqai.com/img/image-20220208113418244.png" alt="image-20220208113418244"></p><p><img src="https://oss.zaqai.com/img/image-20220208114008654.png" alt="image-20220208114008654"></p><p><img src="https://oss.zaqai.com/img/image-20220208130546932.png" alt="image-20220208130546932"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;zq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(age = 18)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation2(&quot;jamay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="https://oss.zaqai.com/img/image-20220208134731372.png" alt="image-20220208134731372"><img src="https://oss.zaqai.com/img/image-20220208140641045.png" alt="image-20220208140641045"></p><p><img src="https://oss.zaqai.com/img/image-20220208141021317.png" alt="image-20220208141021317"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">// 一个类只有一个Class对象, 表现为以下hashcode相同</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象.getClass()</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>().getClass();</span><br><span class="line">        <span class="comment">// 类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> user.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本内置类型.TYPE</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">user</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/image-20220208144222455.png" alt="image-20220208144222455"></p><p><img src="https://oss.zaqai.com/img/image-20220208151043760.png" alt="image-20220208151043760"> </p><p><img src="https://oss.zaqai.com/img/image-20220208153325517.png" alt="image-20220208153325517">  </p><p><img src="https://oss.zaqai.com/img/image-20220208153801345.png" alt="image-20220208153801345"></p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ul><li><p>原理:</p><ul><li>如果一个类加载器收到了类加载请求，它并不会自己先加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器；</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</li><li>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</li></ul></li><li><p>作用:</p><ul><li>避免类的重复加载(最开始时没有缓存, 逐步向上, 再向下, 某一层将类加载并缓存. 再次加载时, 已有缓存, 不再向上询问)</li><li>保护程序安全，防止核心API被随意篡改</li></ul></li></ul><p><img src="https://oss.zaqai.com/img/image-20220208155402948.png" alt="image-20220208155402948"></p><ul><li>打破双亲委派<ul><li>自定义类加载器，重写loadClass方法</li><li>使用线程上下文类加载器</li></ul></li></ul><h3 id="有了Class对象-能做什么"><a href="#有了Class对象-能做什么" class="headerlink" title="有了Class对象, 能做什么"></a>有了Class对象, 能做什么</h3><p><img src="https://oss.zaqai.com/img/image-20220208161345114.png" alt="image-20220208161345114"></p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line"><span class="type">user</span> <span class="variable">u</span> <span class="operator">=</span> (user)c1.newInstance(); <span class="comment">// 调用user的无参构造, 如果没有无参构造会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> (user)constructor.newInstance(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);<span class="comment">// 通过构造器来创建对象</span></span><br><span class="line">System.out.println(zq);</span><br></pre></td></tr></table></figure><h4 id="通过反射调用类中的方法"><a href="#通过反射调用类中的方法" class="headerlink" title="通过反射调用类中的方法"></a>通过反射调用类中的方法</h4><p><img src="https://oss.zaqai.com/img/image-20220208170004387.png" alt="image-20220208170004387"></p><p><img src="https://oss.zaqai.com/img/image-20220208170041825.png" alt="image-20220208170041825"></p><p><img src="https://oss.zaqai.com/img/image-20220208170118010.png" alt="image-20220208170118010"></p><blockquote><p>设置为true可提高效率, 当然远不及直接用正常的方法(new对象,对象调用)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Use</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> (user) constructor.newInstance(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(zq, <span class="string">&quot;jamay&quot;</span>);</span><br><span class="line">        System.out.println(zq);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        id.setAccessible(<span class="literal">true</span>);<span class="comment">// 关闭安全检测. 才可以操作私有属性</span></span><br><span class="line">        id.set(zq, <span class="number">20</span>);</span><br><span class="line">        System.out.println(zq);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EfficiencyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            zq.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;正常方式10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> zq.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(zq, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> zq.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(zq, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式关闭检测10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常方式10亿次用时9ms</span></span><br><span class="line"><span class="comment">//反射方式10亿次用时2531ms</span></span><br><span class="line"><span class="comment">//反射方式关闭检测10亿次用时1318ms</span></span><br></pre></td></tr></table></figure><h2 id="通过反射操作注解"><a href="#通过反射操作注解" class="headerlink" title="通过反射操作注解"></a>通过反射操作注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Table &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Column &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAndReflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.Student&quot;</span>);</span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">annotation</span> <span class="operator">=</span> (Table) c1.getAnnotation(Table.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Column</span> <span class="variable">a</span> <span class="operator">=</span> name.getAnnotation(Column.class);</span><br><span class="line">        System.out.println(a.name());</span><br><span class="line">        System.out.println(a.type());</span><br><span class="line">        System.out.println(a.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(&quot;db_student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Column(name = &quot;Column_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Column(name = &quot;Column_name&quot;, type = &quot;String&quot;, length = 10)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*@com.zq.Reflect.Table(value=db_student)</span></span><br><span class="line"><span class="comment">db_student</span></span><br><span class="line"><span class="comment">Column_name</span></span><br><span class="line"><span class="comment">String</span></span><br><span class="line"><span class="comment">10*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【狂神说Java】注解和反射&quot;&gt;&lt;a href=&quot;#【狂神说Java】注解和反射&quot; class=&quot;headerlink&quot; title=&quot;【狂神说Java】注解和反射&quot;&gt;&lt;/a&gt;【狂神说Java】注解和反射&lt;/h1&gt;&lt;h2 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【狂神说Java】多线程详解笔记</title>
    <link href="https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.zaqai.com/2023/12/31/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-31T20:18:03.265Z</published>
    <updated>2023-12-31T12:19:38.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【狂神说Java】多线程详解笔记"><a href="#【狂神说Java】多线程详解笔记" class="headerlink" title="【狂神说Java】多线程详解笔记"></a>【狂神说Java】多线程详解笔记</h1><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://oss.zaqai.com/img/image-20220203145906268.png" alt="image-20220203145906268"></p><h2 id="java类的方式"><a href="#java类的方式" class="headerlink" title="java类的方式"></a>java类的方式</h2><ul><li><p>外部类: 在主函数所在的类的外部定义的类, 若是在同一文件, 直接new; 若是不同文件, 导包再new</p></li><li><p>静态内部类: 在主函数所在的类的内部且在主函数外部定义的类, 直接new</p><blockquote><p>因为main是static, 所以他也要是static</p></blockquote></li><li><p>局部类: 在主函数内定义的类, 直接new</p></li><li><p>匿名内部类: <code>Interface o = new Interface()&#123;类的定义&#125;</code>, 需先定义interface</p></li><li><p>lambda:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">as</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">as.run();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;System.out.println(<span class="string">&quot;as&quot;</span>)).start();</span><br></pre></td></tr></table></figure></li></ul><h2 id="线程休眠sleep"><a href="#线程休眠sleep" class="headerlink" title="线程休眠sleep"></a>线程休眠sleep</h2><p><code>Thread.sleep(1000);</code>单位为毫秒</p><h2 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h2><ul><li><p>调用方式: 在线程内<code>Thread.yield();</code></p></li><li><p>将线程由运行态转为就绪态, 此时重新决定哪个线程获取cpu, 可能还是刚才的进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yield</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">myYield</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myYield</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(y, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(y, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;start&quot;</span>);</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul><li><p>阻塞其他线程, 强制该线程运行, 类似插队</p></li><li><p>调用: <code>thread.join();</code>注意是线程对象, 不是类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">join</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">join</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">join</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(j);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip-&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p><img src="https://oss.zaqai.com/img/image-20220203150103757.png" alt="image-20220203150103757"></p><blockquote><p>默认为5, main线程优先级为5</p></blockquote><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><img src="https://oss.zaqai.com/img/image-20220207134005679.png" alt="image-20220207134005679"></p><ul><li>用户线程执行完后,虚拟机即关闭,尽管守护线程没有执行完毕</li><li>使用: <code>thread.setDaemon(&quot;true&quot;);</code>默认为false</li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><img src="https://oss.zaqai.com/img/image-20220203152040944.png" alt="image-20220203152040944"></p><p><img src="https://oss.zaqai.com/img/image-20220203152609118.png" alt="image-20220203152609118"></p><ul><li>线程同步形成条件: &#x3D;&#x3D;队列+锁&#x3D;&#x3D;</li><li>sleep不会释放锁</li></ul><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><img src="https://oss.zaqai.com/img/image-20220203175658674.png" alt="image-20220203175658674"></p><p><img src="https://oss.zaqai.com/img/image-20220203175715082.png" alt="image-20220203175715082"></p><ul><li>同步方法默认锁的对象是this</li><li>可以用同步块完全替代同步方法</li></ul><h2 id="死锁-活锁-饥饿"><a href="#死锁-活锁-饥饿" class="headerlink" title="死锁 活锁 饥饿"></a>死锁 活锁 饥饿</h2><h3 id="死锁-两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁"><a href="#死锁-两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁" class="headerlink" title="死锁: 两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁"></a>死锁: 两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁</h3><ul><li>形象的例子: 两个小朋友分别拿着对方喜欢的玩具, 而且谁都不愿先把手中的玩具先给对方</li><li>死锁通常发生在多个线程同时但以不同的顺序请求同一组锁的时候</li><li>死锁会让你的程序挂起无法完成任务</li><li>解决方法: 只能通过中止并重启的方式来让程序重新执行</li><li>在程序中, 双方不会协商, 只会一直僵持, 程序一直阻塞</li></ul><blockquote><p><strong>死锁的四个必要条件:</strong></p><p><strong>1）互斥条件</strong>：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。<br> <strong>2）请求和保持条件</strong>：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。<br> <strong>3）不剥夺条件</strong>：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。<br> <strong>4）环路等待条件</strong>：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p></blockquote><blockquote><p><strong>预防死锁–破坏死锁的四个必要条件</strong></p><p><strong>破坏互斥条件</strong>：使资源同时访问而非互斥使用，就没有进程会阻塞在资源上，从而不发生死锁。</p><p><strong>破坏请求和保持条件</strong>：采用静态分配的方式，静态分配的方式是指进程必须在执行之前就申请需要的全部资源，且直至所要的资源全部得到满足后才开始执行，只要有一个资源得不到分配，也不给这个进程分配其他的资源。</p><p><strong>破坏不剥夺条件</strong>：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源，但是只适用于内存和处理器资源。</p><p><strong>破坏循环等待条件</strong>：给系统的所有资源编号，规定进程请求所需资源的顺序必须按照资源的编号依次进行。</p></blockquote><h3 id="活锁-活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败-线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进"><a href="#活锁-活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败-线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进" class="headerlink" title="活锁: 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败, 线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进"></a>活锁: 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败, <em>线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进</em></h3><ul><li>形象的例子: 两条车道上, 两人在同一车道相向行走, 发现对方阻碍自己的道路时, 两人都向另一条车道偏移, 结果还是会阻碍对方的道路(传说中的神默契), 这样一直僵持</li><li>活锁有可能自行解开</li><li>活锁可以认为是一种特殊的饥饿</li></ul><h3 id="饥饿-是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况"><a href="#饥饿-是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况" class="headerlink" title="饥饿: 是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况"></a>饥饿: 是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况</h3><ul><li>饥饿可以通过先来先服务资源分配策略来避免</li><li>优先级高的线程抢占资源, 导致优先级低的线程一直得不到资源</li><li>某个线程长期占用资源, 导致其他线程得不到资源</li></ul><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ReentrantLock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//放并发操作代码</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;抢到第&quot;</span> + ticketNum-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>性能比ssynchronized好</li><li>一般放在try-finally中, 不然容易出问题</li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p><img src="https://oss.zaqai.com/img/image-20220205203121807.png" alt="image-20220205203121807"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><img src="https://oss.zaqai.com/img/image-20220207113051618.png" alt="image-20220207113051618"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pool</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();   <span class="comment">//获取开始时间（毫秒）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            service.execute(mt);</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">//获取结束时间（毫秒）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行时间： &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果线程池大小小于开启的线程数, 则等待之前的线程执行完毕释放, 再执行新线程</p></blockquote><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread1</span>().start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread2</span>()).start();</span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">MyThread3</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> ft.get();</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1继承Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2实现Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3实现callable&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">520</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="一些扩展"><a href="#一些扩展" class="headerlink" title="一些扩展"></a>一些扩展</h2><ul><li>java中的锁Lock就是基于AbstractQueuedSynchronizer来实现的</li><li>在大多数情况下，我们写并发代码使用synchronized就足够了，而且使用synchronized也是首选</li><li>但是lock更加灵活</li><li><img src="https://oss.zaqai.com/img/image-20220207104526155.png" alt="image-20220207104526155"></li><li>lockInterruptibly方法可以响应中断，lock方法会阻塞线程直到获取到锁，而tryLock方法则会立刻返回，返回true代表获取锁成功，而返回false则说明获取不到锁</li><li>newCondition方法返回一个条件变量，一个条件变量也可以做线程间通信来同步线程。多个线程可以等待在同一个条件变量上，一些线程会在某些情况下通知等待在条件变量上的线程，而有些变量在某些情况下会加入到条件变量上的等待队列中去。</li><li>独占锁就是只能有一个线程获取到锁，其他线程必须在这个锁释放了锁之后才能竞争而获得锁</li><li>共享锁则可以允许多个线程获取到锁</li></ul><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><ul><li>是lock的子类</li><li>可重入性: 同一个线程可以多次获得锁，而不同线程依然不可多次获得锁</li><li>划分:<ul><li>公平锁: 保证等待时间最长的线程将优先获得锁</li><li>非公平锁: 并不会保证多个线程获得锁的顺序，并发性能表现更好，ReentrantLock默认使用非公平锁</li></ul></li></ul><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><ul><li>ArrayList的线程安全版本</li><li>CopyOnWriteArrayList是在有写操作的时候会copy一份数据，然后写完再设置成新的数据。CopyOnWriteArrayList适用于读多写少的并发场景</li><li>CopyOnWriteArraySet是线程安全版本的Set实现，它的内部通过一个CopyOnWriteArrayList来代理读写等操作，使得CopyOnWriteArraySet表现出了和CopyOnWriteArrayList一致的并发行为</li><li>使用了ReentrantLock来支持并发操作</li></ul><hr><h2 id="多线程中的三大特性"><a href="#多线程中的三大特性" class="headerlink" title="多线程中的三大特性"></a>多线程中的三大特性</h2><ul><li>原子性: 一个或多个操作，要么全部执行完成，要么就都不执行</li><li>可见性: 当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程就能够立即看到修改的值</li><li>有序性: 编译器可以对指令进行重排, 对单线程无影响, 但可能会影响多线程</li></ul><h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h2><ul><li>必须在synchronized 中执行</li><li>wait 必须暂停当前正在执行的线程，并释放资源锁，让其他线程可以有机会运行</li><li>notify&#x2F;notifyall：唤醒锁池中的线程，使之运行</li><li>调用wait方法后, 线程会放弃对象锁, 进入等待此对象的等待锁定池, 只有再次调用此对象的notify方法, 本线程才会进入对象锁池准备, 才有可能获取对象锁进入运行状态</li></ul><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><blockquote><p>在 java 中为了加快程序的运行效率，对一些变量的操作通常是在该线程的寄存器或是 CPU 缓存上进行的，之后才会同步到主存中，而加了 volatile 修饰符的变量则是直接读写主存</p></blockquote><p>volatile 虽然具有可见性但是并不能保证原子性, 所以不能替代Synchronize</p><p>Volatile在某些情况下性能优于Synchronize</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.jianshu.com/p/cd7a73e6bd78">Java CopyOnWriteArrayList详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/f47250702ee7">Java可重入锁详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/f47250702ee7">Java可重入锁详解 - 简书 (jianshu.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【狂神说Java】多线程详解笔记&quot;&gt;&lt;a href=&quot;#【狂神说Java】多线程详解笔记&quot; class=&quot;headerlink&quot; title=&quot;【狂神说Java】多线程详解笔记&quot;&gt;&lt;/a&gt;【狂神说Java】多线程详解笔记&lt;/h1&gt;&lt;h2 id=&quot;线程状态&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zhou29笔记_nginx</title>
    <link href="https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_nginx/"/>
    <id>https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_nginx/</id>
    <published>2023-12-31T20:18:03.257Z</published>
    <updated>2023-12-31T12:19:52.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>正向代理：客户端向目标服务器发送请求，该请求被代理服务器拦截，由代理服务器向目标服务器发送请求，并将请求结果返回给客户端。客户端需配置代理服务器，代理的是客户端的请求。</p><p>eg：翻墙</p></blockquote><p>   反向代理：客户端向代理服务器发送请求，代理服务器根据策略将请求发给后台服务器，并将后台服务器返回结果发给客户端。反向代理服务器对客户端来说是透明的，客户端不需配置代理服务器，代理的是后台服务器</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><p>轮询（默认） </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">     server 192.168.0.14; </span><br><span class="line">     server 192.168.0.15;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p></li><li><p>weight </p><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">     server 192.168.0.14 weight=1;  </span><br><span class="line">     server 192.168.0.15 weight=10;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>ip_hash </p><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以不用考虑分布式session的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">    ip_hash;  </span><br><span class="line">    server 192.168.0.14:88;  </span><br><span class="line">    server 192.168.0.15:80;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>fair（第三方） </p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">    server 192.168.0.14:88;  </span><br><span class="line">    server 192.168.0.15:80;  </span><br><span class="line">    fair;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>   动态资源（jsp、servlet）和静态资源（html、image）放在不同服务器</p><h2 id="高可用并发集群"><a href="#高可用并发集群" class="headerlink" title="高可用并发集群"></a>高可用并发集群</h2><p>   设置主从服务器，利用keepalived，主服务器down掉，启用从服务器</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>nginx安装目录：&#x2F;usr&#x2F;local&#x2F;nginx</p><p>配置文件：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><p>启动文件：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p></li><li><p>启动 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p></li><li><p>停止 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</p></li><li><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h1&gt;&lt;h2 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zhou29笔记_java_IO流</title>
    <link href="https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_java_IO%E6%B5%81/"/>
    <id>https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_java_IO%E6%B5%81/</id>
    <published>2023-12-31T20:18:03.251Z</published>
    <updated>2023-12-31T12:19:52.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><blockquote><p><strong>字节流可以操作一切文件，读入字符文件注意编码；字符流专门操作字符文件，不用担心乱码</strong></p></blockquote><p>输入输出流是相对于程序来讲的，InputStream是父类，FileInputStream（文件字节输入流）和BufferedInputStream是子类；OutputStream同理</p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;C:\\Users\\86175\\Desktop\\Snipaste_2021-08-12_23-49-04.png&quot;);</span><br><span class="line">FileInputStream fis=new FileInputStream(file);</span><br><span class="line">FileOutputStream fos=new FileOutputStream(&quot;1.png&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>fis.read();返回fis的一个字节int<br>fis.read(bytes[] b);将fis中的从0到b.length的字节读到b中<br>fis.read(bytes[] b,0,len);指定读的长度<br><strong>由于一个字节一个字节地读，效率很慢</strong></p></blockquote><blockquote><p>fos.write(int b);将一个字节写入fos中<br>fos.write(bytesp[] b);<br>fos.write(bytes[] b, int off,int len);</p></blockquote><blockquote><p>long start&#x3D;System.currentTimeMillis();<br>long end&#x3D;System.currentTimeMillis();<br>计算代码段运行时间</p></blockquote><h2 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//代码实现了使用buffer复制文件</span><br><span class="line">File file = new File(&quot;C:\\Users\\86175\\Desktop\\Snipaste_2021-08-12_23-49-04.png&quot;);</span><br><span class="line">FileInputStream fis=new FileInputStream(file);</span><br><span class="line">FileOutputStream fos=new FileOutputStream(&quot;1.png&quot;);</span><br><span class="line">byte[] b=new byte[1024];//创建的缓冲大小，更改这个值可以改变速度，但并非越大越快（一般建议小于文件大小）</span><br><span class="line">BufferedInputStream bis=new BufferedInputStream(fis);</span><br><span class="line">BufferedOutputStream bos=new BufferedOutputStream(fos);</span><br><span class="line">while( (len=bis.read(b))!=-1)&#123;</span><br><span class="line">    bos.write(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>FileReader、BufferedRead均继承自Reader<br>Writer同理</p><p><strong>BufferedReader比FileReader快</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;baidu.txt&quot;);</span><br><span class="line">FileReader fr = new FileReader(file);</span><br><span class="line">FileWriter fw = new FileWriter(newFile(&quot;b.txt&quot;));</span><br><span class="line">BufferedReader br = new BufferedReader(fr);</span><br><span class="line">BufferedWriter bw = new BufferedWriter(fw);</span><br><span class="line">char[] b = new char[1024];</span><br><span class="line">int len = 0;</span><br><span class="line">//下面的fr fw和br bw可以替换</span><br><span class="line">while ((len = fr.read(b)) != -1) &#123;</span><br><span class="line">    fw.write(b, 0, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字节流&quot;&gt;&lt;a href=&quot;#字节流&quot; class=&quot;headerlink&quot; title=&quot;字节流&quot;&gt;&lt;/a&gt;字节流&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;字节流可以操作一切文件，读入字符文件注意编码；字符流专门操作字符文件，不用担心乱码&lt;/st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zhou29笔记_java</title>
    <link href="https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_java/"/>
    <id>https://blog.zaqai.com/2023/12/31/zhou29%E7%AC%94%E8%AE%B0_java/</id>
    <published>2023-12-31T20:18:03.250Z</published>
    <updated>2023-12-31T12:19:51.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ol><li>局部变量：在类的方法内部</li><li>实例变量：定义在类中，不用初始化，使用的时候先实例化类，再用<code>对象. 成员名</code>的方式访问</li><li>类变量：在类中，用static修饰，可以直接在本类中使用，也可以用<code>类名.成员名</code>的方式在其他类访问</li></ol><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ol><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线： MAX_VALUE</li><li>类名：首字母大写和驼峰原则</li><li>方法名：首字母小写和驼峰原则</li></ol><hr><blockquote><p>两个数据类型相操作，如果两类型最大是int（可以没有int），结果是int</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> a=<span class="number">2</span>;  <span class="type">byte</span> b=<span class="number">1</span>; <span class="comment">//则a+b是int</span></span><br></pre></td></tr></table></figure><p>如果两类型有long或double，则为long或double。</p><p>即使用一个更大的类型去接收，也不行</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">2000000000</span>;<span class="comment">//20亿</span></span><br><span class="line"><span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> c=a*b; <span class="comment">//c依然不是200亿（溢出后的结果）</span></span><br></pre></td></tr></table></figure><p>使用 <code>double c=(double)a*b</code> 可以解决</p></blockquote><hr><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>;<span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//12</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>字符串和int连接时，如果字符串在左，则int作为字符串连接</p><pre><code>                                如果字符串在右，则int先作为int运算</code></pre></blockquote><hr><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p><strong>包的本质就是文件夹，命名一般为公司网站域名倒置，如com.tencent.mobileqq</strong></p><blockquote><p>因为域名是从小到大，而文件夹要从大到小，所以倒置</p></blockquote><hr><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ol><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>[] arr =<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>arr本身作为一个引用类型的变量（类似于指针），存放在栈中，arr初始化后便指向堆中的对象区域</p></li></ol><h2 id="静态方法（static）"><a href="#静态方法（static）" class="headerlink" title="静态方法（static）"></a>静态方法（static）</h2><p>静态方法是和类一起加载的，而非静态方法是类实例化后才加载的。因此，在静态方法中调用非静态发方法会报错，但静态调用静态，非静态调用非静态都没有问题</p><h2 id="类的构造器"><a href="#类的构造器" class="headerlink" title="类的构造器"></a>类的构造器</h2><p>类会有一个隐式的无参构造方法，什么都不做，当用new实例化对象时，调用该构造方法。但当写了有参构造方法时，必须显式地定义无参构造，才能调用无参构造方法</p><h2 id="super-this"><a href="#super-this" class="headerlink" title="super&amp;this"></a>super&amp;this</h2><blockquote><p>super注意点：</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法！</li></ol><p>Vs this:</p><p>代表的对象不同：<br>this:本身调用者这个对象<br>super:代表父类对象的引用</p><p>前提<br>this:没有继承也可以使用<br>super:只能在继承条件才可以使用</p><p>构造方法<br>this（）;本类的构造<br>super（）:父类的构造</p></blockquote><h2 id="类的静态代码块"><a href="#类的静态代码块" class="headerlink" title="类的静态代码块"></a>类的静态代码块</h2><p>在类中，static{}中的称为静态代码块，在类被加载的时候执行，且只执行一次。</p><p>匿名代码块：{}中的称为匿名代码块，类被实例化的时候执行，且先于构造函数。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>不能new这个抽象类，只能靠子类去实现它；</li><li>抽象类中可以写普通的方法</li><li>抽象方法必须在抽象类中</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口中的方法默认都是<code>publish abstract</code>,  所以声明方法只需<code>返回值类型 方法名(参数);</code>, 如<code>void test(String name);</code></p><p>接口中的属性都是<code>pulish static final</code>, <strong>但一般不在接口中定义属性</strong></p><p>类通过implements关键字实现接口</p><h2 id="内部类（不常见）"><a href="#内部类（不常见）" class="headerlink" title="内部类（不常见）"></a>内部类（不常见）</h2><p>在一个public class 内部又定义一个public class，内部类可以访问外部类的私有属性。此时内部类可以看作外部类的成员变量，实例化时用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.Inner inner=outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br></pre></td></tr></table></figure><blockquote><p>比较奇葩</p></blockquote><p>还有局部内部类，就是在外部类的方法中定义的类。还有静态内部类，此时内部类只能访问外部类的静态属性，因为静态内部类加载时，外部类的非静态属性还未加载</p><p><strong>一个.java文件只能有一个public class ，但是可以有多个class。</strong></p><p><em>在public class下面还可以定义接口，在public class中通过new来实例化，并实现接口中的方法  <strong>特别奇葩</strong></em></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try后可以有多个catch，catch的参数为异常类型，异常类型必须从小到大。</p><p> <img src="https://oss.zaqai.com/img/3a3f7747269ad6fe.png" alt="异常类型"> </p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><ul><li>首先会初始化main方法所在类</li><li>new 子类，会首先加载父类</li><li>通过子类类名调用父类静态属性，子类直接不会被加载，但父类会</li></ul><h2 id="类的主动引用-一定会发生类的初始化"><a href="#类的主动引用-一定会发生类的初始化" class="headerlink" title="类的主动引用(一定会发生类的初始化)"></a>类的主动引用(一定会发生类的初始化)</h2><ul><li>当虚拟机启动,首先会初始化main方法所在类</li><li>new一个类的对象</li><li>调用类的静态成员(除了final常量)和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类.如果父类未被初始化,会首先初始化父类</li></ul><h2 id="类的被动调用"><a href="#类的被动调用" class="headerlink" title="类的被动调用"></a>类的被动调用</h2><ul><li>当访问一个静态域时,只有真正声明这个域的类才会被初始化。如: 当通过子类引用父类的静态变量,不会导致子类初始化</li><li>通过数组定义类引用,不会触发此类的初始化</li><li>引用常量不会触发此类的初始化 (常量在链接阶段就存入调用类的常量池中了)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;局部变量：在类的方法内部&lt;/li&gt;
&lt;li&gt;实例变量：定义在类中，不用初始化，使用的时候先实例化类，再用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zerotier moon中转节点+nat访问局域网</title>
    <link href="https://blog.zaqai.com/2023/12/31/zerotier%20moon%E4%B8%AD%E8%BD%AC%E8%8A%82%E7%82%B9+nat%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    <id>https://blog.zaqai.com/2023/12/31/zerotier%20moon%E4%B8%AD%E8%BD%AC%E8%8A%82%E7%82%B9+nat%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91/</id>
    <published>2023-12-31T20:18:03.248Z</published>
    <updated>2023-12-31T12:19:51.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zerotier-moon中转节点-nat访问局域网"><a href="#zerotier-moon中转节点-nat访问局域网" class="headerlink" title="zerotier moon中转节点+nat访问局域网"></a>zerotier moon中转节点+nat访问局域网</h1><h2 id="入轨"><a href="#入轨" class="headerlink" title="入轨"></a>入轨</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli join ...</span><br><span class="line">zerotier-cli orbit 5759192bd3 5759192bd3</span><br></pre></td></tr></table></figure><h2 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zerotier-moon中转节点-nat访问局域网&quot;&gt;&lt;a href=&quot;#zerotier-moon中转节点-nat访问局域网&quot; class=&quot;headerlink&quot; title=&quot;zerotier moon中转节点+nat访问局域网&quot;&gt;&lt;/a&gt;zerotier</summary>
      
    
    
    
    
  </entry>
  
</feed>
