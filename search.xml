<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github 私有仓库clone push pull</title>
      <link href="/2024/06/10/github%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93clone%20push%20pull/"/>
      <url>/2024/06/10/github%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93clone%20push%20pull/</url>
      
        <content type="html"><![CDATA[<h1>github 私有仓库clone push pull</h1><blockquote><p>有些情况下, 我们的代码还不能公开到github, 但是使用github管理代码版本真的很方便, 所以便有了这个需求</p></blockquote><h2 id="ssh-推荐">ssh(推荐)</h2><p>适用于你自己的服务器, 你可以将服务器的公钥放在github, 然后clone时使用<code>git@</code>的形式, 注意不是<code>https</code>, 之后的push pull都正常了.<br>但是, 由于网络原因, 大家都懂, 很恶心.<br>可以配置个代理<br><code>vim ~/.ssh/config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand nc -v -x ip:port %h %p</span><br></pre></td></tr></table></figure><p>就可以畅通无阻了.</p><h2 id="token">token</h2><p>适用于服务器不是你的而你还需要用这台服务器, 使用token保密性高一点. 毕竟将服务器的公钥放在github就是完全信任这个服务器了.<br>在你自己的github seetings里, 有一个token, <a href="https://github.com/settings/tokens?type=beta">https://github.com/settings/tokens?type=beta</a><br>这两个token我忘记用的是哪个了, 好像是都可以<br>设置token的访问权限, 对你的私有仓库可读写<br>之后clone时使用<code>https://user:token@github.com/username/repo.git</code>就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 CLIP-EBC_CLIP Can Count Accurately through Enhanced Blockwise Classification</title>
      <link href="/2024/06/10/CLIP-EBC_CLIP%20Can%20Count%20Accurately%20through%20Enhanced%20Blockwise%20Classification/"/>
      <url>/2024/06/10/CLIP-EBC_CLIP%20Can%20Count%20Accurately%20through%20Enhanced%20Blockwise%20Classification/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/Yiming-M/CLIP-EBC">https://github.com/Yiming-M/CLIP-EBC</a><br>2024.3 arxiv<br>55.0 and 6.3 on ShanghaiTech part A and part B<br>基于分类的计数方法，提出了Enhanced Blockwise Classification框架，现有的基于回归的方法可以无缝地集成到EBC框架中<br>EBC在discretization, label correction, and loss function三个方面提高基于分类的计数方法的性能<br>基于EBC，提出CLIP-EBC，完全使用CLIP来生成人群密度图</p></blockquote><blockquote><p>基于回归的计数方法通常是编码器解码器架构，回归密度图<br>基于分类的计数方法，将[0,♾️]的整数分为不重叠的间隔，目标就是将预测的数值分类到正确的间隔。可以增加大数值的样本数量，解决计数值的长尾分布问题</p></blockquote><h2 id="方法">方法</h2><h3 id="Enhanced-Blockwise-Classification-EBC">Enhanced Blockwise Classification(EBC)</h3><p>基于回归生成密度图的方法面临大计数值的样本不足的问题<br>EBC将计数值分组到bin中，以增加每个bin的样本量，从而缓解了样本不平衡的问题。<br><img src="https://oss.zaqai.com/img/202404161627519.png" alt="image.png"><br><img src="https://math.now.sh?inline=%5C%7B%5Cmathcal%7BB%7D_i%5Cmid%20i%3D1%2C%5Ccdots%2Cn%5C%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>  是n个提前定义好的箱子，实际上表示一个整数的范围，如10-20<br><img src="https://math.now.sh?inline=%5Cboldsymbol%7BP%7D%5E*%3An%5Ctimes%7Bh%7D%5Ctimes%7Bw%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>  h=H//r, w=H//r, r是模型相关的放缩因子<br><img src="https://math.now.sh?inline=%5Cboldsymbol%7BP%7D_%7B%3A%2Ci%2Cj%7D%5E*" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>  表示该位置的可能性分数，共有n个值，对应n个箱子<br><img src="https://math.now.sh?inline=%5Cboldsymbol%7BY%7D_%7Bi%2Cj%7D%5E*%3D%5Csum_%7Bk%3D1%7D%5Ena_k%5Ccdot%5Cboldsymbol%7BP%7D_%7Bk%2Ci%2Cj%7D%5E*" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>  Y是预测的密度图，a是箱子的代表值(如范围的中间值)<br>现有的基于回归的方法可以很容易地通过只改变输出维度来定制以适应EBC。<br><img src="https://oss.zaqai.com/img/202404161655302.png" alt="image.png"></p><h4 id="离散化">离散化</h4><p>高斯平滑获取GT密度图的方法，由于人头尺度不同，使用固定的核大小，可能会引入噪声<br><img src="https://oss.zaqai.com/img/202404161706990.png" alt="image.png"><br>作者提出绕过高斯平滑，如果一个人头特定的区域内，只用那个块来预测这个人头的存在，同时排除其他块来做出这样的预测。</p><p>因为计数值可能不符合均匀分布，使用中间值作为bin的代表值不是最优的<br>提出使用每个箱子中的平均计数值作为代表点<br><img src="https://math.now.sh?inline=a_i%3D%5Cfrac1%7B%7C%5Cmathcal%7BB%7D_i%7C%7D%5Csum_%7Bk%3D1%7D%5EM1%28c_k%5Cin%5Cmathcal%7BB%7D_i%29%5Ccdot%20c_k%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h4 id="标签校正">标签校正</h4><p>对于特别密集的人群，实际上可能包含很多人头，但受限于分辨率，只能观察到较小的人头数<br>作者将固定大小图像块中可观察到的人的最大数量限制在一个小的范围内，完全由补丁大小决定。<br>最大数量<img src="https://math.now.sh?inline=m%3D%28r%2F%2Fs%29%5E2" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>，s是一个人头可被识别的最小尺寸，r是块大小<br><img src="https://oss.zaqai.com/img/202404162235888.png" alt="image.png"></p><h4 id="损失函数">损失函数</h4><p>之前的基于分类的方法的损失函数只关注分类误差，忽视了预测值和GT的差异，尽管两个概率分布分类错误率相同，但他们可能具有不同的期望值，即它们在样本空间上的平均值可能不同<br>距离感知交叉熵损失（DACE）<br><img src="https://math.now.sh?inline=%5Cbegin%7Baligned%7D%5Cmathcal%7BL%7D_%7B%5Cmathrm%7BDACE%7D%7D%3D%26%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bclass%7D%7D%28%5Cboldsymbol%7BP%7D%5E*%2C%5Cboldsymbol%7BP%7D%29%2B%5Clambda%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bcount%7D%7D(%5Cboldsymbol%7BY%7D%5E*%2C%5Cboldsymbol%7BY%7D)%5C%5C%26%3D-%5Csum_%7Bi%3D1%7D%5E%7BH%2F%2Fr%7D%5Csum_%7Bj%3D1%7D%5E%7BW%2F%2Fr%7D%5Csum_%7Bk%3D1%7D%5En%5Cmathbb%7B1%7D(%5Cboldsymbol%7BP%7D_%7Bk%2Ci%2Cj%7D%3D1)%5Clog%5Cboldsymbol%7BP%7D_%7Bk%2Ci%2Cj%7D%5E*%5C%5C%26%2B%5Clambda%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bcount%7D%7D(%5Cboldsymbol%7BY%7D%5E*%2C%5Cboldsymbol%7BY%7D)%2C%5Cend%7Baligned%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>P是one-hot GT概率图，<img src="https://math.now.sh?inline=P%5E*" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>是预测出的概率图，维度[n,h,w],n是箱子的数量<br>Y是密度图</p><h3 id="CLIP-EBC">CLIP-EBC</h3><p><img src="https://oss.zaqai.com/img/202404161627519.png" alt="image.png"><br>CLIP-EBC对CLIP的图像编码器最后的层做了修改，去除池化层，用1×1卷积替换线性投影层。这种修改允许保存本地信息，这在人群计数中起着至关重要的作用。输出[d,h,w]的特征图，h=H//r, r是patch尺寸<br>文本提示</p><blockquote><p>There is/are bi person/people<br>There is/are between min(Bi) and max(Bi) person/people<br>There are more than m people</p></blockquote><h2 id="性能">性能</h2><p><img src="https://oss.zaqai.com/img/202404162329604.png" alt="image.png"><br>EBC确实有效，CLIP-EBC (ResNet50, ours)  ResNet50用在了哪里？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Diffuse-Denoise-Count：Accurate Crowd-Counting with Diffusion Models</title>
      <link href="/2024/06/10/Diffuse-Denoise-Count%EF%BC%9AAccurate%20Crowd-Counting%20with%20Diffusion%20Models/"/>
      <url>/2024/06/10/Diffuse-Denoise-Count%EF%BC%9AAccurate%20Crowd-Counting%20with%20Diffusion%20Models/</url>
      
        <content type="html"><![CDATA[<blockquote><p>又名CrowdDiff: Multi-hypothesis Crowd Density Estimation using Diffusion Models<br>CVPR’24<br>第一个使用diffusion做人群计数和生成密度图</p><p>使用高斯核生成密度图，存在背景噪声积累和密度损失的问题。<br>小核可以避免临近密度的干扰。这有助于保持密度像素值的边界和分布，但回归网络使用小核来生成GT是无效的。ineffective</p></blockquote><p>本文提出使用条件扩散模型来预测密度图，因为扩散模型在生成过程中对训练数据具有高保真度。<br>提出了CrowdDiff，使用反向扩散过程生成人群密度图。<br>此外，由于扩散过程的中间时间步长是有噪声的，我们在训练过程中加入一个回归分支来进行直接人群估计，以改进特征学习。<br>由于扩散模型的随机性，引入了生成多重密度图并融合来提高计数性能。<br>为了避免密度损失，通过阈值像素密度值来计算预测密度图中观察到的数量，消除了背景噪声的影响，因为不需要密度像素值相加。</p><h2 id="CrowdDiff">CrowdDiff</h2><p>预测条件人群图像的每个时间步长中xt的噪声量，并应用反向扩散过程最终得到x0<br><img src="https://oss.zaqai.com/img/202404241539502.png" alt="image.png"></p><h3 id="3-1-小核">3.1 小核</h3><p>扩散过程需要一个密度图来学习人群密度的条件分布。<br>高斯核的分布与所得到的密度图之间的散度随核的大小和方差的增加而增加，特别是对于拥挤的场景。<br><img src="https://oss.zaqai.com/img/202404241547912.png" alt="image.png"></p><p>小核提供了另一种人群计数路径，而不对密度图求和。<br>人群计数可以通过简单地计算可观察到的核来获得。<br><img src="https://oss.zaqai.com/img/202404241931746.png" alt="image.png"></p><p>我们对密度图进行阈值化，并得到每个核的位置<br>然后，将人群计数计算为位置的总数。这提供了一种避免生成的密度图中的背景噪声的方法，并通过检测人群密度图中的这些窄核来获得人群计数。</p><h3 id="3-2-计数的联合学习">3.2. 计数的联合学习</h3><p>一个特定时间步长t的去噪网络的中间特征集为<br><img src="https://math.now.sh?inline=%5Cmathcal%7BZ%7D_t%3D%5C%7B%5Cmathbf%7Bz%7D_t%5E1%2C%5Cmathbf%7Bz%7D_t%5E2%2C%5Cldots%2C%5Cmathbf%7Bz%7D_t%5Ed%5C%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>其中，<img src="https://math.now.sh?inline=z%5E%E2%88%97_t" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>是解码器对应特征级别上的表示向量<br>对每个<img src="https://math.now.sh?inline=z%5E%E2%88%97_t" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>执行全局平均池化，然后将其连接起来，构造一个单一的特征向量<img src="https://math.now.sh?inline=z_t" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>。然后通过回归网络来估计不同噪声水平下的计数。<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Bcount%7D%3D%5Cmathbb%7BE%7D_%7B%5Cmathbf%7Bx_0%7D%2C%5Cmathbf%7By%7D%2Ct%7D%5Cleft%5B%5Clambda_t%5C%7C%5Cbar%7Bc_t%7D-c%5C%7C_1%5Cright%5D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Boverall%7D%3D%5Cmathcal%7BL%7D_%7Bhybrid%7D%2B%5Clambda_%7Bcount%7D%5Cmathcal%7BL%7D_%7Bcount%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h3 id="3-3-随机密度图的融合">3.3. 随机密度图的融合</h3><p>由于diffusion的随机性，同一张图片可能生成不同的密度图，将不同的密度图融合可以提高性能，因为可以互补，可能某个密度图包含其他密度图不包含的密度<br>我们首先通过密度阈值法计算密度核的位置，找到了这些位置，就会为每个密度图构建一个点图，称为“人群图”。<br>使用结构相似度指数度量（SSIM）衡量来自不同实现的人群图之间的不同，</p><p>比如四张实现，对于一张人群图，与其他三个计算SSIM，这三个SSIM的和作为这张人群图的相似度分数<br>相似度分数最小的人群图可能包含原人群图不包含的信息</p><p><img src="https://oss.zaqai.com/img/202404241847522.png" alt="image.png"></p><h2 id="性能">性能</h2><p>小核的使用通过减少密度值的损失，改善了密集区域的计数结果。其次，我们通过用阈值法代替密度求和，消除了背景噪声对人群计数的影响。<br><img src="https://oss.zaqai.com/img/202404241854925.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Focus for Free in Density-Based Counting</title>
      <link href="/2024/06/10/Focus%20for%20Free%20in%20Density-Based%20Counting/"/>
      <url>/2024/06/10/Focus%20for%20Free%20in%20Density-Based%20Counting/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zenglin Shi1 · Pascal Mettes2 · Cees G. M. Snoek2<br>IJCV  Received: 8 June 2023 / Accepted: 1 January 2024</p></blockquote><blockquote><p>大部分方法只使用点标注生成GT密度图，文章提出点标注还有其他用途来帮助计数，并且可以和任意网络结构和损失函数兼容。<br>- 模拟遮挡，相当于数据增强<br>- 前景蒸馏，从点标注生成前景掩模，网络可以不受背景干扰，只提取前景知识<br>- focus-for-free，会议版本的文章，将监督聚焦于分割和全局密度分类</p></blockquote><p>通常的做法：通过点标注获得GT密度图，训练网络将输入图片映射到密度图，推理时将网络输出的密度图求和得到数量。基于此，提出三种方法利用点标注提高计数准确率。</p><h2 id="模拟遮挡">模拟遮挡</h2><blockquote><p>现有的计数方法对于遮挡和密集场景效果不好，也缺少足够的密集场景的数据来训练</p></blockquote><p>图片中的物体<img src="https://math.now.sh?inline=%5Cmathcal%7BO%7D_%7Bi%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>=<img src="https://math.now.sh?inline=%28x_i%2Cy_i%2C2%5Csigma_i%29" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>使用<img src="https://math.now.sh?inline=%5Cmathcal%7BO%7D_%7Bcopy%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>来遮挡<img src="https://math.now.sh?inline=%5Cmathcal%7BO%7D_%7Bocc%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://math.now.sh?inline=%5Cbegin%7Baligned%7Dx_%7Bpaste%7D%26%3D%5Clfloor%20r%5Ccdot%20cos%28%5Ctheta%29%5Crfloor%2Bx_%7Bocc%7D%2C%5C%5Cy_%7Bpaste%7D%26%3D%5Clfloor%20r%5Ccdot%20sin(%5Ctheta)%5Crfloor%2By_%7Bocc%7D%5Cend%7Baligned%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://math.now.sh?inline=r%3Dr_%7Bcopy%7D%2Br_%7Bocc%7D%5Cepsilon_%7Br%7D%5Cmathrm%7B~and~%7D%5Ctheta%5Cmathrm%7B%3D%7D2%5Cpi%5Cepsilon_%7B%5Ctheta%7D.%5Cepsilon_%7Br%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://oss.zaqai.com/img/202403201841083.png" alt="image.png"></p><h3 id="融合边缘">融合边缘</h3><blockquote><p>将一个物体粘贴到其他地方，物体边缘变化大，不利于训练</p></blockquote><h3 id="确定遮挡强度">确定遮挡强度</h3><blockquote><p>根据原图片遮挡等级确定模拟遮挡的强度</p></blockquote><p>定义了一种方法计算遮挡等级</p><h3 id="效果">效果</h3><p>Cutout和CutMix是遮挡增强的方法，他们不能产生新的遮挡样本<br>Cutout随机剔除一块区域，CutMix将一块区域替换为其他图片的一块区域<br><img src="https://oss.zaqai.com/img/202403201809013.png" alt="image.png"></p><h2 id="前景蒸馏">前景蒸馏</h2><blockquote><p>不受背景的影响，生成更好的密度图</p></blockquote><p>将传统的<img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Bd%7D%3D%5Cell_%7Bp%7D%28f_%7Bd%7D(I%29-D)" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>变为前景和背景两部分<img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Bd%7D%3D%5Cell_%7Bp%7D%28f_%7Bd%7D(I%29_%7Bbg%7D)%2B%5Cell_%7Bp%7D(f_%7Bd%7D(I)_%7Bfg%7D-D_%7Bfg%7D)" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><strong>两个问题</strong></p><h3 id="辅助网络">辅助网络</h3><p>训练辅助网络，网络输入的图片背景是黑色的（通过点标注区分前景背景），来专门学习前景的本质特征。<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Ba%7D%3D%5Cell_%7Bp%7D%5Cbig%28f_%7Ba%7D(I%5Codot%20S%29-D%5Cbig)" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>S表示前景掩码</p><p><img src="https://math.now.sh?inline=S%28p%29%3D%5Cbegin%7Bcases%7D1%26%5Ctext%7Bif%7D%5Cexists_%7BP%5Cin%5Cmathcal%7BP%7D%7D%5Cbig(%7C%7Cp-P%7C%7C%5E2%5Cleq%5Csigma_P%5E2%5Cbig)%2C%5C%5C0%26%5Ctext%7Botherwise%7D.%5Cend%7Bcases%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>如果像素点p的<img src="https://math.now.sh?inline=%5Csigma_P" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>半径范围内有点P，这个像素点的值为1</p><h3 id="蒸馏损失">蒸馏损失</h3><p>辅助网络可以提前预训练，训练好之后拿来用<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7Bd%7D%3D%5Cell_%7Bp%7D%28D%5E%7B%5Cprime%7D-f_%7Ba%7D(I%5Codot%20S%29)" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://math.now.sh?inline=D%5E%7B%5Cprime%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>表示预测的密度图</p><h2 id="局部和全局关注">局部和全局关注</h2><h3 id="局部分割关注">局部分割关注</h3><blockquote><p>靠近点标注的像素应该被关注，远离的像素应该被忽视，因为不相关的像素会误导损失函数</p></blockquote><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_s%3D%5Csum%5Climits_%7Bl%5Cin%5C%7B0%2C1%5C%7D%7D-%5Calpha%5ElS%5El%281-S%5E%7B%5Cprime%7D%29%5E%7B%5Cgamma_s%7Dlog(S%5E%7B%5Cprime%7D)%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_d%3D%5Cell_p%5Cbig%28f_d(I%29%5Codot%20f_s(I)-D%5Cbig)%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h3 id="全局密度关注">全局密度关注</h3><p><img src="https://math.now.sh?inline=G_%7Bj%2Ci%7D%3D%5Cfrac%7B%7C%5Cmathcal%7BP%7D_%7Bj%2Ci%7D%7C%7D%7BL%7D%2CL%3D%5Cleft%5Clfloor%5Cmax_%7Bi%3D1%2C..%2CN%7D%5Cleft%28%5Cfrac%7B%7C%5Cmathcal%7BP%7D_i%7C%7D%7BZ_i%7D%5Ccdot%20Z_%7Bj%2Ci%7D%5Cright%29%2FM%5Cright%5Crfloor%2B1." style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_c%3D%5Csum_%7Bl%5Cin%5C%7B0%2C1%2C..%2CM%5C%7D%7D-G%5El%281-G%5E%7B%5Cprime%7D%29%5E%7B%5Cgamma_c%7Dlog(G%5E%7B%5Cprime%7D)%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h2 id="流程">流程</h2><p>第一阶段使用<img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_a" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>训练辅助网络来执行前景蒸馏<br>第二阶段使用<img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D%3D%5Cmathcal%7BL%7D_%7Bd%7D%2B%5Clambda_%7Bs%7D%5Cmathcal%7BL%7D_%7Bs%7D%2B%5Clambda_%7Bc%7D%5Cmathcal%7BL%7D_%7Bc%7D%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>对关注点进行训练，将关注点融合到计数网络中<br>模拟遮挡增强在两个阶段都用到了</p><p><img src="https://oss.zaqai.com/img/202403201808940.png" alt="image.png"></p><p><img src="https://oss.zaqai.com/img/202403201956993.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Point, Segment and Count_ A Generalized Framework for Object Counting</title>
      <link href="/2024/06/10/Point,%20Segment%20and%20Count_%20A%20Generalized%20Framework%20for%20Object%20Counting/"/>
      <url>/2024/06/10/Point,%20Segment%20and%20Count_%20A%20Generalized%20Framework%20for%20Object%20Counting/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CVPR 2024<br><a href="https://github.com/Hzzone/PseCo">https://github.com/Hzzone/PseCo</a></p></blockquote><p>提出了基于检测的零样本和小样本类别无关的通用计数框架（检测=计数+定位）<br>使用了SAM将所有可能的物体分割成掩码proposal，使用CLIP对proposal分类来计数<br>直接使用SAM面临效率低和小的稠密物体无法识别的问题<br>首先提出了一个类别无关的物体定位器，为SAM提供准确而且最少的点提示，降低计算成本，而且避免了小对象的丢失。<br>此外，提出了一种广义的对象分类器，利用CLIP图像/文本嵌入作为分类器，通过层次知识蒸馏，以获得层次掩模proposal之间的区别</p><p><img src="https://oss.zaqai.com/img/202403261515628.png" alt="image.png"></p><h2 id="point-decoder">point decoder</h2><p>对于SAM而言，在一张图片上均匀生成点（网格形式）作为prompts，如果点所在的位置有物体，SAM就可以生成该物体的mask，但是网格形式生成点，点不能保证落到所有物体上，特别是小物体。虽然可以让点更稠密，生成更多的点，但是效率不高</p><p>所以要训练一个网络来生成点，让点尽可能多的落到物体上，而不是背景上，从而提高效率。<br>本文将这个问题看作关键点预测问题，提出了point decoder，和SAM的mask decoder架构相同，并使用mask decoder来初始化。<br>输入图片  <img src="https://math.now.sh?inline=%5Cboldsymbol%7BI%7D%5Cin%5Cmathbb%7BR%7D%5E%7BH%5Ctimes%20W%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>，输出关键点热力图  <img src="https://math.now.sh?inline=%5Cwidehat%7B%5Cboldsymbol%7BH%7D%7D%5Cin%5B0%2C1%5D%5E%7B%5Cfrac%7BH%7D%7Bs%7D%5Ctimes%5Cfrac%7BW%7D%7Bs%7D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>，s是stride</p><h3 id="训练point-decoder">训练point decoder</h3><p>首先使用网格生成点，输入进SAM得到物体的mask，根据物体轮廓计算出物体中心点，和GT point结合得到GT热力图H<br>（只使用GT point会造成对训练集类别的过拟合，而且泛化能力差）<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bpoint%7D%7D%3D%5C%7C%5Cwidehat%7BH%7D-H%5C%7C_2%5E2." style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://oss.zaqai.com/img/202403261737212.png" alt="image.png"></p><h3 id="广义的物体分类器">广义的物体分类器</h3><p>旨在提供关于图像/文本查询的分数。</p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%5Cmathrm%7Bcls%7D%3D%5Coperatorname%7BBCE%7D%28%5Cboldsymbol%7BWr%7D%2C%5Cboldsymbol%7Bc%7D%29%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>    <img src="https://math.now.sh?inline=%5Cboldsymbol%7BW%7D%5Cin%5Cmathbb%7BR%7D%5E%7BC%5Ctimes%20D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/> 是分类权重，由CLIP文本/图像嵌入向量构建，C是query的数量，D是CLIP嵌入向量的维度，r是区域特征，从ROI之后的图像特征中提取， c是GT标签，BCE是二元交叉熵损失</p><p>对没有见过的类别效果不好，因为简单地将分类损失应用于目标分类器，会削弱CLIP的zero-shot能力</p><h4 id="分层知识蒸馏">分层知识蒸馏</h4><p>对齐来自SAM的分层mask proposal的区域特征和CLIP图像嵌入。对于从同一点获得的mask proposal，根据区域特征的重叠程度，用CLIP嵌入向量来对区域特征进行区分。在此过程中，图像编码器可以被蒸馏到分类器中，分类辨别能力更强<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bkd%7D%7D%3D%5Cfrac1M%5Csum_%7Bi%3D1%7D%5EM%5Cmathrm%7BBCE%7D%28%5Cboldsymbol%7BW%7D%5E%7B%5Cprime%7D%5Cboldsymbol%7Br%7D%5E%7B(i%29%7D%2C%5Cboldsymbol%7Bc%7D%5E%7B%5Cprime%7D)%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>M是每个点的proposal数量， <img src="https://math.now.sh?inline=%5Cboldsymbol%7BW%5E%7B%5Cprime%7D%7D%5Cin%5Cmathbb%7BR%7D%5E%7BM%5Ctimes%20D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>是图像区域的嵌入向量</p><h3 id="总损失">总损失</h3><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D%3D%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bpoint%7D%7D%2B%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bcls%7D%7D%2B%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bkd%7D%7D." style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h2 id="results">results</h2><p>few-shot(density-based and detection-based methods)<br><img src="https://oss.zaqai.com/img/202403271936600.png" alt="image.png"></p><p>zero-shot(density-based and detection-based methods)<br><img src="https://oss.zaqai.com/img/202403271936791.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nps泛域名解析内网穿透</title>
      <link href="/2024/03/28/nps%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2024/03/28/nps%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="nps泛域名解析内网穿透"><a href="#nps泛域名解析内网穿透" class="headerlink" title="nps泛域名解析内网穿透"></a>nps泛域名解析内网穿透</h1><blockquote><p>有一个自己的服务器可以实现很多事情, 给自己带来便利.<br>但是首先要考虑网络问题, 毕竟自己也不可能一直都处于内网环境中.<br>一个解决方案便是云服务器, 带有公网ip, 但是配置稍微好一点的云服务器价格水涨船高.<br>我的解决方案是家里放置一个常年开机的linux主机, 使用配置低的云服务器做内网穿透.<br>搭配泛域名解析, 最终的效果就是在主机上配置一个反向代理之后, 直接可以使用https+二级域名的方式在任意网络环境(能连公网)下访问网站, 对自己来说操作完全透明, 就好像家里的主机有了公网ip一样.</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>域名的”*“记录解析到云服务器的公网ip上.</p><h2 id="云服务器nps"><a href="#云服务器nps" class="headerlink" title="云服务器nps"></a>云服务器nps</h2><p>按照网上的搭建步骤来, 直接运行二进制文件也行, docker也行<br><code>docker run -d --name nps --net=host -v /root/docker/nps/conf:/conf ffdfgdfg/nps</code><br>注意要修改配置文件’conf/nps.conf’<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_proxy_port=80</span><br><span class="line">https_proxy_port=443</span><br></pre></td></tr></table></figure><br>https_proxy_port必须为443, 因为要实现https访问, 就要监听443端口.<br>新建完客户端之后, 在域名解析中新建记录, 主机填写”*.domain.com”, 目标直接填写443, 如果客户端是用docker+bridge启动的, 就要改成’172.17.0.1:443’.</p><h2 id="主机npc"><a href="#主机npc" class="headerlink" title="主机npc"></a>主机npc</h2><p>很简单, 直接docker吧<br><code>docker run -d --restart always --name npc --net=host ffdfgdfg/npc -server=...</code></p><h2 id="主机nginx-OpenResty"><a href="#主机nginx-OpenResty" class="headerlink" title="主机nginx/OpenResty"></a>主机nginx/OpenResty</h2><p>nginx监听443端口, 创建反向代理, 域名随便填写二级域名, 创建之后加上https.</p><h2 id="整体网络访问流程"><a href="#整体网络访问流程" class="headerlink" title="整体网络访问流程"></a>整体网络访问流程</h2><p>因为域名解析到了云服务器公网ip, 所有的访问先经过云服务器, 使用https是, 默认访问443端口, nps在监听443, 收到请求后将请求转发到主机的443端口, 主机的443端口由nginx监听, 收到请求后, 进行ssl握手协商, 并转发请求到真实服务端口.<br>再走一个反向流程到浏览器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多模态物体计数论文阅读 Point, Segment and Count_ A Generalized Framework for Object Counting</title>
      <link href="/2024/03/11/%E5%A4%9A%E6%A8%A1%E6%80%81%E7%89%A9%E4%BD%93%E8%AE%A1%E6%95%B0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20Point,%20Segment%20and%20Count_%20A%20Generalized%20Framework%20for%20Object%20Counting/"/>
      <url>/2024/03/11/%E5%A4%9A%E6%A8%A1%E6%80%81%E7%89%A9%E4%BD%93%E8%AE%A1%E6%95%B0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20Point,%20Segment%20and%20Count_%20A%20Generalized%20Framework%20for%20Object%20Counting/</url>
      
        <content type="html"><![CDATA[<h1>Point, Segment and Count_ A Generalized Framework for Object Counting</h1><blockquote><p>CVPR 2024<br><a href="https://github.com/Hzzone/PseCo">https://github.com/Hzzone/PseCo</a></p></blockquote><p>提出了基于检测的零样本和小样本类别无关的通用计数框架（检测=计数+定位）<br>使用了SAM将所有可能的物体分割成掩码proposal，使用CLIP对proposal分类来技术<br>面临效率低和小的稠密物体无法识别的问题<br>首先提出了一个类别无关的物体定位器，为SAM提供准确而且最少的点提示，降低计算成本，而且避免了小对象的丢失。<br>此外，提出了一种广义的对象分类器，利用CLIP图像/文本嵌入作为分类器，通过层次知识蒸馏，以获得层次掩模proposal之间的区别</p><p><img src="https://oss.zaqai.com/img/202403261515628.png" alt="image.png"></p><h2 id="point-decoder">point decoder</h2><p>对于SAM而言，在一张图片上均匀生成点（网格形式）作为prompts，如果点所在的位置有物体，SAM就可以生成该物体的mask，但是网格形式生成点，点不能保证落到所有物体上，特别是小物体。虽然可以让点更稠密，生成更多的点，但是效率不高</p><p>所以要训练一个网络来生成点，让点尽可能多的落到物体上，而不是背景上，从而提高效率。<br>本文将这个问题看作关键点预测问题，提出了point decoder，和SAM的mask decoder架构相同，并使用mask decoder来初始化。<br>输入图片  <img src="https://math.now.sh?inline=%5Cboldsymbol%7BI%7D%5Cin%5Cmathbb%7BR%7D%5E%7BH%5Ctimes%20W%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>，输出关键点热力图  <img src="https://math.now.sh?inline=%5Cwidehat%7B%5Cboldsymbol%7BH%7D%7D%5Cin%5B0%2C1%5D%5E%7B%5Cfrac%7BH%7D%7Bs%7D%5Ctimes%5Cfrac%7BW%7D%7Bs%7D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>，s是stride</p><h3 id="训练point-decoder">训练point decoder</h3><p>首先使用网格生成点，输入进SAM得到物体的mask，根据物体轮廓计算出物体中心点，和GT point结合得到GT热力图H<br>（只使用GT point会造成对训练集类别的过拟合，而且泛化能力差）<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bpoint%7D%7D%3D%5C%7C%5Cwidehat%7BH%7D-H%5C%7C_2%5E2." style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br><img src="https://oss.zaqai.com/img/202403261737212.png" alt="image.png"></p><h3 id="广义的物体分类器">广义的物体分类器</h3><p>旨在提供关于图像/文本查询的分数。</p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%5Cmathrm%7Bcls%7D%3D%5Coperatorname%7BBCE%7D%28%5Cboldsymbol%7BWr%7D%2C%5Cboldsymbol%7Bc%7D%29%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>    <img src="https://math.now.sh?inline=%5Cboldsymbol%7BW%7D%5Cin%5Cmathbb%7BR%7D%5E%7BC%5Ctimes%20D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/> 是分类权重，由CLIP文本/图像嵌入向量构建，C是query的数量，D是CLIP嵌入向量的维度，r是区域特征，从ROI之后的图像特征中提取， c是GT标签，BCE是二元交叉熵损失</p><p>对没有见过的类别效果不好，因为简单地将分类损失应用于目标分类器，会削弱CLIP的zero-shot能力</p><h4 id="分层知识蒸馏">分层知识蒸馏</h4><p>对齐来自SAM的分层mask proposal的区域特征和CLIP图像嵌入。对于从同一点获得的mask proposal，根据区域特征的重叠程度，用CLIP嵌入向量来对区域特征进行区分。在此过程中，图像编码器可以被蒸馏到分类器中，分类辨别能力更强<br><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bkd%7D%7D%3D%5Cfrac1M%5Csum_%7Bi%3D1%7D%5EM%5Cmathrm%7BBCE%7D%28%5Cboldsymbol%7BW%7D%5E%7B%5Cprime%7D%5Cboldsymbol%7Br%7D%5E%7B(i%29%7D%2C%5Cboldsymbol%7Bc%7D%5E%7B%5Cprime%7D)%2C" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/><br>M是每个点的proposal数量， <img src="https://math.now.sh?inline=%5Cboldsymbol%7BW%5E%7B%5Cprime%7D%7D%5Cin%5Cmathbb%7BR%7D%5E%7BM%5Ctimes%20D%7D" style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/>是图像区域的嵌入向量</p><h3 id="总损失">总损失</h3><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D%3D%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bpoint%7D%7D%2B%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bcls%7D%7D%2B%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Bkd%7D%7D." style="filter: opacity(90%);transform:scale(0.85);text-align:center;display:inline-block;margin: 0;"/></p><h2 id="results">results</h2><p>few-shot(density-based and detection-based methods)<br><img src="https://oss.zaqai.com/img/202403271936600.png" alt="image.png"></p><p>zero-shot(density-based and detection-based methods)<br><img src="https://oss.zaqai.com/img/202403271936791.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2024/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>设计模式</h1><h2 id="工厂方法模式">工厂方法模式</h2><p><img src="https://oss.zaqai.com/img/202403062134126.png" alt="image.png"><br>工厂模式是一种创建型设计模式, 有两套东西</p><h3 id="产品">产品</h3><p>通用产品是一个接口, 具体的产品要实现接口的功能.</p><h3 id="创建者">创建者</h3><p>基础的创建者是一个抽象类, 包含一个具体的方法和一个抽象的创建产品的方法, 具体的方法会调用创建产品的方法得到产品的实例, 再调用产品的功能方法<br>具体的创建者继承抽象类, 重写创建产品的方法, 由于具体的产品和具体的创建者一一对应, 这个方法直接new对应的具体产品并返回.</p><blockquote><p>具体的产品和具体的创建者一一对应<br>@Override注解是可选的</p></blockquote><h3 id="客户端调用">客户端调用</h3><p>客户端直接用具体的创建者(子类)初始化基础创建者(父类), 并调用父类的具体方法, 具体方法会调用创建产品的方法, 创建产品的方法是由具体子类实现的, 具体的子类来new出具体的产品.</p><h3 id="好处">好处</h3><p>需要新的产品, 直接定义产品类, 实现通用产品接口, 再创建一个对应的具体创建者, 继承父类, 重写抽象方法, 直接return new出来的新产品. 对于客户端的代码, 唯一的改动就是使用新的具体创建者来初始化基础创建者, 实现客户端和具体产品代码的解耦</p><h2 id="抽象工厂模式">抽象工厂模式</h2><p><img src="https://oss.zaqai.com/img/202403062243980.png" alt="image.png"></p><h3 id="产品-2">产品</h3><p>抽象产品是一个接口, 具体产品实现接口功能</p><h3 id="工厂">工厂</h3><p>抽象工厂是个接口, 有创建产品的方法, 具体的工厂实现方法, 直接return new出来的具体产品就行</p><h3 id="Application">Application</h3><p>构造函数接受一个具体的工厂实例(子类初始化父类), 调用工厂的创建产品的方法, 就得到了具体的产品实例, 就可以调用产品的功能</p><h3 id="好处-2">好处</h3><p>产生变动时, 客户端代码只需修改传入Application构造函数的具体工厂类型就可以, 实现客户端和具体产品代码的解耦</p><ul><li>单一职责原则。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li>开闭原则。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><h2 id="单例模式">单例模式</h2><p>单例模式是一种创建型设计模式, 保证一个类只有一个实例, 并提供一个访问该实例的全局节点。<br>同时解决了两个问题， 所以违反了单一职责原则</p><ol><li>在类中添加一个私有静态成员变量用于保存单例实例。</li><li>声明一个公有静态构建方法用于获取单例实例。</li><li>在静态方法中实现&quot;延迟初始化&quot;。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。</li><li>将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.singleton.example.thread_safe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// The field must be declared volatile so that double check lock would work correctly.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux无图形界面使用selenium自动登录爬取数据</title>
      <link href="/2024/02/01/linux%E6%97%A0%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%BD%BF%E7%94%A8selenium%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2024/02/01/linux%E6%97%A0%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%BD%BF%E7%94%A8selenium%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="linux无图形界面使用selenium自动登录爬取数据"><a href="#linux无图形界面使用selenium自动登录爬取数据" class="headerlink" title="linux无图形界面使用selenium自动登录爬取数据"></a>linux无图形界面使用selenium自动登录爬取数据</h1><blockquote><p>对于一些cookie有效期较长的场景, 我们可以在浏览器devtool直接复制网络请求的curl命令, 再通过<a href="https://curlconverter.com/python/">Convert curl commands to Python (curlconverter.com)</a>转换为python脚本, 这样会自动带上cookie.<br>但是对于cookie有效期较短或要求较为严格的场景, 就要使用selenium来模拟浏览器操作了, Selenium是广泛使用的模拟浏览器运行的库, 它是一个用于Web应用程序测试的工具.  Selenium测试直接运行在浏览器中，就像真正的用户在操作一样，并且支持大多数现代 Web 浏览器</p><p>由于无图形界面不能直观地看到浏览器状态, 建议在windows上调试好爬虫脚本之后再放在linux用</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2></blockquote><h3 id="系统依赖"><a href="#系统依赖" class="headerlink" title="系统依赖"></a>系统依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libxss1 libappindicator1 libindicator7</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装xvfb</span></span><br><span class="line"><span class="comment"># xvfb是一种虚拟的窗口服务器，可以模拟图形界面。</span></span><br><span class="line">sudo apt-get install xvfb</span><br></pre></td></tr></table></figure><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>要安装chrome和chromedriver, 并且版本一致, 一般chromedriver新版本难找, 所以chrome不要太新, 推荐一个网站<a href="https://googlechromelabs.github.io/chrome-for-testing/">Chrome for Testing availability (googlechromelabs.github.io)</a>, 下载匹配的版本即可<br>安装不用多说了, 直接解压, 写环境变量<br>我的版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─[0] chromedriver --version</span><br><span class="line">ChromeDriver 122.0.6261.94 (880dbf29479c6152d5e4f08dfd3a96b30f919e56-refs/branch-heads/6261@&#123;<span class="comment">#960&#125;)</span></span><br><span class="line">(notebook) (base) ┌─[root@q-EQ] - [~] - [2024-02-29 08:57:36]</span><br><span class="line">└─[0] google-chrome --version</span><br><span class="line">Google Chrome 122.0.6261.94 </span><br></pre></td></tr></table></figure></p><h4 id="firefox-未测试"><a href="#firefox-未测试" class="headerlink" title="firefox(未测试)"></a>firefox(未测试)</h4><p>先下载driver <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gtk3</span><br><span class="line">wget http://releases.mozilla.org/pub/firefox/releases/116.0.3/linux-x86_64/zh-CN/firefox-116.0.3.tar.bz2</span><br><span class="line">tar jxpvf firefox-116.0.3.tar.bz2</span><br><span class="line">sudo <span class="built_in">ln</span> -s /root/firefox/firefox /usr/bin/firefox</span><br></pre></td></tr></table></figure></p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自行创建conda环境</span></span><br><span class="line">pip install selenium -i https://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># pyvirtualdisplay是一个Python库，用于在无图形界面环境下触发xvfb。</span></span><br><span class="line">pip install EasyProcess</span><br><span class="line">pip install xvfbwrapper</span><br><span class="line">pip install pyvirtualdisplay</span><br></pre></td></tr></table></figure><h2 id="示例脚本"><a href="#示例脚本" class="headerlink" title="示例脚本"></a>示例脚本</h2><h3 id="bing搜索"><a href="#bing搜索" class="headerlink" title="bing搜索"></a>bing搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"><span class="comment"># 创建一个虚拟显示 </span></span><br><span class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">1280</span>, <span class="number">768</span>))</span><br><span class="line">display.start()</span><br><span class="line"><span class="comment"># 配置Firefox选项 </span></span><br><span class="line">firefox_options = Options()</span><br><span class="line">firefox_options.headless = <span class="literal">True</span> <span class="comment"># 以headless模式运行，具体代码如下：</span></span><br><span class="line"> <span class="comment"># 创建Firefox </span></span><br><span class="line">browser = webdriver.Firefox(options=firefox_options)</span><br><span class="line"><span class="comment"># 在这里编写您的代码，例如访问网页、操作元素等</span></span><br><span class="line">query = <span class="string">&#x27;Selenium的使用&#x27;</span></span><br><span class="line">url = <span class="string">f&quot;https://cn.bing.com/search?q=<span class="subst">&#123;query&#125;</span>&quot;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">title = browser.title</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Page title: &quot;</span>, title)</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;screenshot1.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭WebDriver和虚拟显示 </span></span><br><span class="line">browser.quit()</span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure><h3 id="西交成绩更新通知"><a href="#西交成绩更新通知" class="headerlink" title="西交成绩更新通知"></a>西交成绩更新通知</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个虚拟显示 </span></span><br><span class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">1280</span>, <span class="number">768</span>))</span><br><span class="line">display.start()</span><br><span class="line"><span class="comment"># 配置选项 </span></span><br><span class="line">chrome_option = Options()</span><br><span class="line">chrome_option.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>) <span class="comment">#解决DevToolsActivePort文件不存在的报错</span></span><br><span class="line">chrome_option.headless = <span class="literal">True</span> <span class="comment"># 以headless模式运行，具体代码如下：</span></span><br><span class="line">chrome_option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">chrome_option.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line"> <span class="comment"># 创建Chrome</span></span><br><span class="line">browser = webdriver.Chrome(chrome_option)</span><br><span class="line">browser.maximize_window()  <span class="comment"># 最大化窗口</span></span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>) <span class="comment"># 等待加载10s</span></span><br><span class="line"><span class="comment"># 在这里编写您的代码，例如访问网页、操作元素等</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;http://gmis.xjtu.edu.cn/pyxx&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located(</span><br><span class="line">    (By.XPATH, <span class="string">&#x27;//*[@id=&quot;form1&quot;]/input[1]&#x27;</span>)))</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;学号&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located(</span><br><span class="line">    (By.XPATH, <span class="string">&#x27;//*[@id=&quot;form1&quot;]/input[2]&#x27;</span>)))</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">submit = wait.until(EC.element_to_be_clickable(</span><br><span class="line">    (By.XPATH, <span class="string">&#x27;//*[@id=&quot;account_login&quot;]&#x27;</span>)))</span><br><span class="line">submit.click() <span class="comment"># 点击登录按钮</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># print(browser.page_source)</span></span><br><span class="line"><span class="comment"># browser.save_screenshot(&#x27;screenshot1.png&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成绩查询页面</span></span><br><span class="line">browser.get(<span class="string">&quot;http://gmis.xjtu.edu.cn/pyxx/pygl/xscjcx/index&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># browser.page_source</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(browser.page_source, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">data_list = []  </span><br><span class="line"><span class="keyword">for</span> idx, tr <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.find_all(<span class="string">&#x27;tr&#x27;</span>)):</span><br><span class="line">    tds = tr.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> tds:</span><br><span class="line">        data_list.append(&#123;</span><br><span class="line">            <span class="string">&#x27;课程名称&#x27;</span>: tds[<span class="number">0</span>].get_text(strip=<span class="literal">True</span>),</span><br><span class="line">            <span class="string">&#x27;成绩&#x27;</span>: tds[<span class="number">3</span>].get_text(strip=<span class="literal">True</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭WebDriver和虚拟显示 </span></span><br><span class="line">browser.quit()</span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure><p>结果:<br>[{‘课程名称’: ‘工程伦理（二）’, ‘成绩’: ‘90’}, {‘课程名称’: ‘软件能力成熟度模型’, ‘成绩’: ‘优’}, {‘课程名称’: ‘深度学习及应用’, ‘成绩’: ‘优’}, {‘课程名称’: ‘应修总学分’, ‘成绩’: ‘6.0’}, {‘课程名称’: ‘应修学位学分’, ‘成绩’: ‘2.0’}]<br>稍微有点小bug, 会将最后一个表格也识别上, 不管了, 无伤大雅<br><img src="https://oss.zaqai.com/img/202402292118609.png" alt=""><br>判断成绩更新并推送通知<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">msg</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(<span class="string">&quot;URL&quot;</span>, json=&#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&#x27;教务监控&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: msg,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: msg,</span><br><span class="line">        <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;qiyeweixin&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.basename(sys.argv[<span class="number">0</span>])+<span class="string">&#x27;_output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 读取文件的内容</span></span><br><span class="line">    file_content = file.read()</span><br><span class="line"><span class="comment"># Open a file for writing</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.basename(sys.argv[<span class="number">0</span>])+<span class="string">&#x27;_output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="built_in">str</span>(data_list))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(file_content)!=<span class="built_in">str</span>(data_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出新成绩了&quot;</span>)</span><br><span class="line">    push(<span class="built_in">str</span>(data_list))</span><br></pre></td></tr></table></figure></p><h2 id="开箱即用-Docker容器"><a href="#开箱即用-Docker容器" class="headerlink" title="开箱即用-Docker容器"></a>开箱即用-Docker容器</h2><p><a href="https://github.com/SeleniumHQ/docker-selenium">SeleniumHQ/docker-selenium: Provides a simple way to run Selenium Grid with Chrome, Firefox, and Edge using Docker, making it easier to perform browser automation (github.com)</a>提供了很多Selenium的Docker镜像。</p><p>推荐<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -tid --name chrome-debug -h chrome-debug --memory 2g --memory-swap -1 -p 9516:4444 -p 31527:5900 selenium/standalone-chrome-debug</span><br></pre></td></tr></table></figure><br>在这里可以看到session会话 <a href="http://ip:9516/wd/hub/static/resource/hub.html">http://ip:9516/wd/hub/static/resource/hub.html</a><br><img src="https://oss.zaqai.com/img/202403052207690.png" alt=""><br>好处是提供了一个vnc server, 端口31527, 可以看到浏览器的界面<br><img src="https://oss.zaqai.com/img/202403052209297.png" alt=""></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程Docker服务的地址和端口</span></span><br><span class="line"><span class="comment">#wd 表示 WebDriver，hub 表示服务器的入口点。</span></span><br><span class="line"><span class="comment">#通过在 URL 中指定 /wd/hub，您告诉 Selenium 客户端要连接到远程的 WebDriver 服务器</span></span><br><span class="line"><span class="comment">#服务器9516映射到docker中4444端口也就是Webdriver-selenim服务端口</span></span><br><span class="line">remote_url = <span class="string">&#x27;http://ip:9516/wd/hub&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置浏览器选项</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程Selenium Chrome节点</span></span><br><span class="line">driver = webdriver.Remote(command_executor=remote_url, options=chrome_options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开浏览器</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux小技巧备忘</title>
      <link href="/2024/01/31/linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/"/>
      <url>/2024/01/31/linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h1 id="linux小技巧备忘"><a href="#linux小技巧备忘" class="headerlink" title="linux小技巧备忘"></a>linux小技巧备忘</h1><h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><ul><li><p><code>bash -x test.sh</code>可以看到脚本执行情况, 类似边debug边执行</p></li><li><p>可以使用<code>echo $?</code>查看上条命令返回值, 0表示成功, 非0失败</p></li><li><p>if 语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="variable">$COUNT</span> -eq 3]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> hhh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 可以是其他command, 执行成功, 判断为真, 否则为假</span></span><br><span class="line"><span class="keyword">if</span> ping -c 1 baidu.com; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> hhh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)); <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> hhh</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">---</span><br><span class="line">IP_LIST=<span class="string">&quot;127.0.0.1 172.17.0.1 1.1.1.1&quot;</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$IP_LIST</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> hhh</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="linux三剑客"><a href="#linux三剑客" class="headerlink" title="linux三剑客"></a>linux三剑客</h2><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则匹配以`/dev`开头的行, 并打印第1 5列</span></span><br><span class="line"><span class="built_in">df</span> -h | awk <span class="string">&#x27;/^\/dev/&#123;print $1,$5&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 选择第2行, 并打印最后一列</span></span><br><span class="line">free -m | awk <span class="string">&#x27;NR==2&#123;print $NF&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul><li><code>curl -Ls google.com -w &quot;%&#123;http_code&#125;&quot; -o /dev/null</code>只输出状态码, 不能<code>&gt;/dev/null</code>, 会把状态码也给重定向了</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大数据实验报告</title>
      <link href="/2024/01/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/01/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据实验报告"><a href="#大数据实验报告" class="headerlink" title="大数据实验报告"></a>大数据实验报告</h1><p>[toc]</p><h2 id="2-HDFS-分布式文件系统实战"><a href="#2-HDFS-分布式文件系统实战" class="headerlink" title="2 HDFS 分布式文件系统实战"></a>2 HDFS 分布式文件系统实战</h2><h3 id="任务一：HDFS-常用操作"><a href="#任务一：HDFS-常用操作" class="headerlink" title="任务一：HDFS 常用操作"></a>任务一：HDFS 常用操作</h3><ul><li><p>步骤 1 help 命令</p><p><img src="https://oss.zaqai.com/img/202401181543169.png" alt="image-20240118154306943" style="zoom:67%;" /></p></li></ul><p>  <img src="https://oss.zaqai.com/img/202401181543325.png" alt="image-20240118154359249" style="zoom:67%;" /></p><ul><li><p>步骤 2 ls 命令</p><p><img src="https://oss.zaqai.com/img/202401181544721.png" alt="image-20240118154448647" style="zoom:67%;" /></p></li><li><p>步骤 3 mkdir 命令</p><p><img src="https://oss.zaqai.com/img/202401181546204.png" alt="image-20240118154615154" style="zoom:67%;" /></p></li><li><p>步骤 4 put 命令</p><p><img src="https://oss.zaqai.com/img/202401181548784.png" alt="image-20240118154830727" style="zoom:67%;" /></p></li><li><p>步骤 5 cat 命令</p><p><img src="https://oss.zaqai.com/img/202401181549527.png" alt="image-20240118154911490" style="zoom:67%;" /></p></li><li><p>步骤 6 text 命令</p><p><img src="https://oss.zaqai.com/img/202401181549664.png" alt="image-20240118154954624" style="zoom:67%;" /></p></li><li><p>步骤 7 moveFromLocal 命令</p><p><img src="https://oss.zaqai.com/img/202401181552583.png" alt="image-20240118155237523" style="zoom:67%;" /></p></li><li><p>步骤 8 appendToFile 命令</p><p><img src="https://oss.zaqai.com/img/202401181554295.png" alt="image-20240118155421252" style="zoom:67%;" /></p></li><li><p>步骤 9 cp 命令</p><p><img src="https://oss.zaqai.com/img/202401181556291.png" alt="image-20240118155650208" style="zoom:67%;" /></p></li><li><p>步骤 10 mv 命令</p><p><img src="https://oss.zaqai.com/img/202401181559942.png" alt="image-20240118155906818" style="zoom:67%;" /></p></li><li><p>步骤 11 get 命令</p><p><img src="https://oss.zaqai.com/img/202401181601462.png" alt="image-20240118160103406" style="zoom:67%;" /></p></li><li><p>步骤 12 getmerge 命令</p><p><img src="https://oss.zaqai.com/img/202401181602357.png" alt="image-20240118160251290" style="zoom:67%;" /></p></li><li><p>步骤 13 rm 命令</p><p><img src="https://oss.zaqai.com/img/202401181603693.png" alt="image-20240118160347639" style="zoom:67%;" /></p></li><li><p>步骤 14 df 命令  步骤 15 du 命令  步骤 16 count 命令</p><p><img src="https://oss.zaqai.com/img/202401181606948.png" alt="image-20240118160605898" style="zoom:67%;" /></p></li></ul><h3 id="任务二：回收站使用"><a href="#任务二：回收站使用" class="headerlink" title="任务二：回收站使用"></a>任务二：回收站使用</h3><p><img src="https://oss.zaqai.com/img/202401181608686.png" alt="image-20240118160812604" style="zoom:67%;" /></p><h2 id="4-Hbase-列式数据库实战"><a href="#4-Hbase-列式数据库实战" class="headerlink" title="4 Hbase 列式数据库实战"></a>4 Hbase 列式数据库实战</h2><h3 id="任务一：HBase-常用操作"><a href="#任务一：HBase-常用操作" class="headerlink" title="任务一：HBase 常用操作"></a>任务一：HBase 常用操作</h3><ul><li><p>创建普通表</p><p><img src="https://oss.zaqai.com/img/202401182026150.png" alt="image-20240118202624091" style="zoom:67%;" /></p></li><li><p>增加数据  Scan 方式查询数据   Get 方式查询数据  指定条件查询数据</p><p><img src="https://oss.zaqai.com/img/202401182030861.png" alt="image-20240118203008780" style="zoom:67%;" /></p></li><li><p>查询多版本数据</p><p><img src="https://oss.zaqai.com/img/202401182034889.png" alt="image-20240118203440729" style="zoom:67%;" /></p></li><li><p>删除数据</p><p><img src="https://oss.zaqai.com/img/202401182037915.png" alt="image-20240118203748828" style="zoom:67%;" /></p></li><li><p>删除表</p><p><img src="https://oss.zaqai.com/img/202401182038035.png" alt="image-20240118203857967" style="zoom:67%;" /></p></li></ul><h3 id="任务二：创建预分-region-表"><a href="#任务二：创建预分-region-表" class="headerlink" title="任务二：创建预分 region 表"></a>任务二：创建预分 region 表</h3><ul><li><p>以 rowkey 切分，随机分为 4 个 region</p><p><img src="https://oss.zaqai.com/img/202401182040242.png" alt="image-20240118204018193" style="zoom:67%;" /></p></li></ul><p>  <img src="https://oss.zaqai.com/img/202401182042915.png" alt="image-20240118204203837" style="zoom:67%;" /></p><ul><li><p>指定 region 的 startKey 和 endKey</p><p><img src="https://oss.zaqai.com/img/202401182044701.png" alt="image-20240118204412595" style="zoom:67%;" /></p></li></ul><h3 id="任务三：Filter-过滤器使用"><a href="#任务三：Filter-过滤器使用" class="headerlink" title="任务三：Filter 过滤器使用"></a>任务三：Filter 过滤器使用</h3><p><img src="https://oss.zaqai.com/img/202401182047129.png" alt="image-20240118204749041" style="zoom:67%;" /></p><h2 id="5-MarpReduce-数据处理实战"><a href="#5-MarpReduce-数据处理实战" class="headerlink" title="5 MarpReduce 数据处理实战"></a>5 MarpReduce 数据处理实战</h2><ul><li><p>步骤 3 上传文件到 HDFS 系统  步骤 4 执行 jar 包程序</p><p><img src="https://oss.zaqai.com/img/202401181617805.png" alt="image-20240118161741667" style="zoom:67%;" /></p></li><li><p>步骤 5 查看统计结果</p><p><img src="https://oss.zaqai.com/img/202401181619049.png" alt="image-20240118161922981" style="zoom:67%;" /></p></li></ul><h2 id="8-Kafka-消息订阅实战"><a href="#8-Kafka-消息订阅实战" class="headerlink" title="8 Kafka 消息订阅实战"></a>8 Kafka 消息订阅实战</h2><h3 id="任务一：shell-端-Kafka-消息的生产、消费。"><a href="#任务一：shell-端-Kafka-消息的生产、消费。" class="headerlink" title="任务一：shell 端 Kafka 消息的生产、消费。"></a>任务一：shell 端 Kafka 消息的生产、消费。</h3><ul><li><p>步骤 2 创建 Kafka 主题  步骤 3 查看 topic</p><p><img src="https://oss.zaqai.com/img/202401181706753.png" alt="image-20240118170659679"></p></li><li><p>步骤 4 创建 console 消费者</p><p><img src="https://oss.zaqai.com/img/202401181714011.png" alt="image-20240118171434960"></p></li></ul><ul><li><p>步骤 5 创建 console 生产者</p><p><img src="https://oss.zaqai.com/img/202401181713978.png" alt="image-20240118171346911"></p></li><li><p>步骤 6 测试生产者、消费者</p><p><img src="https://oss.zaqai.com/img/202401181713087.png" alt="image-20240118171325040"></p></li></ul><h3 id="任务二：Kafka-多消费者之消费组"><a href="#任务二：Kafka-多消费者之消费组" class="headerlink" title="任务二：Kafka 多消费者之消费组"></a>任务二：Kafka 多消费者之消费组</h3><ul><li><p>步骤 1 创建主题</p><p><img src="https://oss.zaqai.com/img/202401181722270.png" alt="image-20240118172219199"></p></li><li><p>步骤 2 创建生产者和消费者</p><p><img src="https://oss.zaqai.com/img/202401181723852.png" alt="image-20240118172314790"></p></li></ul><p>  <img src="https://oss.zaqai.com/img/202401181724467.png" alt="image-20240118172407405"></p><ul><li><p>步骤 3 设置三个消费者</p><p><img src="https://oss.zaqai.com/img/202401181727844.png" alt="image-20240118172724708" style="zoom:67%;" /></p></li><li><p>步骤 4 启动第四个消费者</p><p><img src="https://oss.zaqai.com/img/202401181729937.png" alt="image-20240118172929899" style="zoom:67%;" /></p></li><li><p>步骤 5 设置四个消费者</p><p><img src="https://oss.zaqai.com/img/202401181734038.png" alt="image-20240118173452974" style="zoom:67%;" /></p></li><li><p>步骤 6 设置两个消费者</p><p><img src="https://oss.zaqai.com/img/202401181737526.png" alt="image-20240118173738473" style="zoom:67%;" /></p><p><img src="https://oss.zaqai.com/img/202401181739200.png" alt="image-20240118173946107"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无root配置科研环境</title>
      <link href="/2024/01/16/%E6%97%A0root%E9%85%8D%E7%BD%AE%E7%A7%91%E7%A0%94%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/01/16/%E6%97%A0root%E9%85%8D%E7%BD%AE%E7%A7%91%E7%A0%94%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="无root配置科研环境"><a href="#无root配置科研环境" class="headerlink" title="无root配置科研环境"></a>无root配置科研环境</h1><h2 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h2><p>首先检查有没有zsh，并没有，先安装zsh</p><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download --no-check-certificate</span><br><span class="line"><span class="built_in">mkdir</span> zsh &amp;&amp; unxz zsh.tar.xz &amp;&amp; tar -xvf zsh.tar -C zsh --strip-components 1</span><br><span class="line"><span class="comment"># 可以尝试直接编译安装,但大概率报错</span></span><br><span class="line"><span class="built_in">cd</span> zsh</span><br><span class="line"><span class="comment"># 编译zsh</span></span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/app/zsh</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 安装完成后。加入环境变量.bashrc</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/app/zsh/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>执行./configure的时候应该就会报错, 报错的话就先编译安装ncurses吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.0.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> ncurses</span><br><span class="line">tar -xvf ncurses-6.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ncurses-6.0</span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/app/ncurses --with-shared --without-debug --enable-widec</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>大概率还是会报错<code>../include/curses.h:1943:56: note: in definition of macro ‘mouse_trafo’</code><br>但要修改的是<code>include/curses.tail</code>文件, 好像是因为<code>curses.h</code>里面的代码是由<code>curses.tail</code>导入的</p><p>删除这里的注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">103</span> <span class="keyword">extern</span> <span class="title function_">NCURSES_EXPORT</span><span class="params">(<span class="type">bool</span>)</span>    <span class="title function_">wmouse_trafo</span> <span class="params">(<span class="type">const</span> WINDOW*, <span class="type">int</span>*, <span class="type">int</span>*, <span class="type">bool</span>)</span>;</span><br><span class="line"><span class="number">104</span> <span class="keyword">extern</span> <span class="title function_">NCURSES_EXPORT</span><span class="params">(<span class="type">bool</span>)</span>    <span class="title function_">mouse_trafo</span> <span class="params">(<span class="type">int</span>*, <span class="type">int</span>*, <span class="type">bool</span>)</span>;   <span class="comment">/* generated */</span></span><br></pre></td></tr></table></figure><p>再<code>make clean &amp;&amp; make &amp;&amp; make install</code>就可以安装ncurses成功</p><p>配置ncurses环境变量在<code>.bashrc</code>中, 并<code>source</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CXXFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">&quot;-fPIC&quot;</span></span><br><span class="line"><span class="built_in">export</span> NCURSES_HOME=<span class="variable">$HOME</span>/app/ncurses  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NCURSES_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$NCURSES_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$NCURSES_HOME</span>/include&quot;</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$NCURSES_HOME</span>/lib&quot;</span></span><br></pre></td></tr></table></figure><p>再执行安装zsh的<code>./configure</code>之后的命令就可以成功安装zsh</p><p>在<code>.profile</code>里加入<code>[ -f $HOME/app/zsh/bin/zsh ] &amp;&amp; exec $HOME/app/zsh/bin/zsh -l</code>就可以登陆就是zsh了</p><h3 id="安装ohmyzsh-1"><a href="#安装ohmyzsh-1" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h3><p>还是手动安装吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting --depth=1</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions --depth=1</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions --depth=1</span><br><span class="line"><span class="comment"># 修改.zshrc</span></span><br><span class="line">plugins=(git sudo z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)</span><br></pre></td></tr></table></figure><p>安装fzf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><p><code>zsh Anaconda3-2023.09-0-Linux-x86_64.sh</code>默认+yes</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zero-shot object counting论文阅读1</title>
      <link href="/2024/01/11/zero-shot%20object%20counting%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/"/>
      <url>/2024/01/11/zero-shot%20object%20counting%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB1/</url>
      
        <content type="html"><![CDATA[<h1>VLCounter: Text-aware Visual Representation for Zero-Shot Object Counting</h1><blockquote><p>AAAI2024</p><p><a href="https://github.com/seunggu0305/VLCounter">https://github.com/seunggu0305/VLCounter</a></p><p>- zero-shot</p><p>- 视觉语言模型</p><p>- 在FSC-147上比clip-count的MAE低了零点几</p></blockquote><h2 id="1-Visual-Language-Base">1. Visual-Language Base</h2><p><img src="https://oss.zaqai.com/img/202401101716411.png" alt="image-20240110171630302"></p><p><img src="https://math.now.sh?inline=S_%7Bi%20j%7D%28%5Cmathcal%7BV%7D%2C%5Cmathcal%7BT%7D%29%3D%5Cfrac%7Bv_%7Bi%20j%7D%5Cmathcal%7BT%7D%5ET%7D%7B%7C%7Cv_%7Bi%20j%7D%7C%7C%7C%5Cmathcal%7BT%7D%7C%7C%7D" style="display:inline-block;margin: 0;"/></p><p>T: 语义嵌入向量  V: 块嵌入向量  S: 相似度图</p><p>S表示图像块和文本的相似度程度，可以帮助解码器定位目标。</p><p><img src="https://math.now.sh?inline=%7B%5Ccal%20D%7D_%7B%5Cmathrm%7Bpred%7D%7D%3D%5Cphi_%7B%5Cmathrm%7Bdecoder%7D%7D%28%5B%5Cnu%2CS%5D%29" style="display:inline-block;margin: 0;"/>        <img src="https://math.now.sh?inline=%7B%5Cmathcal%7BL%7D%7D_%7B%5Cmathrm%7Bcount%7D%7D%3D%7C%7CD_%7B%5Cmathrm%7Bpred%7D%7D-D_%7B%5Cmathrm%7Bgt%7D%7D%7C%7C_%7B2%7D%5E%7B2%7D" style="display:inline-block;margin: 0;"/></p><h2 id="2-Visual-Language-Counter">2. Visual-Language Counter</h2><h3 id="2-1-语义条件下的提示微调-SPT">2.1 语义条件下的提示微调 (SPT)</h3><p><img src="https://oss.zaqai.com/img/202401101718391.png" alt="image-20240110171841346"></p><p><img src="https://math.now.sh?inline=%5Chat%7B%5Cmathcal%7BP%7D%7D%5El%3D%5Bp_1%5El%2B%5Chat%7B%5Cmathcal%7BT%7D%7D%2Cp_2%5El%2B%5Chat%7B%5Cmathcal%7BT%7D%7D%2Cp_M%5El%2B%5Chat%7B%5Cmathcal%7BT%7D%7D%5D%2C" style="display:inline-block;margin: 0;"/>        <img src="https://math.now.sh?inline=%5B%5Bcls%5D%2C%5C_%2C%5Cmathcal%7BV%7D%5E%7Bl%2B1%7D%5D%3DLayer_%7B%5Cmathrm%7Benc%7D%7D%5E%7Bl%7D%28%5B%5Bcls%5D%2C%5Chat%7B%5Cmathcal%7BP%7D%7D%5E%7Bl%7D%2C%5Cmathcal%7BV%7D%5E%7Bl%7D%5D%29%2C" style="display:inline-block;margin: 0;"/></p><p>目的是突出显示相应区域的目标</p><h3 id="2-2-可学习的仿射变换-LAT">2.2 可学习的仿射变换 (LAT)</h3><p>由于物体计数的目标是找到物体的中心点而不是整个物体区域，相似图S中包含的信息与训练期间需要回传的损失之间可能会存在差异。</p><p>通过将S变换为<img src="https://math.now.sh?inline=%5Chat%7BS%7D" style="display:inline-block;margin: 0;"/>, 围绕单独的物体建立更加任务相关的视觉语义关联</p><p><img src="https://math.now.sh?inline=%5Chat%7BS%7D%3DW%5Cotimes%20S%2BB" style="display:inline-block;margin: 0;"/></p><p><img src="https://math.now.sh?inline=%5Cbegin%7Baligned%7DW%2CB%5Cin%26%5Cmathbb%7BR%7D%5E%7BH%5Ctimes%20W%7D%5Cend%7Baligned%7D" style="display:inline-block;margin: 0;"/> 是可学习的矩阵，使用排名感知对比损失直接优化计数图<img src="https://math.now.sh?inline=%5Chat%7BS%7D" style="display:inline-block;margin: 0;"/>，以学习对象计数的正确激活度。</p><p><img src="https://oss.zaqai.com/img/202401111845237.png" alt="image-20240111184514037"></p><p>突出显示包含目标的区域，抑制不包含目标的区域</p><h3 id="2-3-分段感知跳跃连接-SaSC">2.3 分段感知跳跃连接(SaSC)</h3><p><img src="https://oss.zaqai.com/img/202401101743386.png" alt="image-20240110172423790"></p><p>为了使用CLIP特征中保留的局部语义信息, 采用跳跃连接, 将图片编码器的中间特征混合到解码器的对应层中, 保证模型对没有见过的类别的泛化能力</p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BF%7D%5Ek%3DLayer_%7B%5Cmathrm%7Bdec%7D%7D%5Ek%28%5Cmathcal%7BF%7D%5E%7Bk-1%7D%2B%5Cphi_%7B%5Cmathrm%7Bproj%7D%7D%5Ek(%5Cmathcal%7BV%7D%5El%29%5Cotimes%5Chat%7BS%7D)%2C" style="display:inline-block;margin: 0;"/></p><h3 id="2-4-损失函数">2.4 损失函数</h3><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%5Cmathrm%7Bcount%7D" style="display:inline-block;margin: 0;"/>训练整个模型以学习计数目标，但在SPT和LAT中的重点是学习生成针对计数的相似性映射, 所以采用排名感知对比损失来优化<img src="https://math.now.sh?inline=%5Chat%7BS%7D" style="display:inline-block;margin: 0;"/>，将对象中心附近的图像块赋予更高激活度。</p><p>将真实密度图标准化为在0和1之间映射的值, 来确定正负样本</p><p style=""><img src="https://math.now.sh?from=%5Cmathcal%7BL%7D_%7B%5Cmathrm%7Brank%7D%7D%3D-%5Csum_%7Bk%3D1%7D%5EK%5Clog%5Cfrac%7B%5Csum_%7B%5Chat%7BS%7D_i%5Cin%5Chat%7BS%7D_r%5E%7B%5Cmathrm%7Bpos%7D%7D%7D%5Cexp%28%5Chat%7BS%7D_i%2F%5Ctau%29%7D%7B%5Csum_%7B%5Chat%7BS%7D_j%5Cin(%5Chat%7BS%7D_r%5E%7B%5Cmathrm%7Bpos%7D%7D%5Ccup%5Chat%7BS%7D_r%5E%7B%5Cmathrm%7Bneg%7D%7D)%7D%5Cexp(%5Chat%7BS%7D_j%2F%5Ctau)%7D%0A" /></p><p><img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D_%5Cmathrm%7Btotal%7D%3D%5Cmathcal%7BL%7D_%5Cmathrm%7Bcount%7D%2B%5Clambda%5Ccdot%5Cmathcal%7BL%7D_%5Cmathrm%7Brank%7D%2C" style="display:inline-block;margin: 0;"/></p><h2 id="3-性能">3. 性能</h2><p><img src="https://oss.zaqai.com/img/202401111358937.png" alt="image-20240111135824879"></p><h2 id="4-消融实验">4. 消融实验</h2><p><img src="https://oss.zaqai.com/img/202401111217610.png" alt="image-20240111121740530"></p><p>M1就是VLBase，M5是VLCounter</p><p>M2加入语义条件下的提示微调后，MAE降低很多，表明了与语义条件相结合微调的重要性</p><p>M4加入分段感知跳跃连接，表明CLIP编码器中的分层中间表示在语义上也是有意义的存在。</p><p><img src="https://oss.zaqai.com/img/202401111228593.png" alt="image-20240111122805557"></p><p>在VPT中使用语义条件T可以使得提示更加语义特定</p><p>使用计数图S的语义条件可以抑制与对象无关的信息</p><p><img src="https://oss.zaqai.com/img/202401111231691.png" alt="image-20240111123106660"></p><p>由于计数任务主要假设每张图像中存在多个实例，将文本提示修改为复数形式也可以提高性能</p><h2 id="5-对比CLIP-count">5. 对比CLIP-count</h2><p><img src="https://oss.zaqai.com/img/202401111356269.png" alt="image-20240111135604226"></p><p><img src="https://oss.zaqai.com/img/202401111356237.png" alt="image-20240111135642203"></p><hr><h1>Open-world Text-specified Object Counting</h1><blockquote><p>BMVC 2023</p><p><a href="https://github.com/niki-amini-naieni/CounTX/">https://github.com/niki-amini-naieni/CounTX/</a></p><p>端到端的单阶段开放类别物体计数模型</p><p>zero-shot</p></blockquote><h2 id="1-CounTX">1. CounTX</h2><p><img src="https://oss.zaqai.com/img/202401111500952.png" alt="image-20240111150040892"></p><p>图像编码器: CLIP ViT-B-16(16x16的块尺寸, 12层, 最终嵌入向量维度是512), 没有用到输出的分类向量</p><p>文本编码器: CLIP ViT-B-16(context length是77, 12层, 最终嵌入向量维度是512)</p><p>特征交互模块: 使用了两个Transformer解码器层, 图像块特征作为query, 文本特征作为K和V, 来建模图像和文本的相似性</p><p>解码器: fϕ的输出被重塑成具有512通道的空间特征图。每个通道使用双线性插值放大到24×24像素。然后，通过具有256个滤波器的卷积层进行上采样，将其高度和宽度增加两倍, 操作做4次。将特征图的尺寸变为和输入图像一样, 但是有256个通道。这些通道使用一个1×1卷积组合成一个单通道密度图。该密度图通过求和来估计物体数量。</p><p>损失函数: <img src="https://math.now.sh?inline=%5Cmathcal%7BL%7D%28%5Chat%7BY%7D%2CY%29%3D%5Cfrac1%7BH%5Ctimes%20W%7D%5Csum_%7Bp%2Cq%7D((%5Chat%7BY%7D)_%7Bp%2Cq%7D-(Y)_%7Bp%2Cq%7D)%5E2" style="display:inline-block;margin: 0;"/></p><h2 id="2-FSC-147-D">2.  FSC-147-D</h2><p><img src="https://oss.zaqai.com/img/202401111625149.png" alt="image-20240111162516997"></p><p>FSC-147的增强版本，对类别描述做了修正或更加详细的描述</p><p>大部分只是在原始类别名称前加了&quot;the&quot;, 少部分做了修正或更加详细的描述</p><h2 id="3-性能-2">3. 性能</h2><p><img src="https://oss.zaqai.com/img/202401111628324.png" alt="image-20240111162835284"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过RSSHub订阅学院通知</title>
      <link href="/2024/01/01/%E9%80%9A%E8%BF%87RSSHub%E8%AE%A2%E9%98%85%E5%AD%A6%E9%99%A2%E9%80%9A%E7%9F%A5/"/>
      <url>/2024/01/01/%E9%80%9A%E8%BF%87RSSHub%E8%AE%A2%E9%98%85%E5%AD%A6%E9%99%A2%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="通过RSSHub订阅学院通知"><a href="#通过RSSHub订阅学院通知" class="headerlink" title="通过RSSHub订阅学院通知"></a>通过RSSHub订阅学院通知</h1><blockquote><p>今天看到以为up主在介绍RSSHub, 遂入坑, 上午在了解RSS, 并搭建了RSSHub, 下午费了九牛二虎之力终于给学院写了个RSS订阅(只怪自己js学的不够通透)</p><p><a href="https://www.bilibili.com/video/BV1pT4y1y7AH">【干货分享】三分钟教你部署RSSHub!_哔哩哔哩_bilibili</a></p></blockquote><p><a href="http://ssdut.dlut.edu.cn/">大连理工大学软件学院(新) (dlut.edu.cn)</a>RSS订阅地址: <a href="https://rss.zaqai.com/ssdut">https://rss.zaqai.com/ssdut</a></p><p>路由: 默认是本科生通知, 即<a href="https://rss.zaqai.com/ssdut%E5%92%8Chttps://rss.zaqai.com/ssdut/bkstz%E7%AD%89%E4%BB%B7">https://rss.zaqai.com/ssdut和https://rss.zaqai.com/ssdut/bkstz等价</a>, 对应于<a href="http://ssdut.dlut.edu.cn/index/bkstz.htm">本科生通知-大连理工大学软件学院(新) (dlut.edu.cn)</a></p><p>还有学院通知: <a href="https://rss.zaqai.com/ssdut/xytz">https://rss.zaqai.com/ssdut/xytz</a>, 对应于<a href="http://ssdut.dlut.edu.cn/index/xytz.htm">学院通知-大连理工大学软件学院(新) (dlut.edu.cn)</a></p><p>其他的通知对我来说用处不大, 所以没有适配, 大体上差不多, 只需要更改一些jquery选择器的东西</p><h2 id="RSSHub介绍"><a href="#RSSHub介绍" class="headerlink" title="RSSHub介绍"></a>RSSHub介绍</h2><p><img src="https://oss.zaqai.com/img/image-20220222171045161.png" alt="image-20220222171045161"></p><blockquote><p>万物皆可RSS, 其实就是给你提供一个大体框架, 具体爬取哪些元素要你自己写</p><p>原理就是当你访问RSSHub, 它会根据路由去请求指定的资源, 并转换为RSS格式</p></blockquote><h2 id="RSSHub搭建"><a href="#RSSHub搭建" class="headerlink" title="RSSHub搭建"></a>RSSHub搭建</h2><p><a href="https://docs.rsshub.app/install/#shou-dong-bu-shu">部署 | RSSHub</a>讲的很详细了, 虽然有服务器, 不过我还是推荐Vercel托管(我看的视频就是讲这个的), 直接域名cname到它提供的域名就行了. 但是有一点, github仓库里的代码改了之后, 它会自动重新部署, 但是好像并没有改变.</p><h2 id="为没有适配RSS的网站适配RSS"><a href="#为没有适配RSS的网站适配RSS" class="headerlink" title="为没有适配RSS的网站适配RSS"></a>为没有适配RSS的网站适配RSS</h2><blockquote><p> 参考: <a href="https://maronyea.me/restless/72/">为任意网站创建 RSSHub 路由的思路 | Maron的自留地 (maronyea.me)</a></p></blockquote><p>只需修改两个文件: </p><ul><li><p>RSSHub目录\lib\router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大连理工大学</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/dut/:subsite/:type&#x27;</span>, <span class="title function_">lazyloadRouteHandler</span>(<span class="string">&#x27;./routes/universities/dut/index&#x27;</span>));</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/ssdut/:type?&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./routes/universities/dut/ssdut&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>增加一个ssdut的路由, :type?为可选参数</p></blockquote></li><li><p>RSSHub目录\lib\routes\universities\dut\ssdut.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;@/utils/got&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 域名</span></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;http://ssdut.dlut.edu.cn&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 分类</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="attr">bkstz</span>: <span class="string">&#x27;/index/bkstz.htm&#x27;</span>,</span><br><span class="line">    <span class="attr">xytz</span>: <span class="string">&#x27;/index/xytz.htm&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里获取到传入的参数，也就是 /ncu/jwc/:type? 中的 type</span></span><br><span class="line">    <span class="comment">// 通过 || 来实现设置一个默认值</span></span><br><span class="line">    <span class="keyword">const</span> type = ctx.<span class="property">params</span>.<span class="property">type</span> || <span class="string">&#x27;bkstz&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 要抓取的网址</span></span><br><span class="line">    <span class="keyword">const</span> link = host + map[type] ;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 获取列表页，也就是发出请求，来获得这个文章列表页</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">got</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,    <span class="comment">// 请求的方法是 get，这里一般都是 get</span></span><br><span class="line">        <span class="attr">url</span>: link,        <span class="comment">// 请求的链接，也就是文章列表页</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 cheerio 来把请求回来的数据转成 DOM，方便操作</span></span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 提取列表项</span></span><br><span class="line">    <span class="keyword">const</span> urlList = $(<span class="string">&#x27;.c_hzjl_list1&#x27;</span>)    <span class="comment">// 筛选出所有 class=&quot;.c_hzjl_list1&quot; 的内容</span></span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>)                <span class="comment">// 找到所有 &lt;a&gt; 标签，也就是文章的链接</span></span><br><span class="line">        .<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">20</span>)             <span class="comment">// 获取 10 个，也可以把它调大一点，比如 15 个。最大的个数要看这个网页中有多少条</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">i, e</span>) =&gt;</span> $(e).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>))    <span class="comment">// 作为键值对来存储 &lt;a&gt; 标签们的 href 属性</span></span><br><span class="line">        .<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要输出的文章内容保存到 out 中</span></span><br><span class="line">    <span class="keyword">const</span> out = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">        <span class="comment">// 抓取操作放这里</span></span><br><span class="line">        urlList.<span class="title function_">map</span>(<span class="keyword">async</span> (itemUrl) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取文章的完整链接</span></span><br><span class="line">            itemUrl = url.<span class="title function_">resolve</span>(host+map[type] , itemUrl);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 这里是使用 RSSHub 的缓存机制</span></span><br><span class="line">            <span class="keyword">const</span> cache = <span class="keyword">await</span> ctx.<span class="property">cache</span>.<span class="title function_">get</span>(itemUrl);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(cache));</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 获取列表项中的网页</span></span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> got.<span class="title function_">get</span>(itemUrl);</span><br><span class="line">            <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// single 就是一篇文章了，里面包括了标题、链接、内容和时间</span></span><br><span class="line">            <span class="keyword">const</span> single = &#123;</span><br><span class="line">                <span class="attr">title</span>: $(<span class="string">&#x27;title&#x27;</span>).<span class="title function_">text</span>(),      <span class="comment">// 提取标题</span></span><br><span class="line">                <span class="attr">link</span>: itemUrl,                 <span class="comment">// 文章链接</span></span><br><span class="line">                <span class="attr">description</span>: $(<span class="string">&#x27;.v_news_content&#x27;</span>)        <span class="comment">// 文章内容，并且用了个将文章的链接和图片转成完整路径的 replace() 方法</span></span><br><span class="line">                    .<span class="title function_">html</span>()</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/src=&quot;\//g</span>, <span class="string">`src=&quot;<span class="subst">$&#123;url.resolve(host, <span class="string">&#x27;.&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/href=&quot;\//g</span>, <span class="string">`href=&quot;<span class="subst">$&#123;url.resolve(host, <span class="string">&#x27;.&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">                    .<span class="title function_">trim</span>(),</span><br><span class="line">                <span class="attr">pubDate</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;/</span>)+<span class="string">&#x27;-&#x27;</span>+</span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[0-9]&#123;2&#125;/g</span>)[<span class="number">2</span>]+<span class="string">&#x27;-&#x27;</span>+                        </span><br><span class="line">                        $(<span class="string">&#x27;.mt_15, .mb_15, .mt_10, .mb_10&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">text</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[1-9][0-9]&#123;3&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日/</span>).<span class="title function_">toString</span>()</span><br><span class="line">                        .<span class="title function_">match</span>(<span class="regexp">/[0-9]&#123;2&#125;/g</span>)[<span class="number">3</span>]            </span><br><span class="line"></span><br><span class="line">                ).<span class="title function_">toUTCString</span>(),                                     <span class="comment">// 将时间的文本文字转换成 Date 对象</span></span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 设置缓存及时间</span></span><br><span class="line">            ctx.<span class="property">cache</span>.<span class="title function_">set</span>(itemUrl, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(single), <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 输出一篇文章的所有信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(single);</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置分类的标题</span></span><br><span class="line">    <span class="keyword">let</span> info = <span class="string">&#x27;本科生通知&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;xytz&#x27;</span>) &#123;</span><br><span class="line">        info = <span class="string">&#x27;学院通知&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 访问 RSS 链接时会输出的信息</span></span><br><span class="line">    ctx.<span class="property">state</span>.<span class="property">data</span> = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;大工软院 - &#x27;</span> + info,</span><br><span class="line">        <span class="attr">link</span>: link,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;大工软院 - &#x27;</span> + info + <span class="string">&#x27; ssdut.dlut.edu.cn&#x27;</span>,</span><br><span class="line">        <span class="attr">item</span>: out,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>获取专属消息通知, 避免遗漏学院重要通知</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="https://oss.zaqai.com/img/Screenshot_2022-02-22-17-55-13-001_com.levelup.palabre.jpg" alt="Screenshot_2022-02-22-17-55-13-001_com.levelup.palabre" style="zoom: 33%;" /><p><img src="https://oss.zaqai.com/img/image-20220222175505752.png" alt="image-20220222175505752"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域解决</title>
      <link href="/2024/01/01/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3/"/>
      <url>/2024/01/01/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="关于跨域"><a href="#关于跨域" class="headerlink" title="关于跨域"></a>关于跨域</h1><p>出于安全问题考虑, 浏览器都会有跨域限制, 但这个限制只在浏览器端, 你都不想浏览器在和你的服务器交互时还和别的服务器有联系吧. </p><p>试想这样一种场景, 服务器A通过一系列认证手段信任了你的浏览器, 你的浏览器也可以自由地和服务器A交换数据. 忽然你点击某个链接, 跳转到服务器B提供的网页中, 而该网页包含一段js代码, 是去服务器A中取数据的, 这种情况下就非常危险了, 如果没有跨域限制, 浏览器就会就会将服务器A发来的数据显示出来, 服务器B也可以轻松地从服务器A取得数据(这些数据本应通过认证才可以取得).<br> <img src="https://oss.zaqai.com/img/ac56888e0a00b08b.png" alt=""></p><blockquote><p>协议 域名 端口号有一个不同, 都是跨域, 注意二级域名不同也是跨域</p></blockquote><h2 id="跨域请求分类"><a href="#跨域请求分类" class="headerlink" title="跨域请求分类"></a>跨域请求分类</h2><ul><li>简单跨域请求<ul><li>请求方法是GET、HEAD或者POST，并且当请求方法是POST时，Content-Type必须是application/x-www-form-urlencoded, multipart/form-data或着text/plain中的一个值。</li><li>请求中没有自定义HTTP头部(只有Accept、Content-Type、Accept-Language、Content-Language)</li></ul></li><li>非简单跨域请求(带预检的请求)<ul><li><em>简单跨域请求第一条的其他情况</em></li><li>请求中包含自定义HTTP头部</li></ul></li></ul><blockquote><p>对于简单跨域请求, 浏览器在请求头部增加<code>origin</code>字段, 值为js代码所在的域, 也就是上文中的服务器B, 服务器收到请求, 在响应头部增加<code>Access-Control-Allow-Origin</code>字段, 直接返回数据, 至于这个数据能否被js代码拿到, 全凭浏览器的判断, 如果响应头部<code>Access-Control-Allow-Origin</code>包含请求头部中的<code>origin</code>, 浏览器就会返回数据给js代码, 否则忽略该响应</p><p><img src="https://oss.zaqai.com/img/image-20221004223034640.png" alt="image-20221004223034640" style="zoom: 67%;" /></p><p>对于非简单跨域请求, 浏览器首先发送一个预检请求,  请求方法为options, 头部除了<code>origin</code>, 还有<code>Access-Control-Request-Headers</code>和<code>Access-Control-Request-Method:</code>, 服务器会在响应头添加以下三个字段, 响应中不包含数据. 浏览器根据响应判断, 如果通过就正常发送请求, 否则直接不发送请求</p><p><img src="https://oss.zaqai.com/img/image-20221004224840650.png" alt="image-20221004224840650" style="zoom:67%;" /></p></blockquote><p>了解以上知识后, 就能很清晰地看到, 解决跨域可以从两大方面入手—浏览器 服务器</p><h2 id="跨域实现"><a href="#跨域实现" class="headerlink" title="跨域实现"></a>跨域实现</h2><h3 id="从浏览器入手"><a href="#从浏览器入手" class="headerlink" title="从浏览器入手"></a>从浏览器入手</h3><blockquote><p>只要浏览器不进行跨域检查, 就可以实现跨域</p></blockquote><h4 id="1-关闭浏览器跨域检查-最暴力的方式"><a href="#1-关闭浏览器跨域检查-最暴力的方式" class="headerlink" title="1. 关闭浏览器跨域检查(最暴力的方式)"></a>1. 关闭浏览器跨域检查(最暴力的方式)</h4><p>可以用命令行启动浏览器, 并加一些启动参数, 我在windows上没测试成功, 看到网上有博客说mac可以</p><p>当然这种方法不太实用, 也不安全, 不过在开发调试时使用还是挺方便的</p><h4 id="2-script标签的jsonp"><a href="#2-script标签的jsonp" class="headerlink" title="2. script标签的jsonp"></a>2. script标签的jsonp</h4><blockquote><p>JSONP是JSON with Padding的略称。它是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）。—来源百度</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求8080端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;http://127.0.0.1:8080/index.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        show()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>跨域资源文件在本机8080端口<br><img src="https://oss.zaqai.com/img/4c36ac839b36b1f8.png" alt=""></li></ul><blockquote><p>当我们打开html, 控制台即可见到输出, 成功跨域<br><img src="https://oss.zaqai.com/img/7365b2da99e14d83.png" alt=""></p></blockquote><h3 id="从服务端入手"><a href="#从服务端入手" class="headerlink" title="从服务端入手"></a>从服务端入手</h3><p>既然浏览器的跨域检查无可避免, 那就设法让他的检查通过</p><blockquote><p>其实原理就是在响应头部添加允许跨域的字段, 以nodejs为例, 下面这段代码等价于<code>app.use(cors())</code>, 只不过是做了一个封装, 让我们更简便地调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;X-Powered-By&quot;</span>, <span class="string">&#x27; 3.2.1&#x27;</span>);</span><br><span class="line"> res.<span class="title function_">header</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-服务端配置允许跨域"><a href="#1-服务端配置允许跨域" class="headerlink" title="1. 服务端配置允许跨域"></a>1. 服务端配置允许跨域</h4><p><strong>本文章服务端使用nodejs, 其他语言也类似, springboot是通过添加注解<code>@CrossOrigin</code></strong></p><h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求3000端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(&quot;http://localhost:3000&quot;)</span><br><span class="line">            .then(res =&gt; res.json())</span><br><span class="line">            .then(data =&gt; &#123; console.log(data) &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>服务端监听本机3000端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">// const cors = require(&#x27;cors&#x27;)</span><br><span class="line">// app.use(cors(&#123;</span><br><span class="line">//     origin: &#x27;http://localhost:5500&#x27;,</span><br><span class="line">// &#125;))</span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123; &quot;name&quot;: &quot;zq&quot;, &quot;age&quot;: 18 &#125;)</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure><blockquote><p>当我们打开html, 可以看到开头熟悉的报错. 将js文件中的注释打开(<code>app.use(cors())</code>, 允许所有origin跨域), 重新启动服务端, 即可解决<br><strong>亲测localhost 和 127.0.0.1 不能混用, 也会存在跨域</strong><br><img src="https://oss.zaqai.com/img/46cac3db2e54580e.png" alt=""></p></blockquote><h4 id="2-nginx反向代理"><a href="#2-nginx反向代理" class="headerlink" title="2. nginx反向代理"></a>2. nginx反向代理</h4><p>相当于是做了一个跳板, 使用Nginx转发请求。把跨域的接口写成调本域的接口，然后将这些接口转发到真正的请求地址。</p><ul><li>html服务在本机5500端口, 相当于浏览器正在和5500端口交互, 去请求nginx监听的8080端口的服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        fetch(&quot;http://localhost:8080&quot;)</span><br><span class="line">            .then(res =&gt; res.json())</span><br><span class="line">            .then(data =&gt; &#123; console.log(data) &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>nginx监听8080端口, 将请求转发至服务端的3000端口<br><img src="https://oss.zaqai.com/img/aebde8e9b66f7c0b.png" alt=""></li></ul><blockquote><p>画线的头部可加可不加, 都可以实现跨域, 因为nginx已经帮我们配置好允许跨域</p></blockquote><ul><li>服务端监听本机3000端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123; &quot;name&quot;: &quot;zq&quot;, &quot;age&quot;: 18 &#125;)</span><br><span class="line">&#125;).listen(3000)</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/db6b3681384ee382.png" alt=""></p><blockquote><p>参考: B站视频: <a href="https://www.bilibili.com/video/BV1Ei4y1o7jK">https://www.bilibili.com/video/BV1Ei4y1o7jK</a></p><p><a href="https://www.cnblogs.com/linxingyun/p/6772937.html#:~:text=带预检 (Preflighted">Http跨域时候预检没通过的几种原因 - jyLi - 博客园 (cnblogs.com)</a>的跨域请求需要浏览器在发送真实HTTP请求之前先发送一个OPTIONS的预检请求，检测服务器端是否支持真实请求进行跨域资源访问，真实请求的信息在OPTIONS请求中通过Access-Control-Request-Method,Header和Access-Control-Request-Headers Header描述，此外与简单跨域请求一样，浏览器也会添加Origin Header。)</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一个ipv6+ddns</title>
      <link href="/2024/01/01/%E8%AE%B0%E4%B8%80%E4%B8%AAipv6+ddns/"/>
      <url>/2024/01/01/%E8%AE%B0%E4%B8%80%E4%B8%AAipv6+ddns/</url>
      
        <content type="html"><![CDATA[<h1 id="记一个ipv6-ddns"><a href="#记一个ipv6-ddns" class="headerlink" title="记一个ipv6+ddns"></a>记一个ipv6+ddns</h1><p>所谓ddns, 就是动态dns, 适用于服务器ip地址不固定, 过一段时间就会改变的场景</p><p>推荐使用dynv6, 我用着挺好的, 地址: <a href="https://dynv6.com/">Free dynamic DNS for IPv6 (dynv6.com)</a></p><p>虽然是英文, 但大致能看明白吧</p><h2 id="dynv6步骤"><a href="#dynv6步骤" class="headerlink" title="dynv6步骤"></a>dynv6步骤</h2><ul><li><p>首先新建域名, 在<a href="https://dynv6.com/keys">dynv6</a>中查看token</p></li><li><p>推荐使用他提供的脚本<a href="https://gist.github.com/corny/7a07f5ac901844bd20c9">gist.github.com</a>, 其他方式可自行参考他提供的API<a href="https://dynv6.com/docs/apis">dynv6 APIs</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line">hostname=$1</span><br><span class="line">device=$2</span><br><span class="line">file=$HOME/.dynv6.addr6</span><br><span class="line">[ -e $file ] &amp;&amp; old=`cat $file`</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$hostname&quot; -o -z &quot;$token&quot; ]; then</span><br><span class="line">  echo &quot;Usage: token=&lt;your-authentication-token&gt; [netmask=64] $0 your-name.dynv6.net [device]&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$netmask&quot; ]; then</span><br><span class="line">  netmask=128</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$device&quot; ]; then</span><br><span class="line">  device=&quot;dev $device&quot;</span><br><span class="line">fi</span><br><span class="line">address=$(ip -6 addr list scope global $device | grep -v &quot; fd&quot; | sed -n &#x27;s/.*inet6 \([0-9a-f:]\+\).*/\1/p&#x27; | head -n 1)</span><br><span class="line"></span><br><span class="line">if [ -e /usr/bin/curl ]; then</span><br><span class="line">  bin=&quot;curl -fsS&quot;</span><br><span class="line">elif [ -e /usr/bin/wget ]; then</span><br><span class="line">  bin=&quot;wget -O-&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;neither curl nor wget found&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$address&quot; ]; then</span><br><span class="line">  echo &quot;no IPv6 address found&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">address with netmask</span></span><br><span class="line">current=$address/$netmask</span><br><span class="line"></span><br><span class="line">if [ &quot;$old&quot; = &quot;$current&quot; ]; then</span><br><span class="line">  echo &quot;IPv6 address unchanged&quot;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">send addresses to dynv6</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">bin <span class="string">&quot;http://dynv6.com/api/update?hostname=<span class="variable">$hostname</span>&amp;ipv6=<span class="variable">$current</span>&amp;token=<span class="variable">$token</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">bin <span class="string">&quot;http://ipv4.dynv6.com/api/update?hostname=<span class="variable">$hostname</span>&amp;ipv4=auto&amp;token=<span class="variable">$token</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save current address</span></span><br><span class="line">echo $current &gt; $file</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>考虑到脚本的网站不是那么好打开, 在这里放上脚本. 默认ipv4 ipv6都会被上传记录, 如果只想要ipv6, 将<code>$bin &quot;http://ipv4.dynv6.com/api/update?hostname=$hostname&amp;ipv4=auto&amp;token=$token&quot;</code>删掉即可. 我是删掉了, 防止某些情况下解析到ipv4, 导致无法访问</p></blockquote><blockquote><p>脚本抓取网络接口显示的ipv6地址, 在$HOME&#x2F;.dynv6.addr6创建文件记录上次更新的ip地址, 如果再次执行更新操作, 会先判断获取的ip地址和文件中的是否一致, 如果一致便不会上传更新</p></blockquote></li><li><p>命令 <code>token=你的token ./dynv6.sh 你的域名</code></p></li></ul><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>可以设置定时任务, 如<code>0 0 * * *</code>代表每天0点</p><table><thead><tr><th align="center">分</th><th align="center">时</th><th align="center">日</th><th align="center">月</th><th align="center">周</th></tr></thead><tbody><tr><td align="center">0~59</td><td align="center">0~23</td><td align="center">1~31</td><td align="center">1~12</td><td align="center">0~7</td></tr></tbody></table><blockquote><p>周的数字为 0 或 7 时，都代表“星期天”的意思</p></blockquote><table><thead><tr><th align="center">特殊字符</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">*(星号)</td><td align="center">代表任何时刻都接受的意思。举例来说，0 12 * * * command 日、月、周都是*，就代表着不论何月、何日的礼拜几的12：00都执行后续命令的意思。</td></tr><tr><td align="center">,(逗号)</td><td align="center">代表分隔时段的意思。举例来说，如果要执行的工作是3：00与6：00时，就会是：0 3,6 * * * command时间还是有五列，不过第二列是 3,6 ，代表3与6都适用</td></tr><tr><td align="center">-(减号)</td><td align="center">代表一段时间范围内，举例来说，8点到12点之间的每小时的20分都进行一项工作：20 8-12 * * * command仔细看到第二列变成8-12.代表 8,9,10,11,12 都适用的意思</td></tr><tr><td align="center">&#x2F;n(斜线)</td><td align="center">那个n代表数字，即是每隔n单位间隔的意思，例如每五分钟进行一次，则：*&#x2F;5 * * * * command用*与&#x2F;5来搭配，也可以写成0-59&#x2F;5，意思相同</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程心得</title>
      <link href="/2024/01/01/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
      <url>/2024/01/01/%E7%BC%96%E7%A8%8B%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="正则匹配关键字符"><a href="#正则匹配关键字符" class="headerlink" title="正则匹配关键字符"></a>正则匹配关键字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;/data/cache/style_1_common.css?y7a&quot;;</span><br><span class="line">System.out.println(s.split(&quot;\\?&quot;)[0]);</span><br></pre></td></tr></table></figure><blockquote><p><code>split(&quot;?&quot;) split(&quot;\?&quot;) split(&quot;/?&quot;)</code>都不行<br><code>split(&quot;\\?&quot;) split(&quot;[?]&quot;)</code>行</p></blockquote><h2 id="C-关于NULL和nullptr"><a href="#C-关于NULL和nullptr" class="headerlink" title="C++关于NULL和nullptr"></a>C++关于NULL和nullptr</h2><blockquote><p>NULL在C语言被定义为<code>#define NULL ((void *)0)</code>,可以发生隐式类型转换(<code> int  *pi = NULL;</code>)<br>nullptr是在C++中引入的,代表空指针,因为C++是强类型语言,void*是不能隐式转换成其他类型的指针的,所以NULL会被解释为0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">void func(int x) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;void func(int x)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void func(char *y) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;void func(int *y)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func(NULL);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会有重载二义性错误,换成nullptr就没问题<br><strong>不用NULL,用nullptr</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客刷题笔记</title>
      <link href="/2024/01/01/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="牛客刷题笔记"><a href="#牛客刷题笔记" class="headerlink" title="牛客刷题笔记"></a>牛客刷题笔记</h1><ul><li>抽象类 特点: <ul><li>1.抽象类中可以有构造方法 </li><li>2.抽象类中可以存在普通属性，方法，静态属性和方法。 </li><li>3.抽象类中可以存在抽象方法。</li><li>4.如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法</li><li>5.抽象类中的抽象方法，需要有子类实现，如果子类不实现，则子类也需要定义为抽象的。</li></ul></li><li>接口 </li><li>1.在接口中只有方法的声明，没有方法体。 </li><li>2.在接口中只有常量，因为定义的变量，在编译的时候都会默认加上 &#x3D;&#x3D;public static final&#x3D;&#x3D;  </li><li>3.在接口中的方法，永远都被public来修饰。</li><li>4.接口中没有构造方法，也不能实例化接口的对象。 </li><li>5.接口可以实现多继承 </li><li>6.接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法 </li><li>7.则实现类定义为抽象类。</li><li>线程私有:java虚拟机栈，程序计数器，本地方法栈 </li><li>线程共享:java堆，方法区</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>斐讯n1安装centos7+docker openwrt</title>
      <link href="/2024/01/01/%E6%96%90%E8%AE%AFn1%E5%AE%89%E8%A3%85centos7+docker%20openwrt/"/>
      <url>/2024/01/01/%E6%96%90%E8%AE%AFn1%E5%AE%89%E8%A3%85centos7+docker%20openwrt/</url>
      
        <content type="html"><![CDATA[<h1 id="斐讯n1安装centos7-docker-openwrt"><a href="#斐讯n1安装centos7-docker-openwrt" class="headerlink" title="斐讯n1安装centos7+docker openwrt"></a>斐讯n1安装centos7+docker openwrt</h1><blockquote><p>首先声明,我的n1是降级过的,系统默认usb启动优先级大于emmc,所以可以直接将镜像写入u盘,通过u盘启动系统,同时通过脚本将系统写入emmc.</p><p>同时,由于n1的usb是2.0,推荐将常用系统写入emmc,而不是通过u盘启动(虽然emmc只有8G).亲测速度快的不是一点半点,最直观的感受就是执行<code>yum update</code>.</p></blockquote><h3 id="centos镜像"><a href="#centos镜像" class="headerlink" title="centos镜像"></a>centos镜像</h3><p><a href="https://www.right.com.cn/forum/thread-4061041-1-7.html">N1盒子 CentOS7.9系统镜像，支持写入EMMC - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p><p>同时附上论坛上的简单教程:</p><p><a href="https://www.right.com.cn/forum/thread-6804025-1-1.html">分享N1盒子CentOS7.9系统下安装最新版本的宝塔面板linux7.7简单教程 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p><p><strong>特别感谢恩山论坛的各位大佬!</strong></p><blockquote><p>在此我也简单记录一下,以防某天重装系统:joy:</p></blockquote><p>修改写入emmc的脚本,添加上复制lib64文件夹的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.install_os_to_emmc/install.sh</span><br><span class="line"></span><br><span class="line">在153行后添加下面命令</span><br><span class="line"></span><br><span class="line">echo &quot;Copy LIB64...&quot;</span><br><span class="line">tar -cf - lib64 | (cd $DIR_INSTALL; tar -xpf -)</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/image-20220116094823830.png" alt="image-20220116094823830"></p><h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><blockquote><p>禁止宝塔打开swap内存,纯净系统只占用200-300MB内存,对于n1的2G内存来说,基本上够用了,何况8G的emmc也很稀缺</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改宝塔安装脚本</span><br><span class="line">删除或注释掉以下三条命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;MEM_TOTAL&#125;</span>&quot;</span> -le <span class="string">&quot;1&quot;</span> ];<span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       Auto_Swap</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure><p>关于宝塔安装nginx和php,听说是编译安装性能更优,只是安装较慢,本人亲测Nginx 1.20.2  Nginx 1.18  php7.4均可编译安装成功</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>网上也有很多教程,我就直接一点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="docker安装openwrt"><a href="#docker安装openwrt" class="headerlink" title="docker安装openwrt"></a>docker安装openwrt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先开启网卡混杂模式</span><br><span class="line">ip link set eth0 promisc on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建vlan</span></span><br><span class="line">docker network create -d macvlan --subnet=192.168.10.0/24 --gateway=192.168.10.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><p>网段与主路由相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:latest /sbin/init</span><br><span class="line">此时openwrt已在运行</span><br><span class="line">进入容器修改lan接口</span><br><span class="line">docker exec -it openwrt bash</span><br><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>只需修改<code>config interface &#39;lan&#39;</code>中的配置</p><p>ipaddr为主路由网段下的一个ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">option ipaddr &#x27;192.168.1.111&#x27;</span><br><span class="line">option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">option dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure><p>重启<code>/etc/init.d/network restart</code>之后就可以在浏览器输入<code>192.168.1.111</code>进入openwrt管理页面,默认密码为password</p><h3 id="关于旁路网关上网"><a href="#关于旁路网关上网" class="headerlink" title="关于旁路网关上网"></a>关于旁路网关上网</h3><p>使用<code>服务</code>-&gt;<code>PassWall</code>操作就行,实际上就是一个代理工具客户端</p><p>配置好之后,只需在设备上修改为静态ip,注意网关和DNS都要改为openwrt的ip<code>192.168.1.111</code>,大功告成,可以去测试一下</p><p><font color="red">记得去接口里把桥接关掉!!!</font></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li><p>解决宿主机无法和docker的macvlan通信</p><blockquote><p><a href="https://piaoyun.cc/1527.html">Docker的macvlan模式容器与宿主机通信问题-飘云 (piaoyun.cc)</a></p><p><a href="https://smalloutcome.com/2021/07/18/Docker-%E4%BD%BF%E7%94%A8-macvlan-%E7%BD%91%E7%BB%9C%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/">Docker 使用 macvlan 网络容器与宿主机的通信过程 | 一小步 (smalloutcome.com)</a></p></blockquote><p>一句话:</p><blockquote><p>mavlan 虚拟出来的网口不能和父网口直通，但是可以和同一子网的其他网口互通（包括其他虚拟出来的网口）。</p><p>通过在宿主机上用 macvlan 添加一个虚拟网口 mynet ，并在宿主机上配置路由到容器的数据包由 mynet 发出，就架起了宿主机与容器的通信桥梁。<br>宿主机发往容器的数据包，由 mynet 发给容器；容器发往宿主机的数据包先发给 mynet，再由 mynet 转交给 eth0。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip link add mynet link eth0 type macvlan mode bridge</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip addr add 192.168.1.112 dev mynet</span></span><br><span class="line">ip link set mynet up</span><br><span class="line">ip route add 192.168.1.111 dev mynet</span><br></pre></td></tr></table></figure><p>至此, 宿主机和容器应该是能互相ping通</p></li><li><p>解决宿主机使用openwrt网关时无法联网</p><blockquote><p><a href="https://github.com/lisaac/blog/issues/4">在docker中运行openwrt · Issue #4 · lisaac&#x2F;blog (github.com)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip route del default #删除默认路由</span><br><span class="line">ip route add default via 192.168.1.111 dev mynet # 设置静态路由</span><br></pre></td></tr></table></figure></li></ol><h4 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h4><blockquote><p>我们使用代理时,软件将我们的网络请求拦截,进而向代理服务器发送请求,代理服务器再向我们的目标服务器发送我们被软件拦截的原始请求,最后再返回</p><p>使用旁路网关时,我们的设备首先将请求发送至openwrt,在openwrt端一番操作再返回</p><p>两种方式本质都是一样的,只是第一种一个设备一个代理,第二种多个设备一个代理,对我们的使用体验来说,当然是第二种更好</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://mlapp.cn/376.html">在Docker 中运行 OpenWrt 旁路网关 | 美丽应用 (mlapp.cn)</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>家用电器功率统计</title>
      <link href="/2024/01/01/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%8A%9F%E7%8E%87%E7%BB%9F%E8%AE%A1/"/>
      <url>/2024/01/01/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8%E5%8A%9F%E7%8E%87%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="家用电器功率统计"><a href="#家用电器功率统计" class="headerlink" title="家用电器功率统计"></a>家用电器功率统计</h1><h2 id="冰箱"><a href="#冰箱" class="headerlink" title="冰箱"></a>冰箱</h2><blockquote><p>夜晚测量, 未打开过冰箱</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165619292.png" alt="image-20220805165619292"></p><p><img src="https://oss.zaqai.com/img/image-20220805155434589.png" alt="image-20220805155434589"></p><p>工作(85+80+78)&#x2F;3&#x3D;81min, 停止(67+69+71)&#x2F;3&#x3D;69min, 工作时间占比8&#x2F;15</p><p>工作时平均功率50w</p><p>一月大概消耗19度电</p><h2 id="冰柜"><a href="#冰柜" class="headerlink" title="冰柜"></a>冰柜</h2><blockquote><p>白天测量, 大概打开冰柜一次</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165508081.png" alt="image-20220805165508081"></p><p><img src="https://oss.zaqai.com/img/image-20220805154752162.png" alt="image-20220805154752162"></p><p>工作(14+14+25+17)&#x2F;4&#x3D;17.5min, 停止(24+23+18+21)&#x2F;4&#x3D;21.5min, 工作时间占比0.45</p><p>工作时平均功率80w</p><p>一月大概消耗26度电</p><h2 id="米家摄像头"><a href="#米家摄像头" class="headerlink" title="米家摄像头"></a>米家摄像头</h2><p><img src="https://oss.zaqai.com/img/image-20220805163303418.png" alt="image-20220805163303418"></p><p>2w!</p><h2 id="电风扇"><a href="#电风扇" class="headerlink" title="电风扇"></a>电风扇</h2><blockquote><p>不摇头</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805165906206.png" alt="image-20220805165906206"></p><p>2档功率48w, 1档功率46w, 差别不大啊</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><blockquote><p>中间看了一段视频</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220805174727491.png"></p><p><img src="https://oss.zaqai.com/img/image-20220805174204635.png" alt="image-20220805174204635"></p><p>权当6.5w吧</p><h2 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h2><p><img src="https://oss.zaqai.com/img/image-20220805174834318.png" alt="image-20220805174834318"></p><p><img src="https://oss.zaqai.com/img/image-20220805175659137.png" alt="image-20220805175659137"></p><p>2w吧</p><h2 id="外面摄像头"><a href="#外面摄像头" class="headerlink" title="外面摄像头"></a>外面摄像头</h2><p><img src="https://oss.zaqai.com/img/image-20220805213014673.png" alt="image-20220805213014673"></p><p>大概是夜晚开启夜视功能, 功率变高了, 算作4w吧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>好用的docker镜像</title>
      <link href="/2024/01/01/%E5%A5%BD%E7%94%A8%E7%9A%84docker%E9%95%9C%E5%83%8F/"/>
      <url>/2024/01/01/%E5%A5%BD%E7%94%A8%E7%9A%84docker%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="好用的docker镜像"><a href="#好用的docker镜像" class="headerlink" title="好用的docker镜像"></a>好用的docker镜像</h1><h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br><span class="line">docker run -d --name portainer -p 39000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /root/data/docker_data/portainer/data:/data -v /root/data/docker_data/portainer/public:/public portainer/portainer</span><br></pre></td></tr></table></figure><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/docker_data/portainer</span><br><span class="line">wget https://alist.zaqai.com/d/ali/share/portainer汉化/public.zip</span><br><span class="line">unzip ./public.zip</span><br></pre></td></tr></table></figure><h2 id="alist"><a href="#alist" class="headerlink" title="alist"></a>alist</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always -v /etc/alist:/opt/alist/data -v /xa:/xa -p 39244:5244 --name=&quot;alist&quot; xhofe/alist:latest</span><br></pre></td></tr></table></figure><h2 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet -v /xa:/xa -v /ali:/ali --privileged sulinggg/openwrt:latest /sbin/init</span><br></pre></td></tr></table></figure><h2 id="home-assistant"><a href="#home-assistant" class="headerlink" title="home-assistant"></a>home-assistant</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=&quot;home-assistant&quot; -e TZ=Asia/Shanghai -v /root/data/docker_data/hassistant:/config -p 8123:8123 -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure><p>安装<code>Xiaomi Miot Auto</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it home-assistant /bin/bash</span><br><span class="line">wget -q -O - https://raw.fastgit.org/al-one/hass-xiaomi-miot/master/install.sh | HUB_DOMAIN=hub.fastgit.xyz ARCHIVE_TAG=latest bash -</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://zhuanlan.zhihu.com/p/352903303">https://zhuanlan.zhihu.com/p/352903303</a></p></blockquote><h2 id="青龙面板"><a href="#青龙面板" class="headerlink" title="青龙面板"></a>青龙面板</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line"> --name ql \</span><br><span class="line"> --hostname ql \</span><br><span class="line"> --restart always \</span><br><span class="line"> -p 35700:5700 \</span><br><span class="line"> -p 35701:5701 \</span><br><span class="line"> -v /root/data/docker_data/ql/config:/ql/config \</span><br><span class="line"> -v /root/data/docker_data/ql/log:/ql/log \</span><br><span class="line"> -v /root/data/docker_data/ql/db:/ql/db \</span><br><span class="line"> -v /root/data/docker_data/ql/scripts:/ql/scripts \</span><br><span class="line"> -v /root/data/docker_data/ql/jbot:/ql/jbot \</span><br><span class="line"> -v /root/data/docker_data/ql/ninja:/ql/ninja \</span><br><span class="line"> whyour/qinglong:latest</span><br></pre></td></tr></table></figure><h2 id="nodered"><a href="#nodered" class="headerlink" title="nodered"></a>nodered</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1880:1880 --restart=always -e TZ=&quot;Asia/Shanghai&quot; -v /root/data/docker_data/nodered:/data --name nodered nodered/node-red</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/">https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十种方式实现WordCount(scala)</title>
      <link href="/2024/01/01/%E5%8D%81%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount(scala)/"/>
      <url>/2024/01/01/%E5%8D%81%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount(scala)/</url>
      
        <content type="html"><![CDATA[<h1 id="十种方式实现WordCount-scala"><a href="#十种方式实现WordCount-scala" class="headerlink" title="十种方式实现WordCount(scala)"></a>十种方式实现WordCount(scala)</h1><blockquote><p>本质上都是各种RDD算子的灵活使用</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.scala.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.&#123;<span class="type">AccumulatorV2</span>, <span class="type">LongAccumulator</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Wordcount的不同实现方式</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount_40_周绮</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;data/file*.txt&quot;</span>)</span><br><span class="line">    dataRDD.cache()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法1: groupBy、map、t._2.size ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .groupBy(word =&gt; word)</span><br><span class="line">      .map(t =&gt; (t._1, t._2.size))</span><br><span class="line">      .collect</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法2: map、reduceByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      .collect</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法3: 累加器 ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> wcAcc = <span class="keyword">new</span> <span class="type">MyAccumulator</span>() <span class="comment">//创建累加器</span></span><br><span class="line">    sc.register(wcAcc, <span class="string">&quot;WordCountAcc&quot;</span>) <span class="comment">//向SparkContext注册累加器</span></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).foreach(</span><br><span class="line">      word =&gt; (wcAcc.add(word)) <span class="comment">//使用累加器进行单词累加</span></span><br><span class="line">    )</span><br><span class="line">    wcAcc.value.foreach((k)=&gt;&#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k._1 + <span class="string">&quot;,&quot;</span> + k._2 + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法4: map、aggregateByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .aggregateByKey(<span class="number">0</span>)(</span><br><span class="line">        (x, y) =&gt; x + y, <span class="comment">//分区内的聚合规则</span></span><br><span class="line">        (x, y) =&gt; x + y <span class="comment">//分区间的聚合规则</span></span><br><span class="line">      ).collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法5: map、foldByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .foldByKey(<span class="number">0</span>)(_ + _)</span><br><span class="line">      .collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法6: map、combineByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>)).combineByKey(</span><br><span class="line">      <span class="comment">//第一个参数：将相同 key 的第一个数据进行结构的转换</span></span><br><span class="line">      v =&gt; v,</span><br><span class="line">      <span class="comment">//指定分区内的聚合规则：</span></span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y,</span><br><span class="line">      <span class="comment">//分区间的聚合规则</span></span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y,</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法7: map、groupByKey、map ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .groupByKey()</span><br><span class="line">      .map((t) =&gt; (t._1, t._2.size))</span><br><span class="line">      .collect()</span><br><span class="line">      .foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法8: countByValue ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> m = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).countByValue()</span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- m) &#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;,&quot;</span> + v + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;--------- 方法9: map、countByKey ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> m2 = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_, <span class="number">1</span>)).countByKey()</span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- m2) &#123;</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;,&quot;</span> + v + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;--------- 方法10: map+LongAccumulator(实在想不到了...) ---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mm = dataRDD.flatMap(_.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> scalaAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;scala&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line">    <span class="keyword">val</span> helloAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;hello&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line">    <span class="keyword">val</span> sparkAcc: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;spark&quot;</span>) <span class="comment">//定义累加器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k &lt;- mm) &#123;</span><br><span class="line">      k <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;scala&quot;</span> =&gt; scalaAcc.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> =&gt; helloAcc.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;spark&quot;</span> =&gt; sparkAcc.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + scalaAcc.name.get + <span class="string">&quot;,&quot;</span> + scalaAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + helloAcc.name.get + <span class="string">&quot;,&quot;</span> + helloAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;(&quot;</span> + sparkAcc.name.get + <span class="string">&quot;,&quot;</span> + sparkAcc.value + <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAccumulator</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]] </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> wcMap = collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]() <span class="comment">//定义Map集合，保存每个单词及次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断累加器是否为初始状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">      wcMap.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      wcMap.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义累计规则，将累加结果写入wcMap对象</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(word: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> newCount = wcMap.getOrElse(word, <span class="number">0</span>L) + <span class="number">1</span></span><br><span class="line">      wcMap.update(word, newCount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取累加器结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = &#123;</span><br><span class="line">      wcMap</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Driver合并多个累加器的规则</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> map1 = <span class="keyword">this</span>.wcMap</span><br><span class="line">      <span class="keyword">val</span> map2 = other.value</span><br><span class="line">      map2.foreach &#123;</span><br><span class="line">        <span class="keyword">case</span> (word, count) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> newCount: <span class="type">Long</span> = map1.getOrElse(word, <span class="number">0</span>L) + count</span><br><span class="line">          map1.update(word, newCount)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">String</span>, collection.mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]] = &#123;</span><br><span class="line">      <span class="keyword">val</span> newMyAccumulator = <span class="keyword">new</span> <span class="type">MyAccumulator</span>()</span><br><span class="line">      newMyAccumulator.wcMap = <span class="keyword">this</span>.wcMap</span><br><span class="line">      newMyAccumulator</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>更多RDD算子相关内容可参考<a href="https://blog.zaqai.com/index.php/archives/27/">创建RDD &amp; RDD算子 - zaqai_blog</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记-链表</title>
      <link href="/2024/01/01/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/01/01/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="刷题笔记-链表"><a href="#刷题笔记-链表" class="headerlink" title="刷题笔记-链表"></a>刷题笔记-链表</h1><h2 id="完整链表操作模板"><a href="#完整链表操作模板" class="headerlink" title="完整链表操作模板"></a>完整链表操作模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    struct ListNode &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        ListNode() : val(<span class="number">0</span>), next(nullptr) &#123;&#125;</span><br><span class="line">        ListNode(<span class="type">int</span> x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line">        ListNode(<span class="type">int</span> x, ListNode* next) : val(x), next(next) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    MyLinkedList() &#123;</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size - <span class="number">1</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;next-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;index out of range!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        delete temp;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr) &#123;</span><br><span class="line">            cout &lt;&lt; cur-&gt;next-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">()</span> &#123;</span><br><span class="line">        ListNode* temp;</span><br><span class="line">        ListNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        ListNode* pre = nullptr;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            temp = cur-&gt;next;  <span class="comment">// 保存一下</span></span><br><span class="line">                               <span class="comment">// cur的下一个节点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">            cur-&gt;next = pre;  <span class="comment">// 翻转操作</span></span><br><span class="line">            <span class="comment">// 更新pre 和 cur指针</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        _dummyHead-&gt;next = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeNthFromEnd</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ListNode* slow = _dummyHead;</span><br><span class="line">        ListNode* fast = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (n-- &amp;&amp; fast != nullptr) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == nullptr) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != nullptr) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tem = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        delete tem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">()</span> &#123;<span class="comment">// 两两节点交换</span></span><br><span class="line">        ListNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != nullptr &amp;&amp; cur-&gt;next-&gt;next != nullptr) &#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;               <span class="comment">// 记录临时节点</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;  <span class="comment">// 记录临时节点</span></span><br><span class="line"></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;   <span class="comment">// 步骤一</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp;         <span class="comment">// 步骤二</span></span><br><span class="line">            cur-&gt;next-&gt;next-&gt;next = tmp1;  <span class="comment">// 步骤三</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next;  <span class="comment">// cur移动两位，准备下一轮交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _size;</span><br><span class="line">        ListNode* _dummyHead;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyLinkedList linkedList;</span><br><span class="line">    linkedList.addAtHead(<span class="number">1</span>);</span><br><span class="line">    linkedList.addAtHead(<span class="number">2</span>);</span><br><span class="line">    linkedList.addAtHead(<span class="number">3</span>);</span><br><span class="line">    linkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// linkedList.reverseList();</span></span><br><span class="line">    linkedList.printLinkedList();</span><br><span class="line">    <span class="comment">// cout&lt;&lt;linkedList.get(2);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p></blockquote><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><img src="https://camo.githubusercontent.com/36cf9298bccf54091dbcabb9ede884bf98d5b2f6f04bd89a36ac2904b26d0971/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303865476d5a456c7931676e7266316f626f757067333067793063343471702e676966" alt="img" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        tmp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记-二叉树</title>
      <link href="/2024/01/01/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2024/01/01/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="刷题笔记-二叉树"><a href="#刷题笔记-二叉树" class="headerlink" title="刷题笔记-二叉树"></a>刷题笔记-二叉树</h1><ul><li>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，所以map、set的增删操作时间时间复杂度是logn</li><li>unordered_map、unordered_map底层实现是哈希表</li><li>顺序存储完全二叉树: 如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2</li><li>深度优先遍历(前中后序)一般通过递归实现, 也可通过栈使用非递归实现</li><li>广度优先遍历(层次遍历)一般通过队列实现</li></ul><h2 id="二叉树创建"><a href="#二叉树创建" class="headerlink" title="二叉树创建"></a>二叉树创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">CreateTree</span><span class="params">(Integer[] c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size &gt;= c.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">var</span> <span class="operator">=</span> c[size++];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="keyword">var</span>);</span><br><span class="line">    System.out.println(<span class="keyword">var</span>);</span><br><span class="line">    node.left = CreateTree(c);</span><br><span class="line">    node.right = CreateTree(c);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="深度优先遍历-递归"><a href="#深度优先遍历-递归" class="headerlink" title="深度优先遍历(递归)"></a>深度优先遍历(递归)</h2><ul><li><p>前序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="深度优先遍历-非递归-利用栈"><a href="#深度优先遍历-非递归-利用栈" class="headerlink" title="深度优先遍历(非递归, 利用栈)"></a>深度优先遍历(非递归, 利用栈)</h2><ul><li><p>前序</p><blockquote><p>较为简单, 因为对每一个节点的孩子来说, 他都是根节点, 在访问到它时, 直接将他的值放入数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        result.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序</p><blockquote><p>较前序复杂, 因为访问到一个节点时, 需先放入栈中, 直到它的左子树为空, 才弹出将它的值放入数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            result.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序</p><blockquote><p>利用一个规律–<strong>根右左</strong>的遍历结果反转一下就是后序遍历结果</p><p>为什么这样做呢, 因为这样跟前序一样简单</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        result.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="深度优先遍历一致性代码-非递归"><a href="#深度优先遍历一致性代码-非递归" class="headerlink" title="深度优先遍历一致性代码(非递归)"></a>深度优先遍历一致性代码(非递归)</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">  ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">           node = stack.peek();</span><br><span class="line">      <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">          stack.pop();</span><br><span class="line">          <span class="comment">// 后序遍历</span></span><br><span class="line">          stack.push(node);</span><br><span class="line">          stack.push(<span class="literal">null</span>);</span><br><span class="line">          <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">              stack.push(node.right);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">              stack.push(node.left);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 后序遍历 从下向上看, 左右根, 为后序</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          stack.pop();</span><br><span class="line">          node = stack.pop();</span><br><span class="line">          result.add(node.val);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他遍历顺序只需调整一下注释部分的顺序</p></blockquote><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">        ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            al.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        resList.add(al);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="广度优先遍历-返回一维数组-如果节点没有左孩子或右孩子-为null"><a href="#广度优先遍历-返回一维数组-如果节点没有左孩子或右孩子-为null" class="headerlink" title="广度优先遍历(返回一维数组, 如果节点没有左孩子或右孩子, 为null)"></a>广度优先遍历(返回一维数组, 如果节点没有左孩子或右孩子, 为null)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flagR</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        resList.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (flagR) resList.add(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">            flagR = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">            resList.add(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">        res=[]</span><br><span class="line">        l=deque()</span><br><span class="line">        l.append(root)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(l)!=<span class="number">0</span>:</span><br><span class="line">            root=l.popleft()</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                l.append(root.left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(<span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                l.append(root.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t=TreeNode(<span class="number">3</span>)</span><br><span class="line">t.left=TreeNode(<span class="number">9</span>)</span><br><span class="line">t.right=TreeNode(<span class="number">20</span>)</span><br><span class="line">t.right.left=TreeNode(<span class="number">15</span>)</span><br><span class="line">t.right.right=TreeNode(<span class="number">7</span>)</span><br><span class="line">s = Solution()</span><br><span class="line">s.levelOrder(t)</span><br></pre></td></tr></table></figure><blockquote><p>貌似和上边的Java代码效果一样…</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220804110825088.png" alt="image-20220804110825088"></p><h2 id="最底层-最左边-节点的值"><a href="#最底层-最左边-节点的值" class="headerlink" title="最底层 最左边 节点的值"></a>最底层 最左边 节点的值</h2><p><img src="https://oss.zaqai.com/img/image-20220622151349281.png" alt="image-20220622151349281"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          root = queue.poll();</span><br><span class="line">          <span class="keyword">if</span> (root.right != <span class="literal">null</span>) queue.offer(root.right);</span><br><span class="line">          <span class="keyword">if</span> (root.left != <span class="literal">null</span>) queue.offer(root.left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root.val;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>队列广度遍历，先放右孩子，保证最后出来是最左</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; depth)&#123;</span><br><span class="line">                max = depth;</span><br><span class="line">                res = node.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left, depth + <span class="number">1</span>);</span><br><span class="line">        dfs(node.right, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>深度搜索＋递归, 一条路行到黑, 只要不是叶子节点, 就递归左 右, 碰到叶子节点再比较深度, 由于同一层次最左边的值先赋值给res, 右边深度相等, 不会赋值.</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于计网的笔记</title>
      <link href="/2024/01/01/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%BD%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%BD%91%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于计网的笔记"><a href="#关于计网的笔记" class="headerlink" title="关于计网的笔记"></a>关于计网的笔记</h1><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><h3 id="TLS握手过程"><a href="#TLS握手过程" class="headerlink" title="TLS握手过程"></a>TLS握手过程</h3><p><img src="https://oss.zaqai.com/img/image-20220527090819147.png"></p><ul><li>Client Hello:报文中选项字段包含客户端支持的 SSL的指定版本和所使用的加密算法等</li><li>Server Hello: 根据客户端的加密组件筛选自己的加密组件发送, 发送 Certificate 报文。 报文中包含公开密钥证书。服务器同时还提供了一个用作产生密钥的随机数</li><li>Client Key Exchange: 证书可信, 客户端用随机数和 hash 签名生成一串对称密钥, 用 crt 公钥对对称密钥进行加密</li><li>服务端解密后回应</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>先三次握手建立TCP连接, 再TLS握手</li></ul><p><img src="https://oss.zaqai.com/img/image-20220527090052005.png" alt="image-20220527090052005"></p><ul><li><p>1.2四次握手 1.3两次就可以</p><p><img src="https://oss.zaqai.com/img/image-20220527090234953.png" alt="image-20220527090234953"></p></li><li><p><strong>HTTPS 中的 TLS 握手过程可以同时进行三次握手</strong>必须满足两个条件</p><ul><li>客户端和服务端都开启了 TCP Fast Open 功能，且 TLS 版本是 1.3；</li><li>客户端和服务端已经完成过一次通信。</li></ul></li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="SYN洪泛攻击"><a href="#SYN洪泛攻击" class="headerlink" title="SYN洪泛攻击"></a>SYN洪泛攻击</h3><ul><li>原理: 只有两次握手</li><li>客户端发送SYN后, 服务器收到后进入<strong>半开连接</strong>状态, 此时会为这次连接分配资源, 如果没有收到第三次握手, 会等待一段时间才释放资源</li><li>防止手段: <strong>SYN cookie</strong><ul><li>在二次握手时服务器不分配资源, 而是生成一个初始的序列号：该序列号是 “SYN报文段中的源和目的IP地址与端口号以及一个只有服务器自己知道的秘密数 (secret number) ” 的hash值</li><li>如果没有第三次, 对服务器无影响, 如果有第三次, 服务器根据ip和端口号以及秘密数计算出序列号, 加一后和ACK的确认号对比, 相同才创建连接</li></ul></li></ul><h3 id="两次握手会造成什么"><a href="#两次握手会造成什么" class="headerlink" title="两次握手会造成什么"></a>两次握手会造成什么</h3><ul><li>在这种情况下, 服务端回复SYN+ACK便认为连接建立, 就会发送数据</li><li>如果客户端第一次的SYN没有及时得到响应, 便会第二次SYN, 第二次正常传输完成后, 第一次的SYN到达服务器, 这时客户端并不需要连接, 处于CLOSED状态, 对于服务端发来的数据也是直接丢弃(当然客户端发现服务端总是给自己发送, 而自己总是丢弃, 会发送<strong>RST</strong>终止连接)</li><li>在三次握手的情况下， 可以在服务端建立连接之前，可以阻止掉了历史连接，从而保证建立的连接不是历史连接。</li><li><img src="https://oss.zaqai.com/img/image-20220527094123394.png" alt="image-20220527094123394"></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul><li>TCP 的第一次和第二次握手是不能够携带数据的, 但由于是SYN报文(SYN标志位为1), 会占用一个序列号</li><li>第三次的ACK, 不占用序列号, 可以携带数据, 如果不携带数据, 客户端发送的下一个seq和第三次的seq相同</li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><h3 id="冷知识"><a href="#冷知识" class="headerlink" title="冷知识"></a>冷知识</h3><ul><li><p>四次挥手中，不管是程序主动执行close()，还是进程被杀，都有可能发出第一次挥手FIN包。如果机器上FIN-WAIT-2状态特别多，一般是因为对端一直不执行close()方法发出第三次挥手。</p></li><li><p>Close()会同时关闭发送和接收消息的功能。shutdown() 能单独关闭发送或接受消息。</p></li><li><p>第二、第三次挥手，是有可能合在一起的(FIN+ACK 或 FIN+ACK+数据)。于是四次挥手就变成三次挥手了。</p></li><li><p>同一个socket自己连自己，会产生TCP自连接，自连接的挥手是两次挥手。</p></li><li><p>没有listen，两个客户端之间也能建立连接。这种情况叫TCP同时打开，它由四次握手产生。</p></li><li><p>参考<a href="https://blog.csdn.net/WantFlyDaCheng/article/details/119922543">活久见！TCP两次挥手，你见过吗？那四次握手呢？_程序员乔戈里的博客-CSDN博客</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些有用的显示服务器信息的脚本</title>
      <link href="/2024/01/01/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/01/01/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="一些有用的显示服务器信息的脚本"><a href="#一些有用的显示服务器信息的脚本" class="headerlink" title="一些有用的显示服务器信息的脚本"></a>一些有用的显示服务器信息的脚本</h1><blockquote><p>ssh登录服务器的时候最先看到的便是一些欢迎的信息, 但默认的欢迎信息可以说是毫无用处, 我们便可以自行修改来展示一些有用的信息.</p></blockquote><p><img src="https://oss.zaqai.com/img/202312302351397.png" alt="image-20231230235121076"></p><h2 id="motd"><a href="#motd" class="headerlink" title="motd"></a>motd</h2><p>motd, 全称Message Of The Day, 是Linux中发送问候消息的功能, 每次任意用户登录时都会触发motd服务的功能, 这个功能的脚本几乎都是使用root 权限来启动的</p><p>脚本位置在<code>/etc/update-motd.d</code>, 不想执行某些脚本, 可以直接取消执行权限</p><p><img src="https://oss.zaqai.com/img/202312302355753.png" alt="image-20231230235518657"></p><h2 id="10-hostname-color"><a href="#10-hostname-color" class="headerlink" title="10-hostname-color"></a>10-hostname-color</h2><p>类似于logo banner之类的东西, 比如Spring Boot项目启动后就会显示<code>Spring Boot</code>的logo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/bin/figlet <span class="string">&quot;<span class="subst">$(hostname)</span>&quot;</span> | /usr/bin/lolcat -f</span><br></pre></td></tr></table></figure><h2 id="10-uname"><a href="#10-uname" class="headerlink" title="10-uname"></a>10-uname</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">uname</span> -snrvm</span><br></pre></td></tr></table></figure><h2 id="20-sysinfo"><a href="#20-sysinfo" class="headerlink" title="20-sysinfo"></a>20-sysinfo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get load averages</span></span><br><span class="line">IFS=<span class="string">&quot; &quot;</span> <span class="built_in">read</span> LOAD1 LOAD5 LOAD15 &lt;&lt;&lt;$(<span class="built_in">cat</span> /proc/loadavg | awk <span class="string">&#x27;&#123; print $1,$2,$3 &#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># get free memory</span></span><br><span class="line">IFS=<span class="string">&quot; &quot;</span> <span class="built_in">read</span> USED AVAIL TOTAL &lt;&lt;&lt;$(free -htm | sed -n <span class="string">&#x27;2p&#x27;</span> | awk &#123;<span class="string">&#x27;print $3,$7,$2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># get processes</span></span><br><span class="line">PROCESS=`ps -eo user=|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c | awk <span class="string">&#x27;&#123; print $2 &quot; &quot; $1 &#125;&#x27;</span>`</span><br><span class="line">PROCESS_ALL=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125; | awk <span class="string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`</span><br><span class="line">PROCESS_ROOT=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| grep root | awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125;`</span><br><span class="line">PROCESS_USER=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PROCESS</span>&quot;</span>| grep -v root | awk &#123;<span class="string">&#x27;print $2&#x27;</span>&#125; | awk <span class="string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># get processors</span></span><br><span class="line">PROCESSOR_NAME=`grep <span class="string">&quot;model name&quot;</span> /proc/cpuinfo | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f3- | awk &#123;<span class="string">&#x27;print $0&#x27;</span>&#125; | <span class="built_in">head</span> -1`</span><br><span class="line">PROCESSOR_COUNT=`grep -ioP <span class="string">&#x27;processor\t:&#x27;</span> /proc/cpuinfo | <span class="built_in">wc</span> -l`</span><br><span class="line"></span><br><span class="line">W=<span class="string">&quot;\e[0;39m&quot;</span></span><br><span class="line">G=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;</span></span><br><span class="line"><span class="string"><span class="variable">$&#123;W&#125;</span>system info:</span></span><br><span class="line"><span class="string"><span class="variable">$W</span>  Distro......: <span class="variable">$W</span>`cat /etc/*release | grep &quot;</span>PRETTY_NAME<span class="string">&quot; | cut -d &quot;</span>=<span class="string">&quot; -f 2- | sed &#x27;s/&quot;</span>//g<span class="string">&#x27;`</span></span><br><span class="line"><span class="string">$W  Kernel......: $W`uname -sr`</span></span><br><span class="line"><span class="string">$W  Uptime......: $W`uptime -p`</span></span><br><span class="line"><span class="string">$W  Load........: $G$LOAD1$W (1m), $G$LOAD5$W (5m), $G$LOAD15$W (15m)</span></span><br><span class="line"><span class="string">$W  Processes...:$W $G$PROCESS_ROOT$W (root), $G$PROCESS_USER$W (user), $G$PROCESS_ALL$W (total)</span></span><br><span class="line"><span class="string">$W  CPU.........: $W$PROCESSOR_NAME ($G$PROCESSOR_COUNT$W vCPU)</span></span><br><span class="line"><span class="string">$W  Memory......: $G$USED$W used, $G$AVAIL$W avail, $G$TOTAL$W total$W &quot;</span></span><br></pre></td></tr></table></figure><h2 id="30-gpu-utility"><a href="#30-gpu-utility" class="headerlink" title="30-gpu-utility"></a>30-gpu-utility</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\ngpu utility:\n&quot;</span></span><br><span class="line">GPUNUM=`nvidia-smi -q|grep Attached|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 $((<span class="variable">$GPUNUM</span>-<span class="number">1</span>)))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;GPU<span class="variable">$i</span> Utilization: &quot;</span>`nvidia-smi -q -i <span class="variable">$i</span> -d Utilization|sed -n <span class="string">&quot;11p&quot;</span>|awk <span class="string">&#x27;&#123;print $3$4&#125;&#x27;</span>`\</span><br><span class="line">         <span class="string">&quot;Memory Used: &quot;</span>`nvidia-smi -q -i <span class="variable">$i</span> -d Utilization|sed -n <span class="string">&quot;12p&quot;</span>|awk <span class="string">&#x27;&#123;print $3$4&#125;&#x27;</span>`;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="35-diskspace"><a href="#35-diskspace" class="headerlink" title="35-diskspace"></a>35-diskspace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">max_usage=90</span><br><span class="line">bar_width=50</span><br><span class="line"><span class="comment"># colors</span></span><br><span class="line">white=<span class="string">&quot;\e[39m&quot;</span></span><br><span class="line">green=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line">red=<span class="string">&quot;\e[1;31m&quot;</span></span><br><span class="line">dim=<span class="string">&quot;\e[2m&quot;</span></span><br><span class="line">undim=<span class="string">&quot;\e[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disk usage: ignore zfs, squashfs &amp; tmpfs</span></span><br><span class="line"><span class="built_in">mapfile</span> -t dfs &lt; &lt;(<span class="built_in">df</span> -H -x zfs -x squashfs -x tmpfs -x devtmpfs -x overlay --output=target,pcent,size | <span class="built_in">tail</span> -n+2)</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\ndisk usage:\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;dfs[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># get disk usage</span></span><br><span class="line">    usage=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | sed <span class="string">&#x27;s/%//&#x27;</span>)</span><br><span class="line">    used_width=$(((<span class="variable">$usage</span>*<span class="variable">$bar_width</span>)/<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># color is green if usage &lt; max_usage, else red</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;usage&#125;</span>&quot;</span> -ge <span class="string">&quot;<span class="variable">$&#123;max_usage&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        color=<span class="variable">$red</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color=<span class="variable">$green</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># print green/red bar until used_width</span></span><br><span class="line">    bar=<span class="string">&quot;[<span class="variable">$&#123;color&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="variable">$used_width</span>; i++)); <span class="keyword">do</span></span><br><span class="line">        bar+=<span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="comment"># print dimmmed bar until end</span></span><br><span class="line">    bar+=<span class="string">&quot;<span class="variable">$&#123;white&#125;</span><span class="variable">$&#123;dim&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="variable">$used_width</span>; i&lt;<span class="variable">$bar_width</span>; i++)); <span class="keyword">do</span></span><br><span class="line">        bar+=<span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    bar+=<span class="string">&quot;<span class="variable">$&#123;undim&#125;</span>]&quot;</span></span><br><span class="line">    <span class="comment"># print usage line &amp; bar</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;line&#125;</span>&quot;</span> | awk <span class="string">&#x27;&#123; printf(&quot;%-31s%+3s used out of %+4s\n&quot;, $1, $2, $3); &#125;&#x27;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;bar&#125;</span>&quot;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="40-services"><a href="#40-services" class="headerlink" title="40-services"></a>40-services</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set column width</span></span><br><span class="line">COLUMNS=3</span><br><span class="line"><span class="comment"># colors</span></span><br><span class="line">green=<span class="string">&quot;\e[1;32m&quot;</span></span><br><span class="line">red=<span class="string">&quot;\e[1;31m&quot;</span></span><br><span class="line">undim=<span class="string">&quot;\e[0m&quot;</span></span><br><span class="line"></span><br><span class="line">services=(<span class="string">&quot;ssh&quot;</span> <span class="string">&quot;docker&quot;</span> <span class="string">&quot;apache2&quot;</span> <span class="string">&quot;nginx&quot;</span> <span class="string">&quot;mysql&quot;</span> <span class="string">&quot;networking&quot;</span> <span class="string">&quot;ufw&quot;</span> <span class="string">&quot;xrdp&quot;</span>)</span><br><span class="line"><span class="comment"># sort services</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span> services=($(<span class="built_in">sort</span> &lt;&lt;&lt;<span class="string">&quot;<span class="variable">$&#123;services[*]&#125;</span>&quot;</span>))</span><br><span class="line"><span class="built_in">unset</span> IFS</span><br><span class="line"></span><br><span class="line">service_status=()</span><br><span class="line"><span class="comment"># get status of all services</span></span><br><span class="line"><span class="keyword">for</span> service <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;services[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    service_status+=($(systemctl is-active <span class="string">&quot;<span class="variable">$service</span>&quot;</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">out=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!services[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># color green if service is active, else red</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;service_status[$i]&#125;</span>&quot;</span> == <span class="string">&quot;active&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        out+=<span class="string">&quot;<span class="variable">$&#123;services[$i]&#125;</span>:,<span class="variable">$&#123;green&#125;</span><span class="variable">$&#123;service_status[$i]&#125;</span><span class="variable">$&#123;undim&#125;</span>,&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        out+=<span class="string">&quot;<span class="variable">$&#123;services[$i]&#125;</span>:,<span class="variable">$&#123;red&#125;</span><span class="variable">$&#123;service_status[$i]&#125;</span><span class="variable">$&#123;undim&#125;</span>,&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># insert \n every $COLUMNS column</span></span><br><span class="line">    <span class="keyword">if</span> [ $(((<span class="variable">$i</span>+<span class="number">1</span>) % <span class="variable">$COLUMNS</span>)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        out+=<span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">out+=<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\nservices:\n&quot;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$out</span>&quot;</span> | column -ts $<span class="string">&#x27;,&#x27;</span> | sed -e <span class="string">&#x27;s/^/  /&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【狂神说Java】网络编程实战讲解</title>
      <link href="/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/"/>
      <url>/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="【狂神说Java】网络编程实战讲解"><a href="#【狂神说Java】网络编程实战讲解" class="headerlink" title="【狂神说Java】网络编程实战讲解"></a>【狂神说Java】网络编程实战讲解</h1><h2 id="tcpChat"><a href="#tcpChat" class="headerlink" title="tcpChat"></a>tcpChat</h2><blockquote><p>客户端循环输入时不知道哪些东西该放进去, 如果不用<code>os.close()</code>, 字节只是写进了流中, 没有发送, 服务端接收不到, <code>os.flush()</code>也不行</p></blockquote><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            os.write(msg.getBytes());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                os.close();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            socket = ss.accept();</span><br><span class="line"></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(byteArrayOutputStream.toString())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCPFileUpload"><a href="#TCPFileUpload" class="headerlink" title="TCPFileUpload"></a>TCPFileUpload</h2><h3 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPUpload.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\17513\\Pictures\\锁屏壁纸\\dc7d4e3bf3b1e123eb082393cf104bb6bb4488f235a0fb2f35fbc5d24a9658b5.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.TCPUpload.TCPChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;ewceive.png&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UDPSendAndReceive"><a href="#UDPSendAndReceive" class="headerlink" title="UDPSendAndReceive"></a>UDPSendAndReceive</h2><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSend</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length).trim();</span><br><span class="line"><span class="comment">//            System.out.println(data.length+&quot;LLL&quot;);</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UDP互相聊天"><a href="#UDP互相聊天" class="headerlink" title="UDP互相聊天"></a>UDP互相聊天</h2><h2 id="TalkSend-java"><a href="#TalkSend-java" class="headerlink" title="TalkSend.java"></a>TalkSend.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkSend</span><span class="params">(<span class="type">int</span> fromPort, String toIP, <span class="type">int</span> toPort)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(fromPort);</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg = reader.readLine();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP, <span class="built_in">this</span>.toPort));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkReceive-java"><a href="#TalkReceive-java" class="headerlink" title="TalkReceive.java"></a>TalkReceive.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkReceive</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkReceive</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length).trim();</span><br><span class="line"><span class="comment">//            System.out.println(data.length+&quot;LLL&quot;);</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bye&quot;</span>.equals(msg)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkMain1-java"><a href="#TalkMain1-java" class="headerlink" title="TalkMain1.java"></a>TalkMain1.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkMain1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">7777</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>), <span class="string">&quot;meng&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">8888</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TalkMain2-java"><a href="#TalkMain2-java" class="headerlink" title="TalkMain2.java"></a>TalkMain2.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkMain2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">5555</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;jk&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">9999</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URLDownload"><a href="#URLDownload" class="headerlink" title="URLDownload"></a>URLDownload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.socket.UDP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDownload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://pic1.zhimg.com/v2-f6290c8c1e1c722ea275646d4f780309_qhd.jpg?source=172ae18b&quot;</span>);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;tu.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【狂神说Java】注解和反射</title>
      <link href="/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="【狂神说Java】注解和反射"><a href="#【狂神说Java】注解和反射" class="headerlink" title="【狂神说Java】注解和反射"></a>【狂神说Java】注解和反射</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="https://oss.zaqai.com/img/image-20220208113418244.png" alt="image-20220208113418244"></p><p><img src="https://oss.zaqai.com/img/image-20220208114008654.png" alt="image-20220208114008654"></p><p><img src="https://oss.zaqai.com/img/image-20220208130546932.png" alt="image-20220208130546932"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;zq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(age = 18)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation2(&quot;jamay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="https://oss.zaqai.com/img/image-20220208134731372.png" alt="image-20220208134731372"><img src="https://oss.zaqai.com/img/image-20220208140641045.png" alt="image-20220208140641045"></p><p><img src="https://oss.zaqai.com/img/image-20220208141021317.png" alt="image-20220208141021317"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">// 一个类只有一个Class对象, 表现为以下hashcode相同</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象.getClass()</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>().getClass();</span><br><span class="line">        <span class="comment">// 类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> user.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本内置类型.TYPE</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">user</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/image-20220208144222455.png" alt="image-20220208144222455"></p><p><img src="https://oss.zaqai.com/img/image-20220208151043760.png" alt="image-20220208151043760"> </p><p><img src="https://oss.zaqai.com/img/image-20220208153325517.png" alt="image-20220208153325517">  </p><p><img src="https://oss.zaqai.com/img/image-20220208153801345.png" alt="image-20220208153801345"></p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ul><li><p>原理:</p><ul><li>如果一个类加载器收到了类加载请求，它并不会自己先加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器；</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</li><li>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</li></ul></li><li><p>作用:</p><ul><li>避免类的重复加载(最开始时没有缓存, 逐步向上, 再向下, 某一层将类加载并缓存. 再次加载时, 已有缓存, 不再向上询问)</li><li>保护程序安全，防止核心API被随意篡改</li></ul></li></ul><p><img src="https://oss.zaqai.com/img/image-20220208155402948.png" alt="image-20220208155402948"></p><ul><li>打破双亲委派<ul><li>自定义类加载器，重写loadClass方法</li><li>使用线程上下文类加载器</li></ul></li></ul><h3 id="有了Class对象-能做什么"><a href="#有了Class对象-能做什么" class="headerlink" title="有了Class对象, 能做什么"></a>有了Class对象, 能做什么</h3><p><img src="https://oss.zaqai.com/img/image-20220208161345114.png" alt="image-20220208161345114"></p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line"><span class="type">user</span> <span class="variable">u</span> <span class="operator">=</span> (user)c1.newInstance(); <span class="comment">// 调用user的无参构造, 如果没有无参构造会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> (user)constructor.newInstance(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);<span class="comment">// 通过构造器来创建对象</span></span><br><span class="line">System.out.println(zq);</span><br></pre></td></tr></table></figure><h4 id="通过反射调用类中的方法"><a href="#通过反射调用类中的方法" class="headerlink" title="通过反射调用类中的方法"></a>通过反射调用类中的方法</h4><p><img src="https://oss.zaqai.com/img/image-20220208170004387.png" alt="image-20220208170004387"></p><p><img src="https://oss.zaqai.com/img/image-20220208170041825.png" alt="image-20220208170041825"></p><p><img src="https://oss.zaqai.com/img/image-20220208170118010.png" alt="image-20220208170118010"></p><blockquote><p>设置为true可提高效率, 当然远不及直接用正常的方法(new对象,对象调用)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Use</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.user&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> (user) constructor.newInstance(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(zq, <span class="string">&quot;jamay&quot;</span>);</span><br><span class="line">        System.out.println(zq);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        id.setAccessible(<span class="literal">true</span>);<span class="comment">// 关闭安全检测. 才可以操作私有属性</span></span><br><span class="line">        id.set(zq, <span class="number">20</span>);</span><br><span class="line">        System.out.println(zq);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EfficiencyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            zq.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;正常方式10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> zq.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(zq, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">user</span> <span class="variable">zq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;zq&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> zq.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(zq, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式关闭检测10亿次用时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常方式10亿次用时9ms</span></span><br><span class="line"><span class="comment">//反射方式10亿次用时2531ms</span></span><br><span class="line"><span class="comment">//反射方式关闭检测10亿次用时1318ms</span></span><br></pre></td></tr></table></figure><h2 id="通过反射操作注解"><a href="#通过反射操作注解" class="headerlink" title="通过反射操作注解"></a>通过反射操作注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Table &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Column &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAndReflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zq.Reflect.Student&quot;</span>);</span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">annotation</span> <span class="operator">=</span> (Table) c1.getAnnotation(Table.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Column</span> <span class="variable">a</span> <span class="operator">=</span> name.getAnnotation(Column.class);</span><br><span class="line">        System.out.println(a.name());</span><br><span class="line">        System.out.println(a.type());</span><br><span class="line">        System.out.println(a.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(&quot;db_student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Column(name = &quot;Column_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Column(name = &quot;Column_name&quot;, type = &quot;String&quot;, length = 10)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*@com.zq.Reflect.Table(value=db_student)</span></span><br><span class="line"><span class="comment">db_student</span></span><br><span class="line"><span class="comment">Column_name</span></span><br><span class="line"><span class="comment">String</span></span><br><span class="line"><span class="comment">10*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【狂神说Java】多线程详解笔记</title>
      <link href="/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="【狂神说Java】多线程详解笔记"><a href="#【狂神说Java】多线程详解笔记" class="headerlink" title="【狂神说Java】多线程详解笔记"></a>【狂神说Java】多线程详解笔记</h1><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://oss.zaqai.com/img/image-20220203145906268.png" alt="image-20220203145906268"></p><h2 id="java类的方式"><a href="#java类的方式" class="headerlink" title="java类的方式"></a>java类的方式</h2><ul><li><p>外部类: 在主函数所在的类的外部定义的类, 若是在同一文件, 直接new; 若是不同文件, 导包再new</p></li><li><p>静态内部类: 在主函数所在的类的内部且在主函数外部定义的类, 直接new</p><blockquote><p>因为main是static, 所以他也要是static</p></blockquote></li><li><p>局部类: 在主函数内定义的类, 直接new</p></li><li><p>匿名内部类: <code>Interface o = new Interface()&#123;类的定义&#125;</code>, 需先定义interface</p></li><li><p>lambda:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">as</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">as.run();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;System.out.println(<span class="string">&quot;as&quot;</span>)).start();</span><br></pre></td></tr></table></figure></li></ul><h2 id="线程休眠sleep"><a href="#线程休眠sleep" class="headerlink" title="线程休眠sleep"></a>线程休眠sleep</h2><p><code>Thread.sleep(1000);</code>单位为毫秒</p><h2 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h2><ul><li><p>调用方式: 在线程内<code>Thread.yield();</code></p></li><li><p>将线程由运行态转为就绪态, 此时重新决定哪个线程获取cpu, 可能还是刚才的进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yield</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">myYield</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myYield</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(y, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(y, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;start&quot;</span>);</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul><li><p>阻塞其他线程, 强制该线程运行, 类似插队</p></li><li><p>调用: <code>thread.join();</code>注意是线程对象, 不是类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">join</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">join</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">join</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(j);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main-&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip-&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p><img src="https://oss.zaqai.com/img/image-20220203150103757.png" alt="image-20220203150103757"></p><blockquote><p>默认为5, main线程优先级为5</p></blockquote><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p><img src="https://oss.zaqai.com/img/image-20220207134005679.png" alt="image-20220207134005679"></p><ul><li>用户线程执行完后,虚拟机即关闭,尽管守护线程没有执行完毕</li><li>使用: <code>thread.setDaemon(&quot;true&quot;);</code>默认为false</li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><img src="https://oss.zaqai.com/img/image-20220203152040944.png" alt="image-20220203152040944"></p><p><img src="https://oss.zaqai.com/img/image-20220203152609118.png" alt="image-20220203152609118"></p><ul><li>线程同步形成条件: &#x3D;&#x3D;队列+锁&#x3D;&#x3D;</li><li>sleep不会释放锁</li></ul><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><img src="https://oss.zaqai.com/img/image-20220203175658674.png" alt="image-20220203175658674"></p><p><img src="https://oss.zaqai.com/img/image-20220203175715082.png" alt="image-20220203175715082"></p><ul><li>同步方法默认锁的对象是this</li><li>可以用同步块完全替代同步方法</li></ul><h2 id="死锁-活锁-饥饿"><a href="#死锁-活锁-饥饿" class="headerlink" title="死锁 活锁 饥饿"></a>死锁 活锁 饥饿</h2><h3 id="死锁-两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁"><a href="#死锁-两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁" class="headerlink" title="死锁: 两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁"></a>死锁: 两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁</h3><ul><li>形象的例子: 两个小朋友分别拿着对方喜欢的玩具, 而且谁都不愿先把手中的玩具先给对方</li><li>死锁通常发生在多个线程同时但以不同的顺序请求同一组锁的时候</li><li>死锁会让你的程序挂起无法完成任务</li><li>解决方法: 只能通过中止并重启的方式来让程序重新执行</li><li>在程序中, 双方不会协商, 只会一直僵持, 程序一直阻塞</li></ul><blockquote><p><strong>死锁的四个必要条件:</strong></p><p><strong>1）互斥条件</strong>：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。<br> <strong>2）请求和保持条件</strong>：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。<br> <strong>3）不剥夺条件</strong>：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。<br> <strong>4）环路等待条件</strong>：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p></blockquote><blockquote><p><strong>预防死锁–破坏死锁的四个必要条件</strong></p><p><strong>破坏互斥条件</strong>：使资源同时访问而非互斥使用，就没有进程会阻塞在资源上，从而不发生死锁。</p><p><strong>破坏请求和保持条件</strong>：采用静态分配的方式，静态分配的方式是指进程必须在执行之前就申请需要的全部资源，且直至所要的资源全部得到满足后才开始执行，只要有一个资源得不到分配，也不给这个进程分配其他的资源。</p><p><strong>破坏不剥夺条件</strong>：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源，但是只适用于内存和处理器资源。</p><p><strong>破坏循环等待条件</strong>：给系统的所有资源编号，规定进程请求所需资源的顺序必须按照资源的编号依次进行。</p></blockquote><h3 id="活锁-活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败-线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进"><a href="#活锁-活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败-线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进" class="headerlink" title="活锁: 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败, 线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进"></a>活锁: 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败, <em>线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进</em></h3><ul><li>形象的例子: 两条车道上, 两人在同一车道相向行走, 发现对方阻碍自己的道路时, 两人都向另一条车道偏移, 结果还是会阻碍对方的道路(传说中的神默契), 这样一直僵持</li><li>活锁有可能自行解开</li><li>活锁可以认为是一种特殊的饥饿</li></ul><h3 id="饥饿-是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况"><a href="#饥饿-是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况" class="headerlink" title="饥饿: 是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况"></a>饥饿: 是指一个可运行的进程尽管能继续执行，但被调度器无限期地忽视，而不能被调度执行的情况</h3><ul><li>饥饿可以通过先来先服务资源分配策略来避免</li><li>优先级高的线程抢占资源, 导致优先级低的线程一直得不到资源</li><li>某个线程长期占用资源, 导致其他线程得不到资源</li></ul><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ReentrantLock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//放并发操作代码</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;抢到第&quot;</span> + ticketNum-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>性能比ssynchronized好</li><li>一般放在try-finally中, 不然容易出问题</li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p><img src="https://oss.zaqai.com/img/image-20220205203121807.png" alt="image-20220205203121807"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><img src="https://oss.zaqai.com/img/image-20220207113051618.png" alt="image-20220207113051618"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pool</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();   <span class="comment">//获取开始时间（毫秒）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            service.execute(mt);</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">//获取结束时间（毫秒）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行时间： &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果线程池大小小于开启的线程数, 则等待之前的线程执行完毕释放, 再执行新线程</p></blockquote><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread1</span>().start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread2</span>()).start();</span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">MyThread3</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> ft.get();</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1继承Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2实现Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3实现callable&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">520</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="一些扩展"><a href="#一些扩展" class="headerlink" title="一些扩展"></a>一些扩展</h2><ul><li>java中的锁Lock就是基于AbstractQueuedSynchronizer来实现的</li><li>在大多数情况下，我们写并发代码使用synchronized就足够了，而且使用synchronized也是首选</li><li>但是lock更加灵活</li><li><img src="https://oss.zaqai.com/img/image-20220207104526155.png" alt="image-20220207104526155"></li><li>lockInterruptibly方法可以响应中断，lock方法会阻塞线程直到获取到锁，而tryLock方法则会立刻返回，返回true代表获取锁成功，而返回false则说明获取不到锁</li><li>newCondition方法返回一个条件变量，一个条件变量也可以做线程间通信来同步线程。多个线程可以等待在同一个条件变量上，一些线程会在某些情况下通知等待在条件变量上的线程，而有些变量在某些情况下会加入到条件变量上的等待队列中去。</li><li>独占锁就是只能有一个线程获取到锁，其他线程必须在这个锁释放了锁之后才能竞争而获得锁</li><li>共享锁则可以允许多个线程获取到锁</li></ul><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><ul><li>是lock的子类</li><li>可重入性: 同一个线程可以多次获得锁，而不同线程依然不可多次获得锁</li><li>划分:<ul><li>公平锁: 保证等待时间最长的线程将优先获得锁</li><li>非公平锁: 并不会保证多个线程获得锁的顺序，并发性能表现更好，ReentrantLock默认使用非公平锁</li></ul></li></ul><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><ul><li>ArrayList的线程安全版本</li><li>CopyOnWriteArrayList是在有写操作的时候会copy一份数据，然后写完再设置成新的数据。CopyOnWriteArrayList适用于读多写少的并发场景</li><li>CopyOnWriteArraySet是线程安全版本的Set实现，它的内部通过一个CopyOnWriteArrayList来代理读写等操作，使得CopyOnWriteArraySet表现出了和CopyOnWriteArrayList一致的并发行为</li><li>使用了ReentrantLock来支持并发操作</li></ul><hr><h2 id="多线程中的三大特性"><a href="#多线程中的三大特性" class="headerlink" title="多线程中的三大特性"></a>多线程中的三大特性</h2><ul><li>原子性: 一个或多个操作，要么全部执行完成，要么就都不执行</li><li>可见性: 当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程就能够立即看到修改的值</li><li>有序性: 编译器可以对指令进行重排, 对单线程无影响, 但可能会影响多线程</li></ul><h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h2><ul><li>必须在synchronized 中执行</li><li>wait 必须暂停当前正在执行的线程，并释放资源锁，让其他线程可以有机会运行</li><li>notify&#x2F;notifyall：唤醒锁池中的线程，使之运行</li><li>调用wait方法后, 线程会放弃对象锁, 进入等待此对象的等待锁定池, 只有再次调用此对象的notify方法, 本线程才会进入对象锁池准备, 才有可能获取对象锁进入运行状态</li></ul><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><blockquote><p>在 java 中为了加快程序的运行效率，对一些变量的操作通常是在该线程的寄存器或是 CPU 缓存上进行的，之后才会同步到主存中，而加了 volatile 修饰符的变量则是直接读写主存</p></blockquote><p>volatile 虽然具有可见性但是并不能保证原子性, 所以不能替代Synchronize</p><p>Volatile在某些情况下性能优于Synchronize</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.jianshu.com/p/cd7a73e6bd78">Java CopyOnWriteArrayList详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/f47250702ee7">Java可重入锁详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/f47250702ee7">Java可重入锁详解 - 简书 (jianshu.com)</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zhou29笔记_nginx</title>
      <link href="/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_nginx/"/>
      <url>/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>正向代理：客户端向目标服务器发送请求，该请求被代理服务器拦截，由代理服务器向目标服务器发送请求，并将请求结果返回给客户端。客户端需配置代理服务器，代理的是客户端的请求。</p><p>eg：翻墙</p></blockquote><p>   反向代理：客户端向代理服务器发送请求，代理服务器根据策略将请求发给后台服务器，并将后台服务器返回结果发给客户端。反向代理服务器对客户端来说是透明的，客户端不需配置代理服务器，代理的是后台服务器</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><p>轮询（默认） </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">     server 192.168.0.14; </span><br><span class="line">     server 192.168.0.15;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p></li></ul><ul><li><p>weight </p><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">     server 192.168.0.14 weight=1;  </span><br><span class="line">     server 192.168.0.15 weight=10;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ip_hash </p><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以不用考虑分布式session的问题。</p></li></ul><pre><code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">    ip_hash;  </span><br><span class="line">    server 192.168.0.14:88;  </span><br><span class="line">    server 192.168.0.15:80;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></code></pre><ul><li><p>fair（第三方） </p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">    server 192.168.0.14:88;  </span><br><span class="line">    server 192.168.0.15:80;  </span><br><span class="line">    fair;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>url_hash</p><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">server squid1:3128; </span><br><span class="line">server squid2:3128; </span><br><span class="line">hash $request_uri; </span><br><span class="line">hash_method crc32; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>   动态资源（jsp、servlet）和静态资源（html、image）放在不同服务器</p><p>   动态资源指的是需要经过后台服务器加工的资源，静态资源相反。动静分离可以减轻后台服务器压力</p><h2 id="高可用并发集群"><a href="#高可用并发集群" class="headerlink" title="高可用并发集群"></a>高可用并发集群</h2><p>   设置主从服务器，利用keepalived，主服务器down掉，启用从服务器</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>nginx安装目录：/usr/local/nginx</p><p>配置文件：/usr/local/nginx/conf/nginx.conf</p><p>启动文件：/usr/local/nginx/sbin/nginx</p></li><li><p>启动 /usr/local/nginx/sbin/nginx</p></li><li><p>停止 /usr/local/nginx/sbin/nginx -s stop</p></li><li><p>/usr/local/nginx/sbin/nginx -s reload</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高校昇腾AI入门课实验报告</title>
      <link href="/2024/01/01/%E9%AB%98%E6%A0%A1%E6%98%87%E8%85%BEAI%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/01/01/%E9%AB%98%E6%A0%A1%E6%98%87%E8%85%BEAI%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1>高校昇腾AI入门课实验报告</h1><blockquote><p>课程: 深度学习及应用(田智强)</p></blockquote><h2 id="A-模型迁移">A. 模型迁移</h2><p>AICORE使用率大于0:</p><p><img src="https://oss.zaqai.com/img/202312261433732.png" alt="image-20231226143314678"></p><p>训练代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch_npu</span><br><span class="line"><span class="keyword">from</span> torch_npu.npu <span class="keyword">import</span> amp <span class="comment"># 导入AMP模块</span></span><br><span class="line"><span class="keyword">from</span> torch_npu.contrib <span class="keyword">import</span> transfer_to_npu    <span class="comment"># 使能自动迁移</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化运行device</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN, self).__init__()</span><br><span class="line">        self.net = nn.Sequential(</span><br><span class="line">            <span class="comment"># 卷积层</span></span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">16</span>,</span><br><span class="line">                      kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                      stride=(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                      padding=<span class="number">1</span>),</span><br><span class="line">            <span class="comment"># 池化层</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            <span class="comment"># 卷积层</span></span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="comment"># 池化层</span></span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            <span class="comment"># 将多维输入一维化</span></span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">32</span>*<span class="number">7</span>*<span class="number">7</span>, <span class="number">16</span>),</span><br><span class="line">            <span class="comment"># 激活函数</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">16</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.net(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载数据集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;mnist&#x27;</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练相关参数</span></span><br><span class="line">batch_size = <span class="number">64</span>   </span><br><span class="line">model = CNN().to(device)  <span class="comment"># 定义模型</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=batch_size)    <span class="comment"># 定义DataLoader</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss().to(device)    <span class="comment"># 定义损失函数</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.1</span>)    <span class="comment"># 定义优化器</span></span><br><span class="line">scaler = amp.GradScaler(init_scale=<span class="number">2.</span>**<span class="number">10</span>)    <span class="comment"># 在模型、优化器定义之后，定义GradScaler</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 设置循环次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置循环</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="keyword">for</span> imgs, labels <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        start_time = time.time()    <span class="comment"># 记录训练开始时间</span></span><br><span class="line">        imgs = imgs.to(device)    <span class="comment"># 把img数据放到指定NPU上</span></span><br><span class="line">        labels = labels.to(device)    <span class="comment"># 把label数据放到指定NPU上</span></span><br><span class="line">        <span class="keyword">with</span> amp.autocast():</span><br><span class="line">            outputs = model(imgs)    <span class="comment"># 前向计算</span></span><br><span class="line">            loss = loss_func(outputs, labels)    <span class="comment"># 损失函数计算</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 进行反向传播前后的loss缩放、参数更新</span></span><br><span class="line">        scaler.scale(loss).backward()    <span class="comment"># loss缩放并反向转播</span></span><br><span class="line">        scaler.step(optimizer)    <span class="comment"># 更新参数（自动unscaling）</span></span><br><span class="line">        scaler.update()    <span class="comment"># 基于动态Loss Scale更新loss_scaling系数</span></span><br><span class="line">        <span class="comment"># loss.backward()    # 损失函数反向计算</span></span><br><span class="line">        <span class="comment"># optimizer.step()    # 更新优化器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义保存模型</span></span><br><span class="line">torch.save(&#123;</span><br><span class="line">               <span class="string">&#x27;epoch&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">               <span class="string">&#x27;arch&#x27;</span>: CNN,</span><br><span class="line">               <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">               <span class="string">&#x27;optimizer&#x27;</span> : optimizer.state_dict(),</span><br><span class="line">            &#125;,<span class="string">&#x27;checkpoint.pth.tar&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="B-训练完成">B. 训练完成:</h2><p><img src="https://oss.zaqai.com/img/202312261435692.png" alt="image-20231226143320704"></p><h2 id="C-模型转换">C. 模型转换</h2><p>昇腾平台推理环境搭建完成：</p><p><img src="https://oss.zaqai.com/img/202312261539877.png" alt="image-20231226153936800"></p><p>模型转换成功：</p><p><img src="https://oss.zaqai.com/img/202312261540620.png" alt="image-20231226154046592"></p><h2 id="D-编译运行">D. 编译运行</h2><p>样例编译成功：</p><p><img src="https://oss.zaqai.com/img/202312261545789.png" alt="image-20231226154557729"></p><p>样例运行成功：</p><p><img src="https://oss.zaqai.com/img/202312261546767.png" alt="image-20231226154628713"></p><h2 id="E-替换图片运行">E. 替换图片运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://img.zcool.cn/community/012db65543065f0000019ae9c9b0b2.jpg@1280w_1l_2o_100sh.jpg</span><br><span class="line"><span class="built_in">mv</span> 012db65543065f0000019ae9c9b0b2.jpg@1280w_1l_2o_100sh.jpg cat.jpg</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/202312261552781.jpeg" alt="【I,Pet宠物摄影】三只猫猫|摄影|宠物摄影|IPet宠物摄影 - 原创作品 - 站酷 (ZCOOL)"></p><p><img src="https://oss.zaqai.com/img/202312261552281.png" alt="image-20231226155216223"></p><p><img src="https://oss.zaqai.com/img/202312261552908.png" alt="image-20231226155235859"></p><h2 id="F-总结">F. 总结</h2><p>这次实战我了解了华为云服务的相关知识，也了解到了华为在AI方面的成果，我也知道了如何将模型转换为昇腾支持的模型，我的实践能力得到了锻炼，昇腾提供的AI框架已经比较完善了，相信华为在以后会越来越好，华为加油！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zhou29笔记_java_IO流</title>
      <link href="/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_java_IO%E6%B5%81/"/>
      <url>/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_java_IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><blockquote><p><strong>字节流可以操作一切文件，读入字符文件注意编码；字符流专门操作字符文件，不用担心乱码</strong></p></blockquote><p>输入输出流是相对于程序来讲的，InputStream是父类，FileInputStream（文件字节输入流）和BufferedInputStream是子类；OutputStream同理</p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;C:\\Users\\86175\\Desktop\\Snipaste_2021-08-12_23-49-04.png&quot;);</span><br><span class="line">FileInputStream fis=new FileInputStream(file);</span><br><span class="line">FileOutputStream fos=new FileOutputStream(&quot;1.png&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>fis.read();返回fis的一个字节int<br>fis.read(bytes[] b);将fis中的从0到b.length的字节读到b中<br>fis.read(bytes[] b,0,len);指定读的长度<br><strong>由于一个字节一个字节地读，效率很慢</strong></p></blockquote><blockquote><p>fos.write(int b);将一个字节写入fos中<br>fos.write(bytesp[] b);<br>fos.write(bytes[] b, int off,int len);</p></blockquote><blockquote><p>long start&#x3D;System.currentTimeMillis();<br>long end&#x3D;System.currentTimeMillis();<br>计算代码段运行时间</p></blockquote><h2 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//代码实现了使用buffer复制文件</span><br><span class="line">File file = new File(&quot;C:\\Users\\86175\\Desktop\\Snipaste_2021-08-12_23-49-04.png&quot;);</span><br><span class="line">FileInputStream fis=new FileInputStream(file);</span><br><span class="line">FileOutputStream fos=new FileOutputStream(&quot;1.png&quot;);</span><br><span class="line">byte[] b=new byte[1024];//创建的缓冲大小，更改这个值可以改变速度，但并非越大越快（一般建议小于文件大小）</span><br><span class="line">BufferedInputStream bis=new BufferedInputStream(fis);</span><br><span class="line">BufferedOutputStream bos=new BufferedOutputStream(fos);</span><br><span class="line">while( (len=bis.read(b))!=-1)&#123;</span><br><span class="line">    bos.write(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>FileReader、BufferedRead均继承自Reader<br>Writer同理</p><p><strong>BufferedReader比FileReader快</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;baidu.txt&quot;);</span><br><span class="line">FileReader fr = new FileReader(file);</span><br><span class="line">FileWriter fw = new FileWriter(newFile(&quot;b.txt&quot;));</span><br><span class="line">BufferedReader br = new BufferedReader(fr);</span><br><span class="line">BufferedWriter bw = new BufferedWriter(fw);</span><br><span class="line">char[] b = new char[1024];</span><br><span class="line">int len = 0;</span><br><span class="line">//下面的fr fw和br bw可以替换</span><br><span class="line">while ((len = fr.read(b)) != -1) &#123;</span><br><span class="line">    fw.write(b, 0, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zhou29笔记_java</title>
      <link href="/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_java/"/>
      <url>/2024/01/01/zhou29%E7%AC%94%E8%AE%B0_java/</url>
      
        <content type="html"><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ol><li>局部变量：在类的方法内部</li><li>实例变量：定义在类中，不用初始化，使用的时候先实例化类，再用<code>对象. 成员名</code>的方式访问</li><li>类变量：在类中，用static修饰，可以直接在本类中使用，也可以用<code>类名.成员名</code>的方式在其他类访问</li></ol><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ol><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线： MAX_VALUE</li><li>类名：首字母大写和驼峰原则</li><li>方法名：首字母小写和驼峰原则</li></ol><hr><blockquote><p>两个数据类型相操作，如果两类型最大是int（可以没有int），结果是int</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> a=<span class="number">2</span>;  <span class="type">byte</span> b=<span class="number">1</span>; <span class="comment">//则a+b是int</span></span><br></pre></td></tr></table></figure><p>如果两类型有long或double，则为long或double。</p><p>即使用一个更大的类型去接收，也不行</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">2000000000</span>;<span class="comment">//20亿</span></span><br><span class="line"><span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> c=a*b; <span class="comment">//c依然不是200亿（溢出后的结果）</span></span><br></pre></td></tr></table></figure><p>使用 <code>double c=(double)a*b</code> 可以解决</p></blockquote><hr><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>;<span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//12</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>字符串和int连接时，如果字符串在左，则int作为字符串连接</p><pre><code>                                如果字符串在右，则int先作为int运算</code></pre></blockquote><hr><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p><strong>包的本质就是文件夹，命名一般为公司网站域名倒置，如com.tencent.mobileqq</strong></p><blockquote><p>因为域名是从小到大，而文件夹要从大到小，所以倒置</p></blockquote><hr><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ol><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>[] arr =<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>arr本身作为一个引用类型的变量（类似于指针），存放在栈中，arr初始化后便指向堆中的对象区域</p></li></ol><h2 id="静态方法（static）"><a href="#静态方法（static）" class="headerlink" title="静态方法（static）"></a>静态方法（static）</h2><p>静态方法是和类一起加载的，而非静态方法是类实例化后才加载的。因此，在静态方法中调用非静态发方法会报错，但静态调用静态，非静态调用非静态都没有问题</p><h2 id="类的构造器"><a href="#类的构造器" class="headerlink" title="类的构造器"></a>类的构造器</h2><p>类会有一个隐式的无参构造方法，什么都不做，当用new实例化对象时，调用该构造方法。但当写了有参构造方法时，必须显式地定义无参构造，才能调用无参构造方法</p><h2 id="super-this"><a href="#super-this" class="headerlink" title="super&amp;this"></a>super&amp;this</h2><blockquote><p>super注意点：</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法！</li></ol><p>Vs this:</p><p>代表的对象不同：<br>this:本身调用者这个对象<br>super:代表父类对象的引用</p><p>前提<br>this:没有继承也可以使用<br>super:只能在继承条件才可以使用</p><p>构造方法<br>this（）;本类的构造<br>super（）:父类的构造</p></blockquote><h2 id="类的静态代码块"><a href="#类的静态代码块" class="headerlink" title="类的静态代码块"></a>类的静态代码块</h2><p>在类中，static{}中的称为静态代码块，在类被加载的时候执行，且只执行一次。</p><p>匿名代码块：{}中的称为匿名代码块，类被实例化的时候执行，且先于构造函数。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>不能new这个抽象类，只能靠子类去实现它；</li><li>抽象类中可以写普通的方法</li><li>抽象方法必须在抽象类中</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口中的方法默认都是<code>publish abstract</code>,  所以声明方法只需<code>返回值类型 方法名(参数);</code>, 如<code>void test(String name);</code></p><p>接口中的属性都是<code>pulish static final</code>, <strong>但一般不在接口中定义属性</strong></p><p>类通过implements关键字实现接口</p><h2 id="内部类（不常见）"><a href="#内部类（不常见）" class="headerlink" title="内部类（不常见）"></a>内部类（不常见）</h2><p>在一个public class 内部又定义一个public class，内部类可以访问外部类的私有属性。此时内部类可以看作外部类的成员变量，实例化时用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.Inner inner=outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br></pre></td></tr></table></figure><blockquote><p>比较奇葩</p></blockquote><p>还有局部内部类，就是在外部类的方法中定义的类。还有静态内部类，此时内部类只能访问外部类的静态属性，因为静态内部类加载时，外部类的非静态属性还未加载</p><p><strong>一个.java文件只能有一个public class ，但是可以有多个class。</strong></p><p><em>在public class下面还可以定义接口，在public class中通过new来实例化，并实现接口中的方法  <strong>特别奇葩</strong></em></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try后可以有多个catch，catch的参数为异常类型，异常类型必须从小到大。</p><p> <img src="https://oss.zaqai.com/img/3a3f7747269ad6fe.png" alt="异常类型"> </p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><ul><li>首先会初始化main方法所在类</li><li>new 子类，会首先加载父类</li><li>通过子类类名调用父类静态属性，子类直接不会被加载，但父类会</li></ul><h2 id="类的主动引用-一定会发生类的初始化"><a href="#类的主动引用-一定会发生类的初始化" class="headerlink" title="类的主动引用(一定会发生类的初始化)"></a>类的主动引用(一定会发生类的初始化)</h2><ul><li>当虚拟机启动,首先会初始化main方法所在类</li><li>new一个类的对象</li><li>调用类的静态成员(除了final常量)和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类.如果父类未被初始化,会首先初始化父类</li></ul><h2 id="类的被动调用"><a href="#类的被动调用" class="headerlink" title="类的被动调用"></a>类的被动调用</h2><ul><li>当访问一个静态域时,只有真正声明这个域的类才会被初始化。如: 当通过子类引用父类的静态变量,不会导致子类初始化</li><li>通过数组定义类引用,不会触发此类的初始化</li><li>引用常量不会触发此类的初始化 (常量在链接阶段就存入调用类的常量池中了)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zerotier moon中转节点+nat访问局域网</title>
      <link href="/2024/01/01/zerotier%20moon%E4%B8%AD%E8%BD%AC%E8%8A%82%E7%82%B9+nat%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
      <url>/2024/01/01/zerotier%20moon%E4%B8%AD%E8%BD%AC%E8%8A%82%E7%82%B9+nat%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="zerotier-moon中转节点-nat访问局域网"><a href="#zerotier-moon中转节点-nat访问局域网" class="headerlink" title="zerotier moon中转节点+nat访问局域网"></a>zerotier moon中转节点+nat访问局域网</h1><h2 id="入轨"><a href="#入轨" class="headerlink" title="入轨"></a>入轨</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli join ...</span><br><span class="line">zerotier-cli orbit 5759192bd3 5759192bd3</span><br></pre></td></tr></table></figure><h2 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>v6代理服务器</title>
      <link href="/2024/01/01/v6%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/01/01/v6%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="匹配ipv6地址的正则"><a href="#匹配ipv6地址的正则" class="headerlink" title="匹配ipv6地址的正则"></a>匹配ipv6地址的正则</h1><p>(([a-f0-9]{1,4}:|){0,7}[::]{0,1}[a-f0-9]{1,4})&#x2F;\d{0,3})</p><h1 id="获取出口ip地址的api"><a href="#获取出口ip地址的api" class="headerlink" title="获取出口ip地址的api"></a>获取出口ip地址的api</h1><p>ipv4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;https://api.ipify.org?format=json&#x27;</span><br></pre></td></tr></table></figure><p>ipv6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;https://api6.ipify.org?format=json&#x27;</span><br></pre></td></tr></table></figure><h1 id="shell处理返回的json——使用jq（需安装）"><a href="#shell处理返回的json——使用jq（需安装）" class="headerlink" title="shell处理返回的json——使用jq（需安装）"></a>shell处理返回的json——使用jq（需安装）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://ip.taobao.com/service/getIpInfo.php?ip=myip | jq &#x27;.data.ip&#x27;</span><br></pre></td></tr></table></figure><p>以上命令可获取以下json的ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: 0,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;country&quot;: &quot;中国&quot;,</span><br><span class="line">        &quot;ip&quot;: &quot;113.104.182.107&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装教程</title>
      <link href="/2024/01/01/ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2024/01/01/ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><h2 id="判断是否安装"><a href="#判断是否安装" class="headerlink" title="判断是否安装"></a>判断是否安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure><h1 id="安装nodejs编译的shadowsocks"><a href="#安装nodejs编译的shadowsocks" class="headerlink" title="安装nodejs编译的shadowsocks"></a>安装nodejs编译的shadowsocks</h1><h2 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install nodejs</span><br><span class="line">apt install npm</span><br></pre></td></tr></table></figure><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g shadowsocks</span><br></pre></td></tr></table></figure><h2 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib/node_modules/shadowsocks</span><br><span class="line">./config.json #配置文件</span><br><span class="line">./bin/ssserver # 启动二进制文件</span><br></pre></td></tr></table></figure><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/ssserver</span><br></pre></td></tr></table></figure><h1 id="守护进程pm2-守护ssserver"><a href="#守护进程pm2-守护ssserver" class="headerlink" title="守护进程pm2 守护ssserver"></a>守护进程pm2 守护ssserver</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure><h2 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 startup</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><blockquote><p>{<br>  “apps”:<br>    {<br>      “name”: “ssserver”,<br>      “cwd”: “&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;shadowsocks&#x2F;bin”,<br>      “script”: “.&#x2F;ssserver”,<br>      “exec_interpreter”: “bash”,<br>      “exec_mode” : “cluster_mode”,<br>      “autorestart”: true<br>    }<br>}</p></blockquote><p>本人放置在shadowsocks安装目录</p><h2 id="运行pm2"><a href="#运行pm2" class="headerlink" title="运行pm2"></a>运行pm2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start pm2.json # 上述配置文件</span><br></pre></td></tr></table></figure><h2 id="保存当前应用列表"><a href="#保存当前应用列表" class="headerlink" title="保存当前应用列表"></a>保存当前应用列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 save</span><br></pre></td></tr></table></figure><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><h2 id="重载-修改配置后需要重载"><a href="#重载-修改配置后需要重载" class="headerlink" title="重载(修改配置后需要重载)"></a>重载(修改配置后需要重载)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 reload ssserver</span><br></pre></td></tr></table></figure><h1 id="切换root"><a href="#切换root" class="headerlink" title="切换root"></a>切换root</h1><h2 id="先设置root密码-如果第一次切换root"><a href="#先设置root密码-如果第一次切换root" class="headerlink" title="先设置root密码(如果第一次切换root)"></a>先设置root密码(如果第一次切换root)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UBS实习总结</title>
      <link href="/2024/01/01/UBS%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2024/01/01/UBS%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="UBS实习总结"><a href="#UBS实习总结" class="headerlink" title="UBS实习总结"></a>UBS实习总结</h1><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>收获很多, 比如英文邮件格式啊, 一些职场英语简称啊, 当然还有单词, 和其让人用英语交流.</p><p>在这里, 会让你感觉有些东西用中文表达出来有些怪, 因为大家都是用英语表达这个东西, 比如deploy, build, 也就造成了这样地现象, 每说一句话, 都要夹杂一些英语.</p><p>每次开会, 都要先确定一下开会人数, 如果人很多, 摸鱼就好, 如果人少, 或者都是自己组里的, 大概率是要发言了, 特别是有外国人参加的会议, 都要提前写好发言稿. 比如ACQA data weekly sync up, Andrea的会议</p><p>万幸的是, 带我做项目的是伦敦华人Guo Rui, 每次catch up可以用中文, 当然如果是一个外国人的话, 可能我的英语会更上一层楼? 那样的话, 可能我也会更加难受.</p><p>这里的电脑默认都是英文, VM里甚至没有中文输入法… 最开始那阵真的不习惯, 他甚至屏蔽了百度翻译, 谷歌翻译等等市面上见得到的翻译网站, 在内部搭建了一个翻译平台, 极其难用, 每次翻译要勾选三个I confirm… 而且看请求里会带上自己的GPN? 难道翻译个东西还要被统计吗? 好在另一位同事发现搜狗翻译可以用, 推给了我.</p><h2 id="同事"><a href="#同事" class="headerlink" title="同事"></a>同事</h2><p>同事很nice, 都是top学校的研究生, 2复旦 2北大 1人大 + 我, 倒是显得有些不合群了. 但他们都不是计算机专业的, 这也应该是我的优势了吧.</p><p>有些怀念每天在想去哪里吃午饭的时光, 最多的当然是环球, 也会去上海中心, 览海国际, 正大广场, 东亚银行, 上海国金中心… 便宜的不到30, 贵的60-70, 而且质量一般.</p><p>双11晚上去牛new吃得很爽, 有服务员剥虾, 皮皮虾, 鲍鱼, 扇贝, 肥牛…</p><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>是可以随便写的, 比如下面, ${SCHEMA_NAME}是环境变量, 可以在idea的run config里定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">sql-dir:</span> <span class="string">/ships/migration</span></span><br><span class="line"><span class="attr">schema-name:</span> <span class="string">$&#123;SCHEMA_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>读取配置文件内容: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;application.schema-name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String schemaName;</span><br></pre></td></tr></table></figure><p>也可以在定义Bean的时候, 直接作为参数传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MaintainDbStructureFromYaml <span class="title function_">getMaintainDbStructureFromYaml</span><span class="params">(<span class="meta">@Value(&quot;$&#123;application.schema-name&#125;&quot;)</span> String schemaName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainDbStructureFromYaml</span>(schemaName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写一个<code>application-test.yml</code>用于unit test, 在test里的类上用<code>@ActiveProfiles(&quot;test&quot;)</code>指定</p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HierarchyDataConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;maintainDbStructureFromYaml&quot;)</span> <span class="comment">// alias</span></span><br><span class="line">    <span class="keyword">public</span> MaintainDbStructureFromYaml <span class="title function_">getMaintainDbStructureFromYaml</span><span class="params">(<span class="meta">@Value(&quot;$&#123;application.schema-name&#125;&quot;)</span> String schemaName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainDbStructureFromYaml</span>(schemaName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例模式, 使用时需要在<code>@Component</code>修饰的类里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span> <span class="comment">// 根据类型匹配</span></span><br><span class="line"><span class="keyword">private</span> MaintainDbStructureFromYaml maintainDbStructureFromYaml;</span><br><span class="line"><span class="meta">@Resource(name = &quot;maintainDbStructureFromYaml&quot;)</span> <span class="comment">// 根据name匹配</span></span><br><span class="line"><span class="keyword">private</span> MaintainDbStructureFromYaml maintainDbStructureFromYaml;</span><br></pre></td></tr></table></figure><p>也可直接在Bean的参数里使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MaintainDbFromYaml <span class="title function_">getMaintainDbFromYaml</span><span class="params">(<span class="meta">@Value(&quot;$&#123;application.schema-name&#125;&quot;)</span> String schemaName,</span></span><br><span class="line"><span class="params">                                                MaintainDbStructureFromYaml maintainDbStructureFromYaml)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MaintainDbStructureFromYaml</span>(schemaName,maintainDbStructureFromYaml);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unit-test-Mock"><a href="#unit-test-Mock" class="headerlink" title="unit test(Mock)"></a>unit test(Mock)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(class = &#123;FileWalker.class&#125;)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.calss)</span></span><br><span class="line"><span class="comment">// @RunWith(MockitoJUnitRunner.calss)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbConfigTest</span> &#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; indexResultList;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        indexResultList = ...;</span><br><span class="line">        when(jdbcTemplate.queryForList(anyObject())).thenReturn(indexResultList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTest</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// release resource</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSchemaLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.f(jdbcTemplate);</span><br><span class="line">        <span class="comment">// in f(), call jdbcTemplate.queryForList()</span></span><br><span class="line">        <span class="comment">// in this method, we don&#x27;t need to connect to DB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootTest(class = &#123;FileWalker.class&#125;)</code>随便指定一个class, 可以不启动Spring就跑test</p><p>也可以Mock 查询数据库返回的ResultSet. 轮子: <a href="https://github.com/mcrisc/mock-resultset">https://github.com/mcrisc/mock-resultset</a> 不得不感叹java生态的强大</p><h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><p>自定义SpringBoot启动logo(ASCII形式 <a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a> ), <code>banner.txt</code>放在<code>resource</code>目录下,自动替换</p><p>Spring启动就执行SQL, 将<code>init.sql</code>放在<code>resource</code>文件夹里, 配置文件中:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span> </span><br><span class="line"><span class="attr">url:</span> </span><br><span class="line"><span class="attr">username:</span> </span><br><span class="line"><span class="attr">password:</span> </span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">classpath:/init.sql</span></span><br><span class="line"><span class="attr">initialization-mode:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat部署java</title>
      <link href="/2024/01/01/tomcat%E9%83%A8%E7%BD%B2java/"/>
      <url>/2024/01/01/tomcat%E9%83%A8%E7%BD%B2java/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat部署java"><a href="#tomcat部署java" class="headerlink" title="tomcat部署java"></a>tomcat部署java</h1><h1 id="java文件"><a href="#java文件" class="headerlink" title="java文件"></a>java文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d . -classpath E:\javalib\apache-tomcat-10.0.8\lib\servlet-api.jar .\hello.java</span><br></pre></td></tr></table></figure><blockquote><p>E:\javalib\apache-tomcat-10.0.8 切换为自己的tomcat目录</p></blockquote><h1 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h1><p>在<code>E:\javalib\apache-tomcat-10.0.8\webapps</code>中创建</p><p>大概就是这个样子</p><p><img src="https://oss.zaqai.com/img/615fbe1bf3dd65e4.png"></p><blockquote><p>E:\javalib\apache-tomcat-10.0.8 切换为自己的tomcat目录</p><p>hello.class 是编译生成的</p><p>web.xml如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;hello&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>最后访问<code>http://127.0.0.1:8080/first/hello</code></p><p><img src="https://oss.zaqai.com/img/2c41cc579ca02395.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH隧道转发</title>
      <link href="/2024/01/01/SSH%E9%9A%A7%E9%81%93%E8%BD%AC%E5%8F%91/"/>
      <url>/2024/01/01/SSH%E9%9A%A7%E9%81%93%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH隧道转发"><a href="#SSH隧道转发" class="headerlink" title="SSH隧道转发"></a>SSH隧道转发</h1><h2 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h2><blockquote><p>SSH客户端监听来自某个端口的连接，当它收到连接时，将请求通过隧道转发到SSH服务器；然后SSH服务器将请求转到目标端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L [bind_address:]localport:host:hostport remotehost</span><br></pre></td></tr></table></figure><blockquote><p>bind_address限制了ssh客户端的监听地址, localport表示监听ssh客户端的该端口, host是remotehost可以访问的地址, hostport是host所监听的端口</p><p>效果就是访问ssh客户端的localport可以访问host的hostport</p><p>bind_address通常有127.0.0.1 [::1] 0.0.0.0 [::] *, man里说省略这个参数&#x3D;*, 我实测好像&#x3D;localhost</p></blockquote><p><img src="https://oss.zaqai.com/img/202311151411893.png" alt="image-20231115141140698"></p><h2 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h2><blockquote><p>适用于将ssh客户端所能访问的服务暴露给remotehost, 也就是内网穿透</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R [bind_address:]port:host:hostport remotehost</span><br></pre></td></tr></table></figure><blockquote><p>bind_address好像没啥用, port是remotehost所监听的端口, host是ssh客户端网络范围内的地址, hostport是该host运行服务的端口</p><p>默认remotehost的<code>/etc/ssh/sshd_config</code>中<code>GatewayPorts no</code>, 所以在remotehost中是127.0.0.1:port, 服务只能remotehost访问</p><p>修改<code>GatewayPorts yes</code>之后, 在remotehost中是0.0.0.0:port, 如果remotehost有公网IP, 就达到了内网穿透</p></blockquote><h2 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 7890 remotehost</span><br></pre></td></tr></table></figure><blockquote><p>7890是ssh客户端监听的端口, 就可以使用<code>ssh客户端ip:7890</code>的socks5代理</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python+ffmpeg 批量视频转码</title>
      <link href="/2024/01/01/python+ffmpeg%20%E6%89%B9%E9%87%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/"/>
      <url>/2024/01/01/python+ffmpeg%20%E6%89%B9%E9%87%8F%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="python-ffmpeg-批量视频转码"><a href="#python-ffmpeg-批量视频转码" class="headerlink" title="python+ffmpeg 批量视频转码"></a>python+ffmpeg 批量视频转码</h1><blockquote><p>为什么要转码? 现在大多数视频编码为h264, 而家里的车机系统比较老, 无法解码h264, 但可以解码mpeg4</p><p>为什么不选择格式工厂等软件? 最重要的一点: 不符合程序员的身份(也不能写博客啊)</p></blockquote><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>传送门<a href="https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-5.0-essentials_build.zip">ffmpeg-5.0-essentials_build_1.zip</a></p><p>官网下载压缩包, 解压到自定义位置, 环境变量path填入bin目录就好了, 如<code>C:\develop\ffmpeg-5.0-essentials_build\bin</code></p><h3 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h3><p><img src="https://oss.zaqai.com/img/image-20220211120540578.png" alt="image-20220211120540578"></p><h2 id="查看视频编码"><a href="#查看视频编码" class="headerlink" title="查看视频编码"></a>查看视频编码</h2><p>没想到potplayer居然不显示视频编码格式, 可能是我方法不对</p><p><img src="https://oss.zaqai.com/img/image-20220211115929955.png" alt="image-20220211115929955"></p><p>上图中的视频为h264编码, 在文件信息中却找不到h264字眼</p><p>但他的编码信息在ffmpeg无所遁形: <code>ffprobe -i 095一生何求-陈百强.mkv -show_streams -select_streams v -print_format json</code><img src="https://oss.zaqai.com/img/image-20220211120715911.png" alt="image-20220211120715911"></p><p>附上转换完成后查看视频编码信息:</p><p><img src="https://oss.zaqai.com/img/image-20220211120844533.png" alt="image-20220211120844533"></p><h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_name=file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># 只选取文件名(不含扩展名), 并去掉空格</span></span><br><span class="line">            file=os.path.join(root, file)</span><br><span class="line">            <span class="comment"># 带上路径</span></span><br><span class="line">            file_new=file.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            os.rename(file,file_new) <span class="comment"># 重命名是为了避免文件名中有空格, 如果有空格会报错</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在转换:&quot;</span>+file_new+<span class="string">&quot;...&quot;</span>)</span><br><span class="line">            os.system( <span class="string">&quot;ffmpeg -i &quot;</span>+ file_new +<span class="string">&quot; -vcodec mpeg4 &quot;</span>+ <span class="string">&quot;C:\\Users\\17513\\Desktop\\out\\&quot;</span>+file_name+ <span class="string">&quot;.mp4&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">convert(<span class="string">&quot;C:\\Users\\17513\\Desktop\\new&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>关于ffmpeg的, 就是一条命令<code>ffmpeg -i inputFile -vcodec mpeg4 outputFile</code></p><p>同样, 要转换为h264只需<code>ffmpeg -i inputFile -vcodec h264 outputFile</code></p></blockquote><p>更多ffmpeg使用可以参考<a href="https://blog.csdn.net/dulingwen/article/details/98740568">使用FFmepg进行视频转码、视频格式转换、图片提取等！_dulingwen的博客-CSDN博客_ffmpeg转换视频格式</a></p><p>另外再附上新找到的资源&#x3D;&#x3D;经典老歌800首MV&#x3D;&#x3D;, 阿里云链接 <a href="https://www.aliyundrive.com/s/z1w6WY8iJDw">https://www.aliyundrive.com/s/z1w6WY8iJDw</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python jupyter-notebook数据分析与可视化笔记</title>
      <link href="/2024/01/01/python%20jupyter-notebook%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/python%20jupyter-notebook%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="python-jupyter-notebook数据分析与可视化笔记"><a href="#python-jupyter-notebook数据分析与可视化笔记" class="headerlink" title="python jupyter-notebook数据分析与可视化笔记"></a>python jupyter-notebook数据分析与可视化笔记</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入绘图库</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">u&#x27;销量&#x27;</span>][(data[<span class="string">u&#x27;销量&#x27;</span>] &lt; <span class="number">400</span>) | (data[<span class="string">u&#x27;销量&#x27;</span>] &gt; <span class="number">5000</span>)] = <span class="literal">None</span>  <span class="comment"># 过滤异常值，将其变为空值</span></span><br><span class="line"></span><br><span class="line">df[][]根据第二个[]中的真值来决定选择</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(data[<span class="string">&#x27;销量&#x27;</span>].isnull())[<span class="number">0</span>]</span><br><span class="line">返回真值,表示该列第<span class="number">0</span>行空不空,data[<span class="string">&#x27;销量&#x27;</span>].isnull()返回一个series(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> lagrange  <span class="comment"># 导入拉格朗日插值函数</span></span><br><span class="line"><span class="comment"># 自定义列向量插值函数</span></span><br><span class="line"><span class="comment"># s为列向量，n为被插值的位置，k为取前后的数据个数，默认为5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ployinterp_column</span>(<span class="params">s, n, k=<span class="number">5</span></span>):</span><br><span class="line">  y = s[<span class="built_in">list</span>(<span class="built_in">range</span>(n-k, n)) + <span class="built_in">list</span>(<span class="built_in">range</span>(n+<span class="number">1</span>, n+<span class="number">1</span>+k))]  <span class="comment"># 取数</span></span><br><span class="line">  y = y[y.notnull()]  <span class="comment"># 剔除空值</span></span><br><span class="line">  <span class="keyword">return</span> lagrange(y.index, <span class="built_in">list</span>(y))(n)  <span class="comment"># 插值并返回插值结果</span></span><br></pre></td></tr></table></figure><h3 id="pd-read-excel"><a href="#pd-read-excel" class="headerlink" title="pd.read_excel()"></a>pd.read_excel()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_excel(io,sheet_name=<span class="number">0</span>,header=<span class="number">0</span>,names=<span class="literal">None</span>,index_col=<span class="literal">None</span>,usecols=<span class="literal">None</span>,squeeze=<span class="literal">False</span>,dtype=<span class="literal">None</span>,engine=<span class="literal">None</span>,converters=<span class="literal">None</span>,true_values=<span class="literal">None</span>,false_values=<span class="literal">None</span>,skiprows=<span class="literal">None</span>,nrows=<span class="literal">None</span>,na_values=<span class="literal">None</span>,keep_default_na=<span class="literal">True</span>,verbose=<span class="literal">False</span>,parse_dates=<span class="literal">False</span>,date_parser=<span class="literal">None</span>,thousands=<span class="literal">None</span>,comment=<span class="literal">None</span>,skipfooter=<span class="number">0</span>,convert_float=<span class="literal">True</span>,mangle_dupe_cols=<span class="literal">True</span>,**kwds)</span><br></pre></td></tr></table></figure><ol><li>io: r”path”  r可避免转义字符\</li><li>sheet_name（str, int, list, None, default 0）<ul><li>str:sheet名  </li><li>int:sheet索引   </li><li>list：可为int、str、int和str的组合 </li><li>None：读取所有sheet </li><li>默认第0张</li></ul></li><li>header（int, list of int,None, default 0）指定表头<ul><li>int:1,代表第二行做表头，第一行数据被丢弃</li><li>list of int：指定多行做表头</li><li>None：不使用数据源中的数据做表头</li><li>默认第0行</li></ul></li><li>names(array-like, default None)自定义表头的名称<ul><li>传递一个数组</li></ul></li><li>index_col（int, list of int, default None）指定列为索引列<ul><li>int：0，数据中第0列作为索引</li><li>list of int：指定多列作为索引</li><li>默认None，不使用数据源的列作为索引，而是自动生成从0开始</li></ul></li><li>usecols(int, str, list-like, or callable default None)指定读取列<ul><li>int：读取到第n列（0，1，2，…,n）</li><li>str：“ A：E”或“ A，C，E：F”（exccel中列名）</li><li>list-like：读取给定列</li><li>默认为None，读取所有列</li></ul></li><li>squeeze(bool, default False)默认为False。如果设置squeeze&#x3D;True则表示如果解析的数据只包含一列，则返回一个Series</li><li>dtype（Type name or dict of column -&gt; type, default None）<ul><li>默认为None，也就是不改变数据类型</li><li>dtype&#x3D;{0:”float64”,2:str}0列改为float64，2列改为str</li></ul></li><li>engine（str, default None）<br>可以接受的参数有“ xlrd”，“ openpyxl”或“ odf”，用于使用第三方的库去解析excel文件。</li><li>converters（dict, default None）<br>对指定列的数据进行指定函数的处理，传入参数为列名与函数组成的字典。key 可以是列名或者列的序号，values是函数，可以def函数或者直接lambda都行。<ul><li><code>converters&#123;1:lambda x: &quot;\&quot;&quot;+x+&quot;\&quot;&quot;,2:lambda x: x-10&#125;</code>对第2列的所有名称加上””，把第三列的所有年龄都减10</li></ul></li><li>true_values（list，default None） false_values（list，default None）将指定的文本转换为True&#x2F;False，默认为None<ul><li><code>true_values=[&quot;女&quot;],false_values=[&quot;男&quot;]</code>将性别中的女转换为True，男转换为False</li></ul></li><li>skiprows（list like）跳过指定的行<ul><li>skiprows&#x3D;3 跳过前3行</li><li>skiprows&#x3D;[1,3,5] 跳过第1,3,5行</li><li>skiprows&#x3D;lambda x: x % 2 &#x3D;&#x3D; 0 跳过偶数行</li></ul></li><li>nrows（int, default None）默认为None，指定需要读取前多少行，通常用于较大的数据文件中。<ul><li>nrows&#x3D;3 读取前三行</li></ul></li><li>na_values（scalar, str, list-like, or dict, default None）指定某些列的某些值为NaN<ul><li>na_values&#x3D;’大专’，指定大专为NaN</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>n1备忘笔记</title>
      <link href="/2024/01/01/n1%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/n1%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash</span><br><span class="line">systemctl start docker</span><br><span class="line">service docker start</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure><h2 id="webdav"><a href="#webdav" class="headerlink" title="webdav"></a>webdav</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root/app/webdav</span><br><span class="line">wget https://hub.fastgit.org/hacdias/webdav/releases/download/v4.1.1/linux-arm64-webdav.tar.gz</span><br><span class="line">tar -xvzf linux-arm64-webdav.tar.gz</span><br><span class="line">vi /root/app/webdav/config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server related settings</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">&quot;[::]&quot;</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">15108</span></span><br><span class="line"><span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cert:</span> <span class="string">cert.pem</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">key.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default user settings (will be merged)</span></span><br><span class="line"><span class="attr">scope:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">modify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">rules:</span> []</span><br><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">username:</span> <span class="string">zaqai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">jamay569</span></span><br><span class="line">    <span class="attr">scope:</span> <span class="string">/xa</span></span><br></pre></td></tr></table></figure><p>创建服务项, 使得可以使用<code>systemctl</code>控制服务</p><p><code>vi /usr/lib/systemd/system/webdav.service</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=WebDAV server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/root/app/webdav/webdav --config /root/app/webdav/config.yaml</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable webdav</span><br><span class="line">systemctl start webdav</span><br></pre></td></tr></table></figure><h2 id="docker-换源"><a href="#docker-换源" class="headerlink" title="docker 换源"></a>docker 换源</h2><blockquote><p>使用场景: 拉取镜像</p><p>报错, 但网是通的</p></blockquote><p><code>vi /etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://bytkgxyr.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;live-restore&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="docker-webdav-aliyundriver"><a href="#docker-webdav-aliyundriver" class="headerlink" title="docker webdav-aliyundriver"></a>docker webdav-aliyundriver</h2><h4 id="获取refreshToken"><a href="#获取refreshToken" class="headerlink" title="获取refreshToken"></a>获取refreshToken</h4><p><img src="https://oss.zaqai.com/img/20220119212307.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=webdav-aliyundriver --restart=always -p 38080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e TZ=&quot;Asia/Shanghai&quot; -e ALIYUNDRIVE_REFRESH_TOKEN=&quot;1f39cc0494dd4deab22c96771b6c5ccb&quot; -e ALIYUNDRIVE_AUTH_PASSWORD=&quot;admin&quot; -e JAVA_OPTS=&quot;-Xmx1g&quot; zx5253/webdav-aliyundriver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将your refreshToken替换为上面获取的refreshToken</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8080:8080 第一个8080为服务器webdav服务的端口，可修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/aliyun-driver/ 挂载卷自动维护了最新的refreshToken，建议挂载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ALIYUNDRIVE_AUTH_PASSWORD 是admin账户的密码，建议修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JAVA_OPTS 可修改最大内存占用，比如 -e JAVA_OPTS=<span class="string">&quot;-Xmx512m&quot;</span> 表示最大内存限制为512m</span></span><br></pre></td></tr></table></figure><h2 id="挂载WebDav方法"><a href="#挂载WebDav方法" class="headerlink" title="挂载WebDav方法"></a>挂载WebDav方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install davfs2</span><br><span class="line">sed -i &#x27;s/# use_locks       1/use_locks       0/g&#x27; /etc/davfs2/davfs2.conf</span><br><span class="line">echo &quot;192.168.1.111:38085 zaqai jamay569&quot; &gt;&gt; /etc/davfs2/secrets #保存用户名密码，以后可以直接免密码挂载</span><br><span class="line">mount.davfs 192.168.1.111:38085 /ali</span><br><span class="line">echo &quot;mount.davfs 192.168.1.70:15108 /ali&quot; &gt;&gt; /etc/rc.local # 开机自动挂载</span><br></pre></td></tr></table></figure><h2 id="一些nginx骚操作"><a href="#一些nginx骚操作" class="headerlink" title="一些nginx骚操作"></a>一些nginx骚操作</h2><ul><li><p>使用Nginx进行TCP&#x2F;UDP&#x2F;IPV6端口转发</p><blockquote><p>要在编译安装时添加stream模块, 亲测宝塔的编译安装会安装此模块</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf # nginx主配置文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    #将12345端口转发到192.168.1.23的3306端口</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 12345;</span><br><span class="line">        proxy_connect_timeout 5s;</span><br><span class="line">        proxy_timeout 20s;</span><br><span class="line">        proxy_pass 192.168.1.23:3306;</span><br><span class="line">    &#125;</span><br><span class="line">    #将udp 53端口转发到192.168.1.23 53端口</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 53 udp reuseport;</span><br><span class="line">        proxy_timeout 20s;</span><br><span class="line">        proxy_pass 192.168.1.23:53;</span><br><span class="line">    &#125;</span><br><span class="line">    #ipv4转发到ipv6</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 9135;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        proxy_timeout 30s;</span><br><span class="line">        proxy_pass [2607:fcd0:107:3cc::1]:9135;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>nginx代理socket端口</p><blockquote><p>要在编译安装时添加stream模块, 亲测宝塔的编译安装会安装此模块</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf # nginx主配置文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream&#123;</span><br><span class="line">    upstream socket_server&#123;</span><br><span class="line">server 127.0.0.1:3802 weight=1;#发布socket1服务端口</span><br><span class="line">server 127.0.0.1:3803 weight=1;#发布socket2服务端口</span><br><span class="line">    &#125;</span><br><span class="line">    #监听socket端口 </span><br><span class="line">    server &#123;</span><br><span class="line">listen 3801;</span><br><span class="line">proxy_pass socket_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><blockquote><p>至于用处嘛, 当然是让只有ipv4的设备使用上ipv6的ss</p><p>虽然有点多此一举, 但众所周知, ipv4的ss容易被封, 本人一台vultr的ss, ipv6正常, 换成ipv4就不能使用, (怀疑是某些端口被封)</p><p>通过一个双栈的nginx就可以将ss的ipv6转换成本地的ipv4</p></blockquote></li></ul><h2 id="ssr低延迟"><a href="#ssr低延迟" class="headerlink" title="ssr低延迟"></a>ssr低延迟</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N — no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"></span><br><span class="line">wget — no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>n1从linux刷到安卓TV</title>
      <link href="/2024/01/01/n1%E4%BB%8Elinux%E5%88%B7%E5%88%B0%E5%AE%89%E5%8D%93TV/"/>
      <url>/2024/01/01/n1%E4%BB%8Elinux%E5%88%B7%E5%88%B0%E5%AE%89%E5%8D%93TV/</url>
      
        <content type="html"><![CDATA[<h1 id="n1从linux刷到安卓TV"><a href="#n1从linux刷到安卓TV" class="headerlink" title="n1从linux刷到安卓TV"></a>n1从linux刷到安卓TV</h1><h2 id="常规方法-线刷"><a href="#常规方法-线刷" class="headerlink" title="常规方法: 线刷"></a>常规方法: 线刷</h2><p>去年是这样刷的, 大致流程就是使用<code>N1降级工具</code>将n1恢复到线刷模式, 然后就可以使用<code>USB burning tool</code>刷入.</p><p>但是恢复到线刷模式需要使用adb连接n1, 而linux系统是没有adb的, 也就卡在了这一步</p><p>(由于去年没做笔记, 也忘了到底怎么做的…😒)</p><h2 id="更好的方法-ddbr"><a href="#更好的方法-ddbr" class="headerlink" title="更好的方法: ddbr"></a>更好的方法: ddbr</h2><blockquote><p>该方法只需要一个U盘就可以, 只要你的n1可以从U盘启动, 就没问题, 非常nice</p><p><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8228200&highlight=n1+DDBR">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8228200&amp;highlight=n1%2BDDBR</a></p></blockquote><p>U盘烧录armbian镜像 –&gt; 使用U盘启动 –&gt; <code>ddbr</code>命令restore目标系统 –&gt; 完成之后emmc就是目标系统了</p><p>文件地址: <a href="https://alist.uwbanner.cn/a/%E6%8A%98%E8%85%BE/n1/N1-DDBR.zip">https://alist.uwbanner.cn/a/%E6%8A%98%E8%85%BE/n1/N1-DDBR.zip</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>n1-docker-openwrt实现ipv4ipv6双栈网络</title>
      <link href="/2024/01/01/n1-docker-openwrt%E5%AE%9E%E7%8E%B0ipv4ipv6%E5%8F%8C%E6%A0%88%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/01/01/n1-docker-openwrt%E5%AE%9E%E7%8E%B0ipv4ipv6%E5%8F%8C%E6%A0%88%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="n1-docker-openwrt实现ipv4-ipv6双栈网络"><a href="#n1-docker-openwrt实现ipv4-ipv6双栈网络" class="headerlink" title="n1-docker-openwrt实现ipv4&#x2F;ipv6双栈网络"></a>n1-docker-openwrt实现ipv4&#x2F;ipv6双栈网络</h1><h2 id="主要参考恩山论坛两篇帖子"><a href="#主要参考恩山论坛两篇帖子" class="headerlink" title="主要参考恩山论坛两篇帖子"></a>主要参考恩山论坛两篇帖子</h2><blockquote><p><a href="https://www.right.com.cn/forum/thread-4068419-1-1.html">【新提醒】回馈论坛！整理发布docker openwrt ipv6&#x2F;ipv4，自由DIY任意镜像-多次测试成功 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p><p><a href="https://www.right.com.cn/forum/thread-4046582-1-1.html">【新提醒】【终极教程】N1做旁路由，IPv6设置教程，超详细 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz! (right.com.cn)</a></p></blockquote><h2 id="宿主机"><a href="#宿主机" class="headerlink" title="宿主机"></a>宿主机</h2><h3 id="创建macnet"><a href="#创建macnet" class="headerlink" title="创建macnet"></a>创建macnet</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 --subnet=fe80::/16 --gateway=fe80::1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><h3 id="修改网络接口配置"><a href="#修改网络接口配置" class="headerlink" title="修改网络接口配置"></a>修改网络接口配置</h3><h4 id="修改-etc-network-interfaces-debian-ubuntu"><a href="#修改-etc-network-interfaces-debian-ubuntu" class="headerlink" title="修改/etc/network/interfaces(debian ubuntu)"></a>修改<code>/etc/network/interfaces</code>(debian ubuntu)</h4><h4 id="修改-etc-sysconfig-network-scripts-ifcfg-eth0-centos"><a href="#修改-etc-sysconfig-network-scripts-ifcfg-eth0-centos" class="headerlink" title="修改/etc/sysconfig/network-scripts/ifcfg-eth0(centos)"></a>修改<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>(centos)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># interface file auto-generated by buildroot</span><br><span class="line">#iface eth0 inet dhcp</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet manual</span><br><span class="line"></span><br><span class="line">auto macvlan</span><br><span class="line">iface macvlan inet static</span><br><span class="line">  address 192.168.2.2</span><br><span class="line">  netmask 255.255.255.0</span><br><span class="line">  gateway 192.168.2.120</span><br><span class="line">  dns-nameservers 192.168.2.1</span><br><span class="line">  pre-up ip link add macvlan link eth0 type macvlan mode bridge</span><br><span class="line">  post-down ip link del macvlan link eth0 type macvlan mode bridge</span><br></pre></td></tr></table></figure><blockquote><p>主要是macvlan的配置</p></blockquote><blockquote><p>照理讲这里的ip应该是和macnet的一样的,但是我就这样也获取到了ipv6…不想再深究了,就这样吧</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220123172012563.png" alt="image-20220123172012563"></p><h3 id="编辑-etc-rc-local-添加"><a href="#编辑-etc-rc-local-添加" class="headerlink" title="编辑&#x2F;etc&#x2F;rc.local,添加:"></a>编辑&#x2F;etc&#x2F;rc.local,添加:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">modprobe</span><br><span class="line">modprobe pppoe</span><br><span class="line">modprobe udp_tunnel</span><br><span class="line">modprobe ip6_udp_tunnel</span><br><span class="line">modprobe ip6table_nat</span><br><span class="line">modprobe tun</span><br></pre></td></tr></table></figure><h3 id="重启宿主机reboot或systemctl-restart-network"><a href="#重启宿主机reboot或systemctl-restart-network" class="headerlink" title="重启宿主机reboot或systemctl restart network"></a>重启宿主机<code>reboot</code>或<code>systemctl restart network</code></h3><h2 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull buddyfly/openwrt-aarch64:latest</span><br><span class="line">docker run --restart always --name openwrt -v /xa:/xa -d --network macnet --privileged buddyfly/openwrt-aarch64:latest /sbin/init</span><br><span class="line">docker exec -it openwrt /bin/sh</span><br><span class="line">vi /etc/config/network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改ip 网关 dns</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">option ipaddr &#x27;192.168.1.111&#x27;</span><br><span class="line">option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">option dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure><h3 id="修改-etc-sysctl-conf-获取ipv6的关键"><a href="#修改-etc-sysctl-conf-获取ipv6的关键" class="headerlink" title="修改&#x2F;etc&#x2F;sysctl.conf(获取ipv6的关键)"></a>修改&#x2F;etc&#x2F;sysctl.conf(获取ipv6的关键)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Defaults are configured in /etc/sysctl.d/* and can be customized in this file</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6=0</span><br><span class="line">net.ipv6.conf.default.accept_ra=2</span><br><span class="line">net.ipv6.conf.all.accept_ra=2</span><br></pre></td></tr></table></figure><h3 id="修改-etc-rc-local"><a href="#修改-etc-rc-local" class="headerlink" title="修改&#x2F;etc&#x2F;rc.local"></a>修改&#x2F;etc&#x2F;rc.local</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip link set eth0 promisc on</span><br><span class="line">ip link add link eth0 wan_mac0 type macvlan</span><br><span class="line">ip link set wan_mac0 address 02:42:00:11:7C:01</span><br><span class="line">ip link set wan_mac0 up</span><br></pre></td></tr></table></figure><h3 id="重启openwrt"><a href="#重启openwrt" class="headerlink" title="重启openwrt"></a>重启openwrt</h3><blockquote><p>修改IPtable（如果出现不能上网，去openwrt防火墙添加规则）</p><p>iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</p><p>也可以尝试（有桥接存在的情况下）<br>iptables -t nat -I POSTROUTING -o  br-lan  -j MASQUERADE</p></blockquote><p>&#x3D;&#x3D;你会发现还是没有ipv6,我的是这样…&#x3D;&#x3D;</p><h2 id="第二篇帖子"><a href="#第二篇帖子" class="headerlink" title="第二篇帖子"></a>第二篇帖子</h2><ul><li><p>lan口下面DHCP服务器-&gt;基本设置-忽略此接口</p></li><li><p>lan口下面DHCP服务器-&gt;ipv6设置-全部禁用</p></li><li><p>lan口高级设置-使用内置的ipv6管理</p></li><li><p>lan口物理设置-关闭桥接(否则旁路由无法联网)</p></li><li><p>添加新接口（名称：lan6，协议：DHCPv6客户端，自定义接口：@lan</p></li><li><p>lan和lan6防火墙都选lan</p></li><li><p><img src="https://oss.zaqai.com/img/image-20220123173602239.png" alt="image-20220123173602239"></p></li><li><p>取消勾选网络-DHCP&#x2F;DNS-高级设置里的“禁止解析 IPv6 DNS 记录”</p></li></ul><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>反正我是真的有ipv6了</p><p><img src="https://oss.zaqai.com/img/image-20220123173815992.png" alt="image-20220123173815992"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/2024/01/01/mybatis/"/>
      <url>/2024/01/01/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="项目概览"><a href="#项目概览" class="headerlink" title="项目概览"></a>项目概览</h1><p><img src="https://oss.zaqai.com/img/79329429f9060d87.png"></p><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven5&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.32&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.3.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">   </span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class DaoTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test() &#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.getUser(201992001);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!-- 根标签 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://8.140.166.149:39002/mybatis&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;mybatis&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;jamay&quot; /&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 环境，可以配置多个，default：指定采用哪个环境 --&gt;</span><br><span class="line">    &lt;environments default=&quot;test&quot;&gt;</span><br><span class="line">        &lt;!-- id：唯一标识 --&gt;</span><br><span class="line">        &lt;environment id=&quot;test&quot;&gt;</span><br><span class="line">            &lt;!-- 事务管理器，JDBC类型的事务管理器 --&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">            &lt;!-- 数据源，池类型的数据源 --&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt; &lt;!-- 配置了properties，所以可以直接引用 --&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mappers/MyMapper.xml&quot; /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可在 <code> &lt;properties resource=&quot;db.properties&quot;&gt;</code>引入外部配置，加载时首先加载内部配置（<code>&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://8.140.166.149:39002/mybatis&quot; /&gt;</code>），然后加载外部配置（<code>db.properties</code>），如果配置有重叠，会导致内部配置被外部配置覆盖，表现为外部配置优先级高</p></blockquote><blockquote><p>可设置别名（typeAliases）</p></blockquote><h1 id="MyMapper-xml"><a href="#MyMapper-xml" class="headerlink" title="MyMapper.xml"></a>MyMapper.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.zq.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; resultType=&quot;com.zq.entity.User&quot;&gt;</span><br><span class="line">        select * from student where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;getUserList&quot; resultType=&quot;com.zq.entity.User&quot;&gt;</span><br><span class="line">        select * from student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;addUser&quot;&gt;</span><br><span class="line">        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;passwd&#125;,$&#123;p_id&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteUser&quot;&gt;</span><br><span class="line">        delete from student where id=  #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    &lt;update id=&quot;updateUser&quot;&gt;</span><br><span class="line">        update  student set p_id= #&#123;p_id&#125; where id= #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h1 id="MybatisUtils-java"><a href="#MybatisUtils-java" class="headerlink" title="MybatisUtils.java"></a>MybatisUtils.java</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.zq.utils;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class MybatisUtils &#123;</span><br><span class="line">   private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    static  &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           // 指定全局配置文件</span><br><span class="line">           String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">           // 读取配置文件</span><br><span class="line">           InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">           // 构建sqlSessionFactory</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">       &#125;catch (IOException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;&#125;</span><br><span class="line">public static SqlSession getSqlSession()&#123;</span><br><span class="line"></span><br><span class="line">           return sqlSessionFactory.openSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.zq.mapper;</span><br><span class="line"></span><br><span class="line">import com.zq.entity.User;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    List&lt;User&gt; getUserList();</span><br><span class="line"></span><br><span class="line">    User getUser(int id);</span><br><span class="line"></span><br><span class="line">    int addUser(User user);</span><br><span class="line"></span><br><span class="line">    int deleteUser(int id);</span><br><span class="line"></span><br><span class="line">    int updateUser(Map&lt;String, Object&gt; map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.zq.entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String passwd;</span><br><span class="line">    private String p_id;</span><br><span class="line"></span><br><span class="line">    public User(String id, String name, String passwd, String p_id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.passwd = passwd;</span><br><span class="line">        this.p_id = p_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPasswd() &#123;</span><br><span class="line">        return passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPasswd(String passwd) &#123;</span><br><span class="line">        this.passwd = passwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getP_id() &#123;</span><br><span class="line">        return p_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setP_id(String p_id) &#123;</span><br><span class="line">        this.p_id = p_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; + &quot;id=&#x27;&quot; + id + &#x27;\&#x27;&#x27; + &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; + &quot;, password=&#x27;&quot; + passwd + &#x27;\&#x27;&#x27; + &quot;, p_id=&#x27;&quot;</span><br><span class="line">                + p_id + &#x27;\&#x27;&#x27; + &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven笔记</title>
      <link href="/2024/01/01/Maven%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/Maven%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven笔记"><a href="#Maven笔记" class="headerlink" title="Maven笔记"></a>Maven笔记</h1><h2 id="依赖冲突解决方案"><a href="#依赖冲突解决方案" class="headerlink" title="依赖冲突解决方案"></a>依赖冲突解决方案</h2><blockquote><p>依赖冲突: 相同jar包的不同版本被直接或间接包含进项目中</p></blockquote><p>可通过<code>mvn -Dverbose dependency:tree</code>查看依赖</p><h3 id="解决依赖冲突"><a href="#解决依赖冲突" class="headerlink" title="解决依赖冲突"></a>解决依赖冲突</h3><ol><li>使用第一声明者优先原则</li></ol><p>在pom.xml文件自上而下，先声明的jar坐标，就先引用该jar的传递依赖</p><ol start="2"><li>使用路径近者优先原则</li></ol><p>即直接依赖优先于间接依赖, 将需要使用的版本放入pom.xml中, 这样项目就会使用你需要的版本, 而不是通过间接依赖传递的版本</p><ol start="3"><li>排除依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不想使用通过<code>spring-context</code>间接传递的<code>spring-core</code></p><ol start="4"><li>版本锁定</li></ol><p>使用dependencyManagement 进行版本锁定</p><p>pom.xml中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锁定<code>spring-core</code>使用<code>5.2.0.RELEASE</code>版本</p><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><blockquote><p>Maven 坐标包括 groupId、artifactId、version、packaging 等元素</p></blockquote><ul><li><p>groupId: 一般为公司URL的反写</p></li><li><p>artifactId: 项目的名称</p></li><li><p>version: 版本</p></li><li><p>packaging : 项目的打包方式，默认值为 jar&#x3D;&#x3D;(可选)&#x3D;&#x3D;</p></li></ul><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dependencies 元素可以包含一个或者多个 dependency 子元素，用以声明一个或者多个项目依赖，每个依赖都可以包含以下元素</p><ul><li>groupId、artifactId 和 version：依赖的基本坐标，对于任何一个依赖来说，基本坐标是最重要的，Maven 根据坐标才能找到需要的依赖。</li><li>type：依赖的类型，对应于项目坐标定义的 packaging。大部分情况下，该元素不必声明，其默认值是 jar。</li><li>scope：依赖的范围。</li><li>optional：标记依赖是否可选。</li><li>exclusions：用来排除传递性依赖</li></ul><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p><img src="https://oss.zaqai.com/img/2174081-20210720100517349-1776391170.png" alt="img"></p><p>查找顺序:</p><p> (1)，在本地仓库中寻找，如果没有则进入下一步。</p><p> (2)，在全局配置的私服仓库（settings.xml中配置的并有激活）中寻找，如果没有则进入下一步。</p><p> (3)，在项目自身配置的私服仓库（pom.xml）中寻找，如果没有则进入下一步。</p><p> (4)，在中央仓库中寻找，如果没有则终止寻找。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用工具</title>
      <link href="/2024/01/01/linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/01/01/linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">yum install screen</span><br><span class="line"># Debian/Ubuntu</span><br><span class="line">apt install screen</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个叫Hello的虚拟终端</span><br><span class="line">screen -S Hello</span><br><span class="line">screen -R Hello</span><br><span class="line">#使用-R创建，如果之前有创建唯一一个同名的screen，则直接进入之前创建的screen</span><br><span class="line">#使用-S创建和直接输入screen创建的虚拟终端，不会检录之前创建的screen（也就是会创建同名的screen)</span><br></pre></td></tr></table></figure><blockquote><p>Ctril+a，再按d ,回到主界面,screen后台运行,处于Detached</p></blockquote><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -ls # 查看已开的screen</span><br><span class="line">screen -r|R [pid/name] # 进入screen,pid/name：为虚拟终端PID或Name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kill掉screen"><a href="#kill掉screen" class="headerlink" title="kill掉screen"></a>kill掉screen</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S &#123;session_name&#125; -X quit # kill</span><br><span class="line">进入终端,输入exit,退出</span><br></pre></td></tr></table></figure><blockquote><p>两者本质一样,第一个在主终端指定screen并执行exit命令,第二个直接进入screen执行exit命令</p></blockquote><h1 id="ss-Socket-Statistics"><a href="#ss-Socket-Statistics" class="headerlink" title="ss(Socket Statistics )"></a>ss(Socket Statistics )</h1><blockquote><p>ss 命令可以用来获取 socket 统计信息，它显示的内容和 netstat 类似。但 ss 的优势在于它能够显示更多更详细的有关 TCP 和连接状态的信息，而且比 netstat 更快。当服务器的 socket 连接数量变得非常大时，无论是使用 netstat 命令还是直接 cat &#x2F;proc&#x2F;net&#x2F;tcp，执行速度都会很慢。ss 命令利用到了 TCP 协议栈中 tcp_diag。tcp_diag 是一个用于分析统计的模块，可以获得 Linux 内核中第一手的信息，因此 ss 命令的性能会好很多。</p></blockquote><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><blockquote><p>-h, –help 帮助<br> -V, –version 显示版本号<br> -t, –tcp 显示 TCP 协议的 sockets<br> -u, –udp 显示 UDP 协议的 sockets<br> -x, –unix 显示 unix domain sockets，与 -f 选项相同<br> -n, –numeric 不解析服务的名称，如 “22” 端口不会显示成 “ssh”<br> -l, –listening 只显示处于监听状态的端口<br> -p, –processes 显示监听端口的进程(Ubuntu 上需要 sudo)<br> -a, –all 对 TCP 协议来说，既包含监听的端口，也包含建立的连接<br> -r, –resolve 把 IP 解释为域名，把端口号解释为协议名称</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tlp</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1721800">https://cloud.tencent.com/developer/article/1721800</a></p><h1 id="ag-递归搜索文件内容"><a href="#ag-递归搜索文件内容" class="headerlink" title="ag(递归搜索文件内容)"></a>ag(递归搜索文件内容)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install silversearcher-ag</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ag类似grep 和 find，但是执行效率比后两者高。</span><br><span class="line"></span><br><span class="line">ag -g &lt;File Name&gt; 类似于 find . -name &lt;File Name&gt;</span><br><span class="line"></span><br><span class="line">ag -i PATTERN： 忽略大小写搜索含PATTERN文本</span><br><span class="line"></span><br><span class="line">ag -A PATTERN：搜索含PATTERN文本，并显示匹配内容之后的n行文本，例如：ag -A 5  abc会显示搜索到的包含abc的行以及它之后5行的文本信息。</span><br><span class="line"></span><br><span class="line">ag -B PATTERN：搜索含PATTERN文本，并显示匹配内容之前的n行文本</span><br><span class="line"></span><br><span class="line">ag -C PATTERN：搜索含PATTERN文本，并同时显示匹配内容以及它前后各n行文本的内容。</span><br><span class="line"></span><br><span class="line">ag --ignore-dir &lt;Dir Name&gt;：忽略某些文件目录进行搜索。</span><br><span class="line"></span><br><span class="line">ag -w PATTERN： 全匹配搜索，只搜索与所搜内容完全匹配的文本。</span><br><span class="line"></span><br><span class="line">ag --java PATTERN： 在java文件中搜索含PATTERN的文本。</span><br><span class="line"></span><br><span class="line">ag --xml PATTERN：在XML文件中搜索含PATTERN的文本。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="jq-处理json"><a href="#jq-处理json" class="headerlink" title="jq(处理json)"></a>jq(处理json)</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Debian系，如 Ubuntu</span><br><span class="line">sudo apt-get install jq</span><br><span class="line"></span><br><span class="line"># RedHat系, 如 CentOS</span><br><span class="line">yum install jq</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat json.txt | jq &#x27;.&#x27; #美化输出</span><br><span class="line">cat json.txt | jq &#x27;.[0]&#x27; #输出列表中的第一个元素，可以使用[index]：</span><br><span class="line">cat json.txt | jq &#x27;.[0] | &#123;name:.name,city:.address.city&#125;&#x27;</span><br><span class="line"># 取出第0个,.name取出第0个name的值</span><br><span class="line">cat json.txt | jq &quot;[.[] | &#123;name:.arrayBrowser[1].name,city:.address.city&#125;]&quot;</span><br><span class="line"># 如果希望把jq的输出当作一个数组，可以在前后加上[]：</span><br></pre></td></tr></table></figure><ul><li>取出数组中的键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;&#123;&quot;abc&quot;: 1, &quot;abcd&quot;: 2, &quot;Foo&quot;: 3&#125;&#x27; | jq &#x27;keys&#x27;                                        </span><br><span class="line">[</span><br><span class="line">  &quot;Foo&quot;,</span><br><span class="line">  &quot;abc&quot;,</span><br><span class="line">  &quot;abcd&quot;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用多个过滤器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;&#123; &quot;foo&quot;: 42, &quot;bar&quot;: &quot;something else&quot;, &quot;baz&quot;: true&#125;&#x27; | jq &#x27;.foo, .bar&#x27; </span><br><span class="line">42</span><br><span class="line">&quot;something else&quot;</span><br></pre></td></tr></table></figure><ul><li>通过管道将一个过滤器的输出当做下一个过滤器的输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;[&#123;&quot;name&quot;:&quot;JSON&quot;, &quot;good&quot;:true&#125;, &#123;&quot;name&quot;:&quot;XML&quot;, &quot;good&quot;:false&#125;]&#x27; | jq &#x27;.[] | .name&#x27;                                                 </span><br><span class="line">&quot;JSON&quot;</span><br><span class="line">&quot;XML&quot;</span><br></pre></td></tr></table></figure><h1 id="shellcheck-shell脚本静态检查工具，能够识别语法错误以及不规范的写法。"><a href="#shellcheck-shell脚本静态检查工具，能够识别语法错误以及不规范的写法。" class="headerlink" title="shellcheck(shell脚本静态检查工具，能够识别语法错误以及不规范的写法。)"></a>shellcheck(shell脚本静态检查工具，能够识别语法错误以及不规范的写法。)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install shellcheck</span><br><span class="line">centos下：</span><br><span class="line"></span><br><span class="line">$ yum -y install epel-release</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcheck myscript.sh</span><br></pre></td></tr></table></figure><h1 id="fzf-命令行下模糊搜索工具"><a href="#fzf-命令行下模糊搜索工具" class="headerlink" title="fzf(命令行下模糊搜索工具)"></a>fzf(命令行下模糊搜索工具)</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><blockquote><p>搭配zsh使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br><span class="line">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><ul><li>ctrl-r  模糊匹配历史命令</li><li>CTRL-T 查找目录下条目</li></ul><blockquote><p>在输出交换窗口里<br>Ctrl-J&#x2F;Ctrl-K&#x2F;Ctrl-N&#x2F;Ctrlk-N可以用来将光标上下移动<br>Enter键用来选中条目， Ctrl-C&#x2F;Ctrl-G&#x2F;Esc用来退出<br>在多选模式下（-m), TAB和Shift-TAB用来多选<br>Mouse: 上下滚动， 选中， 双击； Shift-click或shift-scoll用于多选模式</p></blockquote><ul><li><code>fzf --preview &#39;cat &#123;&#125;&#39; # 动态预览文本</code></li></ul><h1 id="axel-多线程下载工具，下载文件时可以替代curl、wget"><a href="#axel-多线程下载工具，下载文件时可以替代curl、wget" class="headerlink" title="axel(多线程下载工具，下载文件时可以替代curl、wget)"></a>axel(多线程下载工具，下载文件时可以替代curl、wget)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install axel</span><br></pre></td></tr></table></figure><ul><li>下载单个文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel link</span><br></pre></td></tr></table></figure><ul><li>用不同的名称保存文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel -o filename link</span><br></pre></td></tr></table></figure><ul><li><p>恢复未完成的下载(执行相同命令会自动继续下载)</p></li><li><p>不显示文件下载进度</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel -q link</span><br></pre></td></tr></table></figure><h1 id="tmux-终端复用工具，替代screen、nohup。"><a href="#tmux-终端复用工具，替代screen、nohup。" class="headerlink" title="tmux(终端复用工具，替代screen、nohup。)"></a>tmux(终端复用工具，替代screen、nohup。)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tmux</span><br></pre></td></tr></table></figure><ul><li>创建会话</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s roclinux </span><br><span class="line"><span class="comment">#会话起名叫作 roclinux</span></span><br><span class="line"></span><br><span class="line">tmux</span><br><span class="line">默认起名0</span><br></pre></td></tr></table></figure><ul><li>在会话中创建子会话</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步：按 Ctrl+B 组合键，然后松开。</span><br><span class="line">第二步：再单独按一下 c 键。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>窗口间切换</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一步：按 Ctrl-B 组合键，然后松开。</span><br><span class="line">第二步：按数字 0 键。</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">在会话中</span><br><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">$ tmux switch -t 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><ul><li>kill 会话</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">会话中 <span class="built_in">exit</span> 或 ctrl+d</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">主机中</span><br><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">$ tmux kill-session -t 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux kill-session -t &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>会话后台运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一步：输入组合键 Ctrl+B，然后松开。</span><br><span class="line">第二步：输入字母 d。</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">tmux detach</span><br></pre></td></tr></table></figure><ul><li>主机查看会话</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br></pre></td></tr></table></figure><ul><li>主机进入会话</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t roclinux</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># 开启新session</span><br><span class="line">tmux</span><br><span class="line"># 开启新session并命名</span><br><span class="line">tmux new -s my_session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示所有session</span><br><span class="line">tmux ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用session编号接入</span><br><span class="line">tmux attach -t 0</span><br><span class="line"># 使用session名称接入</span><br><span class="line">tmux attach -t &lt;session-name&gt;</span><br><span class="line">tmux a -t name #简写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用session编号kill</span><br><span class="line">tmux kill-session -t 0</span><br><span class="line"># 使用session名称kill</span><br><span class="line">tmux kill-session -t &lt;session-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用session编号切换</span><br><span class="line">tmux switch -t 0</span><br><span class="line"># 使用session名称切换</span><br><span class="line">tmux switch -t &lt;session-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重命名会话</span><br><span class="line">tmux rename-session -t 0 &lt;new-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 选择需要跳转的session会话</span><br><span class="line">C + b s</span><br><span class="line"></span><br><span class="line"># 重命名当前会话</span><br><span class="line">C + b $</span><br><span class="line"></span><br><span class="line"># 断开当前session</span><br><span class="line">C + b d</span><br><span class="line"></span><br><span class="line"># 在当前session中多加一个window</span><br><span class="line">C + b c</span><br><span class="line"></span><br><span class="line"># 在一个session中的多个window中作出选择</span><br><span class="line">C + b w</span><br><span class="line"></span><br><span class="line"># 关闭当前session中的当前window</span><br><span class="line">C + b x</span><br><span class="line"></span><br><span class="line"># 进入tmux翻屏模式, 实现上下翻页</span><br><span class="line">C + b [  </span><br><span class="line">### 进入翻屏模式后PgUp PgDn 实现上下翻页（mac可以用fn + ↑ ↓实现上下翻页）</span><br><span class="line">### q 退出翻屏模式</span><br><span class="line"></span><br><span class="line">#############</span><br><span class="line"># 其他常用快捷键</span><br><span class="line">##############</span><br><span class="line"></span><br><span class="line">C + b ！  #关闭一个session中所有窗口</span><br><span class="line">C + b % #将当前窗口分成左右两分</span><br><span class="line">C + b &quot; #将当前窗口分成上下两分</span><br><span class="line">C + b 方向键 #让光标在不同的窗口中跳转 </span><br><span class="line">C + b 方向键 #按住C+b不放，同时按住方向键，可以调节光标所在窗口的大小 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux安装texlive并使用vscode远程连接</title>
      <link href="/2024/01/01/linux%E5%AE%89%E8%A3%85texlive%E5%B9%B6%E4%BD%BF%E7%94%A8vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2024/01/01/linux%E5%AE%89%E8%A3%85texlive%E5%B9%B6%E4%BD%BF%E7%94%A8vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="linux安装texlive并使用vscode远程连接"><a href="#linux安装texlive并使用vscode远程连接" class="headerlink" title="linux安装texlive并使用vscode远程连接"></a>linux安装texlive并使用vscode远程连接</h1><blockquote><p>本来一直都是在windows上写latex, 奈何实在感觉编译太慢了, 虽然也有一些优化方法(下面会讲), 但切换为linux才是更加geek的方式, 正巧我家里就有一台N100的零刻的小主机, 系统为Ubuntu, 硬盘为M.2 PCIe SSD, 内存是DDR5 4800. 秒杀我的R7 6800H的windows笔记本!</p></blockquote><h2 id="提高LaTeX的编译速度"><a href="#提高LaTeX的编译速度" class="headerlink" title="提高LaTeX的编译速度"></a>提高LaTeX的编译速度</h2><ul><li><p>取消压缩</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\special</span>&#123;dvipdfmx:config z 0&#125; <span class="comment">%取消PDF压缩，加快速度，最终版本生成的时候最好把这句话注释掉</span></span><br></pre></td></tr></table></figure><p>确实提升很大, 但是让我原本15M的pdf变成了160+M, 打开查看都要转圈圈的那种</p><p>对比测试: 只使用xelatex命令(不用xelatex -&gt; bibtex -&gt; xelatex*2)</p><table><thead><tr><th align="center"></th><th align="center">压缩</th><th align="center">取消压缩</th></tr></thead><tbody><tr><td align="center">windows</td><td align="center">36.57s</td><td align="center">9.53s</td></tr><tr><td align="center">linux</td><td align="center">21.73s</td><td align="center">3.47s</td></tr></tbody></table></li><li><blockquote><ol><li><p>使用批处理模式，即编译时加上 <code>-interaction=batchmode</code> 参数</p></li><li><p>使用预编译技术，涉及到一个宏包（mylatexformat）和两条命令：</p><ol><li><code>etex -initialize -jobname=&quot;hello&quot; &quot;&amp;pdflatex&quot; &quot;mylatexformat.ltx&quot; &quot;hello.tex&quot;</code></li><li><code>pdflatex -shell-escape &quot;&amp;hello&quot; hello.tex</code></li></ol></li></ol></blockquote><p>没有仔细研究, 可参考[tikz-intro&#x2F;t001 speedup tex&#x2F;speedup-tex.md at master · Hansimov&#x2F;tikz-intro (github.com)](<a href="https://github.com/Hansimov/tikz-intro/blob/master/t001">https://github.com/Hansimov/tikz-intro/blob/master/t001</a> speedup tex&#x2F;speedup-tex.md)</p></li></ul><h2 id="linux安装texlive"><a href="#linux安装texlive" class="headerlink" title="linux安装texlive"></a>linux安装texlive</h2><p>首先奉劝想在实验室服务器上安装的研究生(比如我)考虑清楚, 致命的问题是没有root权限. texlive确实能安装成功, 但缺失的字体就很让人难受了. 虽然部分字体也能手动安装, 但latex编译好像还是失败, 比如Arial.</p><p><img src="https://oss.zaqai.com/img/202312281526347.png" alt="image-20231228152637127"></p><h3 id="无root安装"><a href="#无root安装" class="headerlink" title="无root安装"></a>无root安装</h3><p>依然是先下载.iso文件, 由于无root, 不可能直接挂载iso文件, 只能先解压出来再安装(服务器没有能解压iso的命令, 我是电脑解压再压缩成zip上传服务器的…)</p><p>进入到目录, 执行<code>perl install-tl</code>, 自己更改安装路径, 然后安装, 就是等, 实验室服务器安装了快半个小时, 我家的服务器安装10分钟? 可能服务器安装到机械盘了吧.</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量!!!"></a>配置环境变量!!!</h4><p>各种都试一遍, 什么.zshrc  .bashrc  .profile  &#x2F;etc&#x2F;environment, 因为vscode的LaTeX Workshop插件好像识别不了新添加的PATH</p><p><img src="https://oss.zaqai.com/img/202312281543174.png" alt="image-20231228154311995"></p><p>还有终极大杀器, 直接把texlive的所有可执行文件都软链接到已有的PATH里!</p><p>虽然他还是这样提示, 但亲测完全可以编译, pdf也能出来(只是缺字体), LaTeX Workshop的作者还坚称这不是插件的问题.</p><h4 id="手动安装字体"><a href="#手动安装字体" class="headerlink" title="手动安装字体"></a>手动安装字体</h4><p>看编译log, 缺啥字体, 啥字体报错就去你<code>C:\Windows\Fonts</code>copy到服务器<code>~/.local/share/fonts/</code>上, 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -f -v</span><br><span class="line">fc-list | grep <span class="string">&quot;Arial&quot;</span> <span class="comment"># 例子, 查看Arial</span></span><br></pre></td></tr></table></figure><h3 id="root安装"><a href="#root安装" class="headerlink" title="root安装"></a>root安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o loop texlive2023.iso /mnt/texlive</span><br><span class="line"><span class="built_in">cd</span> /mnt/texlive</span><br><span class="line">./install-tl</span><br></pre></td></tr></table></figure><p>既然都root了, 别改安装目录了, 以免再有什么幺蛾子, 直接安装</p><p>环境变量参考上方, 经过我一番操作, 包括重启, LaTeX Workshop能识别到我的texlive路径了</p><h4 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt install ttf-mscorefonts-installer</span><br><span class="line">apt-get install texlive-fonts-extra texlive-fonts-recommended texlive-math-extra</span><br><span class="line">apt-get install cm-super</span><br><span class="line">tlmgr install cm-super</span><br><span class="line">tlmgr install ec</span><br></pre></td></tr></table></figure><p>都安装一下吧, 不知道有没有用, 然后再缺字体, 也要手动安装, 进入<code>/usr/share/fonts/chinese</code>, 字体上传到这</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache </span><br><span class="line">fc-list  :lang=zh|grep 华文细黑</span><br></pre></td></tr></table></figure><p>也可以尝试上面的字体安装方法, 不知道什么区别</p><p>成功!</p><p>正值考试周, 耽误两天复习时间, gan</p><h2 id="LaTeX-Workshop"><a href="#LaTeX-Workshop" class="headerlink" title="LaTeX Workshop"></a>LaTeX Workshop</h2><p>只安装这一个插件就可以了, 别的看个人需要</p><p>贴一个配置, 广为流传</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.message.error.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;-outdir=%OUTDIR%&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XeLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PDFLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BibTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LaTeXmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;*.aux&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// &quot;*.bbl&quot;,</span></span><br><span class="line">      <span class="string">&quot;*.blg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.ind&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.lof&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.lot&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.toc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.acn&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.acr&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.alg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.glg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.glo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.gls&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.ist&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.fls&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double-click&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2024/01/01/KMP/"/>
      <url>/2024/01/01/KMP/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zq.JVM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        System.out.println(solution.strStr(<span class="string">&quot;aabaabaaf&quot;</span>, <span class="string">&quot;aabaaf&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//前缀表（不减一）Java实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        getNext(next, needle);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.length()) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[] next, String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(j) != s.charAt(i)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(j) == s.charAt(i)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>原字符串str, 将被匹配的模式串pattern, str.length()&gt;&#x3D;pattern.length();</li><li>next数组长度与pattern.length()相等</li><li>前缀: 不包含最后一个字符的所有以第一个字符开头的连续子串</li><li>后缀: 不包含第一个字符的所有以最后一个字符结尾的连续子串</li><li><img src="https://camo.githubusercontent.com/efed0a1e96c2f77182f3beb78cb01b40867e7c75d11e6957e1f67d21c39dd7de/68747470733a2f2f636f64652d7468696e6b696e672e63646e2e626365626f732e636f6d2f676966732f4b4d50254537254232254245254538254145254232312e676966" alt="KMP详解1"  /></li></ul><img src="https://oss.zaqai.com/img/image-20220221121452949.png" alt="image-20220221121452949" style="zoom:50%;" /><ul><li><p>&#x3D;&#x3D;为什么这样回退正确?&#x3D;&#x3D;</p><blockquote><p>pattern的冲突字符<code>f</code>前的最长相等前后缀为<code>aa</code>, 而对于str, 在冲突字符之前都是匹配的, 所以pattern中<code>f</code>前的<code>aa</code>和str中冲突字符之前<code>aa</code>是匹配的, 而根据最长相等前后缀, pattern中<code>f</code>前的<code>aa</code>和pattern的前缀<code>aa</code>是相同的 &#x3D;&gt; </p><p>pattern的前缀<code>aa</code>和str中冲突字符之前的<code>aa</code>是匹配的</p></blockquote></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0028.%E5%AE%9E%E7%8E%B0strStr.md">leetcode-master&#x2F;0028.实现strStr.md at master · youngyangyang04&#x2F;leetcode-master · GitHub (zhou29.top)</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2024/01/01/JVM/"/>
      <url>/2024/01/01/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><ul><li><p>加载:</p><p>将编译成的字节码文件加载到JVM内存中, 并生成一个代表该类的 java.lang.Class 对象</p></li><li><p>验证: </p><p>检查字节码是否规范, </p><p>确保二进制字节流格式符合预期（比如说是否以 cafe bene 咖啡北鼻开头）。</p><p>是否所有方法都遵守访问控制关键字的限定。</p><p>方法调用的参数个数和类型是否正确。</p><p>确保变量在使用之前被正确初始化了。</p><p>检查变量是否被赋予恰当类型的值</p></li><li><p>准备:</p><p>对类变量（也称为静态变量，static 关键字修饰的）分配内存并初始化（对应数据类型的默认初始值，如 0、0L、null、false 等）</p><p>如<code>public static int value1 = 123;</code>在此阶段初始值为0</p><p>但<code>public static final int value2 = 123;</code>在此阶段初始值为123</p></li><li><p>解析:</p><p>将常量池中的符号引用转化为直接引用</p><p>直接引用通过对符号引用进行解析，找到引用的实际内存地址</p></li><li><p>初始化:</p><p>为变量赋予代码中的值</p></li></ul><h2 id="java中的native"><a href="#java中的native" class="headerlink" title="java中的native"></a>java中的native</h2><ul><li><p>作用: 扩展java的功能, 使java可以调用其他语言的代码完成任务. 比如用户上传一个视频文件，需要后台给视频加上水印，或者后台分离视频流和音频流，这个事Java就做不了，只能交给C语言去处理，然后Java调用C语言的接口.  因为涉及操作系统底层的事件，Java是处理不了的</p></li><li><p>一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现</p></li><li><p>Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问。</p></li><li><p>JNI的书写步骤如下：</p><ul><li>a.编写带有native声明的方法的Java类</li><li>b.使用javac命令编译编写的Java类</li><li>c.使用javah -jni ****来生成后缀名为.h的头文件</li><li>d.使用其他语言（C、C++）实现本地方法</li><li>e.将本地方法编写的文件生成动态链接库</li></ul></li></ul><h3 id="一个jni的实例"><a href="#一个jni的实例" class="headerlink" title="一个jni的实例"></a>一个jni的实例</h3><blockquote><p>环境为linux, windows由于gcc编译时的一些问题, 搜寻未果</p></blockquote><ul><li><p>HelloWorld.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HelloWorld</span>().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用于调用其他语言, 本例中为c</p></blockquote></li><li><p><code>javac HelloWorld.java</code>, 生成HelloWorld.class </p></li><li><p><code>javah -jni HelloWorld</code>, 生成HelloWorld.h</p></li><li><p>HelloWorld.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HelloWorld.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line">JNIEXPORT <span class="type">void</span> JNICALL <span class="title function_">Java_HelloWorld_hello</span><span class="params">(JNIEnv * env, jobject obj)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello Worlddd!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被调用的c代码</p></blockquote></li><li><p>生成动态链接库文件 libhello.so</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -fPIC -c HelloWorld.c -I ./ -I $JAVA_HOME/include/linux/ -I $JAVA_HOME/include/ </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成HelloWorld.o</span></span><br><span class="line">gcc -Wall -rdynamic -shared -o libhello.so HelloWorld.o</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成libhello.so</span></span><br></pre></td></tr></table></figure></li><li><p><code>export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH</code>, 暂时将当前目录添加进LD_LIBRARY_PATH</p></li><li><p><code>java HelloWorld</code></p></li></ul><img src="https://oss.zaqai.com/img/image-20220210121002921.png" alt="image-20220210121002921" style="zoom:67%;" /><ul><li>最终: HelloWorld.class  libhello.so两个文件</li></ul><p>&#x3D;&#x3D;静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关&#x3D;&#x3D;</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>存放8大基本类型, 对象引用, 实例的方法</li><li>程序运行, main最先进栈, 如果main调用方法a(), a()进栈…方法结束, 方法出栈</li><li>程序正在执行的方法, 一定在栈顶</li></ul><h2 id="堆-heap"><a href="#堆-heap" class="headerlink" title="堆(heap)"></a>堆(heap)</h2><ul><li><p>一个JVM只有一个堆内存, 大小可以调节</p></li><li><p>划分</p><ul><li>新生区(new)(young)(&#x3D;&#x3D;PSYoungGen&#x3D;&#x3D;)<ul><li>伊甸园区(&#x3D;&#x3D;eden&#x3D;&#x3D;)</li><li>幸村区0区(&#x3D;&#x3D;from&#x3D;&#x3D;)</li><li>幸村区1区(&#x3D;&#x3D;to&#x3D;&#x3D;)</li></ul></li><li>养老区(old)(&#x3D;&#x3D;ParOldGen&#x3D;&#x3D;)</li><li>永久区(permanent)(元空间  &#x3D;&#x3D;Metaspace&#x3D;&#x3D;  (JDK8以后))</li></ul></li><li><p>GC主要发生在伊甸园区和养老区</p></li><li><p>OOM, 堆内存溢出</p></li><li><p>新生区</p><ul><li>类诞生 成长甚至死亡的地方</li><li>所有的对象都是在伊甸园new出来的</li><li>伊甸园满后, 一次轻GC, 存活下来的到幸存0区, 0区和1区是交换的</li></ul></li><li><p>元空间</p><ul><li>包含方法区,方法区中包含常量池</li><li>还包含运行时的一些环境</li></ul></li></ul><h3 id="OOM分析"><a href="#OOM分析" class="headerlink" title="OOM分析"></a>OOM分析</h3><ul><li><p>调大堆内存, 若还溢出, 说明代码可能有问题</p><p>idea-&gt;Edit Configurations…<code>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</code></p><p><img src="https://oss.zaqai.com/img/image-20220213133451121.png" alt="image-20220213133451121"></p></li><li><p>Jprofiler</p><ul><li>idea 安装插件Jprofiler, 用于产生dump文件, 内含java对象信息</li><li>本机安装客户端, 用于查看dump文件</li><li>还需增加虚拟机配置<code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</code></li></ul></li></ul><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><ul><li>自动回收, 可以手动建议JVM进行回收, 但回不回收由JVM决定</li><li>大部分的回收发生在新生代</li><li>轻GC(普通GC)发生在新生代和幸存区(满的时候), 重GC是全局</li></ul><h3 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h3><ul><li>标记清除法<ul><li>第一次扫描, 对活着的对象进行标记</li><li>第二次扫描, 对标记的对象进行清除</li><li>优点: 不会浪费额外的空间</li><li>缺点: 两次扫描浪费时间, 会产生内存碎片</li></ul></li><li>标记整理(压缩)法<ul><li>在<strong>标记清除法</strong>基础上还来扫描, 移动对象, 避免产生内存碎片</li><li>可以标记清除几次再来压缩, 以减少开销</li></ul></li><li>复制算法<ul><li>适用于对象存活率低的场景(新生区)</li><li>当幸存0区和1区都有对象时, 会将其中一个区的对象复制到另一个区, 保证有一个是空的, 称为to</li><li>默认经历过15次GC后, 对象还没有死, 就会进入养老区</li><li>优点: 没有内存碎片</li><li>缺点: 浪费一半空间(0区  1区)</li></ul></li><li>引用计数器<ul><li>记录每个对象的引用次数, 当次数为0时, 清除</li></ul></li></ul><h3 id="GC算法对比"><a href="#GC算法对比" class="headerlink" title="GC算法对比"></a>GC算法对比</h3><ul><li>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</li><li>内存整齐度：复制算法&#x3D;标记压缩算法&gt;标记清除算法</li><li>内存利用率：标记压缩算法&#x3D;标记清除算法&gt;复制算法</li></ul><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul><li><p>年轻代：存活率低-&gt;复制算法</p></li><li><p>老年代：区域大, 存活率高-&gt;标记清除 标记压缩混合实现</p></li></ul><h2 id="JMM-java-memory-module"><a href="#JMM-java-memory-module" class="headerlink" title="JMM-java memory module"></a>JMM-java memory module</h2><blockquote><p><a href="https://blog.csdn.net/u011181989/article/details/92242435">Java如何调用C程序，JNI技术_追风人的博客-CSDN博客_java调用c语言</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jsRegex</title>
      <link href="/2024/01/01/jsRegex/"/>
      <url>/2024/01/01/jsRegex/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>string</strong>.match(&#x2F;\d+&#x2F;gis)</p><blockquote><p>return an array of string that matched the regex.</p><p>\d:match number</p><p>\w:数字 字母 下划线</p><p>+:match one or more</p><p>*:匹配0次或多次</p><p>g:global match</p><p>i:ignore capital</p><p>s:忽略换行符</p></blockquote></li><li><p><strong>string</strong>.match(&#x2F;[^\da-zA-Z]+&#x2F;g)</p><blockquote><p>^:don’t match </p><p>[]:当中的元素为或的关系  当中的元素不会被正则转义（如小括号放在里面就表示小括号）</p></blockquote></li><li><p><strong>string</strong>.match(&#x2F;.+&#x2F;g)</p><blockquote><p>.:除了换行符以外的任何字符</p></blockquote></li><li><p>**-**是特殊字符，表示他本身时需要转义-</p></li><li><p><strong>string</strong>.match(&#x2F;\p{sc&#x3D;Han}+&#x2F;gu)</p><blockquote><p>专门匹配中文  u不可缺少</p></blockquote></li><li><p><strong>string</strong>.match(&#x2F;[\s\S]&#x2F;g)   或  <strong>string</strong>.match(&#x2F;[\d\D]&#x2F;g) </p><blockquote><p>匹配所有内容</p></blockquote></li><li><p><strong>string</strong>.match(&#x2F;&lt;(h[1-6])&gt;[\s\S]*&lt;/<font color="red">\1</font>&gt;&#x2F;gi)</p><blockquote><p>\1:正则中第一次出现的()里面的内容  如果(?:regex),加上?:表示不计入分组</p></blockquote></li><li><p>贪婪:</p><ol><li>+匹配一次或多次 </li><li>*0次或多次</li><li>?0次或一次</li></ol></li><li><p>禁止贪婪:加一个?    如&#x2F;h+?&#x2F;表示只匹配一次h</p></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jetson nano配置</title>
      <link href="/2024/01/01/jetson%20nano%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/01/01/jetson%20nano%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter-notebook"></a>jupyter-notebook</h1><blockquote><p>开机启动时显示:jupyter notebook服务启动失败，没找到原因，只能开机后让它自动执行命令来开启</p></blockquote><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/jetson/.local/bin/jupyter notebook /home/jetson/jupyter_notebook_config.py –allow-root</span><br></pre></td></tr></table></figure><blockquote><p><code>jupyter</code> 最好带上命令路径,否则可能提示找不到命令(虽然路径已经在PATH里,但遇到过找不到命令的情况),<code>jupyter_notebook_config.py</code> 是配置文件,内有端口号 ip等信息. 如果不加配置文件,默认只监听localhost,而且局域网无法访问</p></blockquote><h2 id="设置自启动命令"><a href="#设置自启动命令" class="headerlink" title="设置自启动命令"></a>设置自启动命令</h2><ul><li>在合适位置(&#x2F;home&#x2F;jetson)新建文件<code>new_service.py</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#command content</span><br><span class="line">/home/jetson/.local/bin/jupyter notebook /home/jetson/jupyter_notebook_config.py –allow-root</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li>设置自启动<br><img src="https://oss.zaqai.com/img/a12w33.png" alt="a12w33"><br><img src="https://oss.zaqai.com/img/1681e1a1726c37d2.png" alt="1681e1a1726c37d2"><br><img src="https://ftp.bmp.ovh/imgs/2021/09/b32aa5199f7ad99b.png"></li><li>要设置自动登录<br><img src="https://oss.zaqai.com/img/54acb9ca0ea7d203.png" alt="54acb9ca0ea7d203"></li></ul><h1 id="配置远程桌面"><a href="#配置远程桌面" class="headerlink" title="配置远程桌面"></a>配置远程桌面</h1><h2 id="参考这个"><a href="#参考这个" class="headerlink" title="参考这个"></a>参考这个</h2><p><a href="https://www.cnblogs.com/cloudrivers/p/12110117.html">https://www.cnblogs.com/cloudrivers/p/12110117.html</a><br><img src="https://oss.zaqai.com/img/56c7e289b31c13ff.png" alt="56c7e289b31c13ff"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vino</span><br><span class="line">sudo vi /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;key name=&quot;enabled&quot; type=&quot;b&quot;&gt;</span><br><span class="line">&lt;summary&gt;Enable remote access to the desktop&lt;/summary&gt;</span><br><span class="line">&lt;description&gt;</span><br><span class="line">If true, allows remote access to the desktop via the RFB</span><br><span class="line">protocol. Users on remote machines may then connect to the</span><br><span class="line">desktop using a VNC viewer.</span><br><span class="line">&lt;/description&gt;</span><br><span class="line">&lt;default&gt;false&lt;/default&gt;</span><br><span class="line">&lt;/key&gt;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/256ad5ef81aa3fa4.png" alt="256ad5ef81aa3fa4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo glib-compile-schemas /usr/share/glib-2.0/schemas</span><br><span class="line">/usr/lib/vino/vino-server    # 好像会报错，不过没关系</span><br><span class="line">sudo apt-get install dconf-editor</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/b22089a855cff18d.png" alt="b22089a855cff18d"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dconf-editor</span><br><span class="line">/usr/lib/vino/vino-server --display=:0</span><br><span class="line">sudo apt-get install xrdp vnc4server xbase-clients</span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/04a7264295ba17b0.png" alt="04a7264295ba17b0"></p><h2 id="进入windows远程桌面会闪退"><a href="#进入windows远程桌面会闪退" class="headerlink" title="进入windows远程桌面会闪退"></a>进入windows远程桌面会闪退</h2><blockquote><p>到这一步，进入的远程桌面是和显示器的桌面环境一样的，但比较卡，还有问题<br>所以选择安装xfce</p></blockquote><p>参考这个<br><a href="https://blog.csdn.net/weixin_44967177/article/details/107869100">https://blog.csdn.net/weixin_44967177/article/details/107869100</a></p><blockquote><p>2.1不用做，2.2 2.3做过了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/xrdp/startwm.sh</span><br><span class="line">注释最下面的test和exec两行</span><br><span class="line">增加新的一行 gnome-session</span><br><span class="line"></span><br><span class="line">sudo apt-get install xfce4</span><br><span class="line">echo xfce4-session &gt;~/.xsession</span><br><span class="line">touch .session</span><br><span class="line">sudo vim/etc/xrdp/startwm.sh</span><br><span class="line">在打开的startwm.sh文件前面加</span><br><span class="line">xfce4-session</span><br><span class="line"></span><br><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure><h2 id="远程桌面无法打开-终端Terminal"><a href="#远程桌面无法打开-终端Terminal" class="headerlink" title="远程桌面无法打开 终端Terminal"></a>远程桌面无法打开 终端Terminal</h2><p>参考这个<br><a href="https://blog.csdn.net/xiao__wen/article/details/106121671">https://blog.csdn.net/xiao__wen/article/details/106121671</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config x-terminal-emulator</span><br><span class="line">选择xterm 对应的编号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/2024/01/01/java%E9%9B%86%E5%90%88/"/>
      <url>/2024/01/01/java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="java集合"><a href="#java集合" class="headerlink" title="java集合"></a>java集合</h1><h2 id="一些遍历方法"><a href="#一些遍历方法" class="headerlink" title="一些遍历方法"></a>一些遍历方法</h2><h3 id="迭代器遍历列表"><a href="#迭代器遍历列表" class="headerlink" title="迭代器遍历列表"></a>迭代器遍历列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种：普遍使用，二次取值()</span></span><br><span class="line">System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line">System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><blockquote><p>LinkedList类实现了Queue接口，因此我们可以把LinkedList当成Queue来用</p><p>&#x2F;&#x2F;add()和remove()方法在失败的时候会抛出异常(不推荐)</p><p>一般情况下 Queue 的实现类都不允许添加 null 元素, 防止和poll() peek()中返回的null混淆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">offer(element);<span class="comment">//队列满时用add()会抛异常, 而本方法返回false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回第一个元素，并在队列中删除</span></span><br><span class="line">poll();<span class="comment">//队列为空时,remove()抛异常, 本方法返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">element();<span class="comment">//为空时抛异常</span></span><br><span class="line">peek();<span class="comment">//为空时返回null</span></span><br><span class="line"></span><br><span class="line">put(e);<span class="comment">//         添加一个元素                      如果队列满，则阻塞</span></span><br><span class="line">take();<span class="comment">//        移除并返回队列头部的元素     如果队列为空，则阻塞   </span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h3><ul><li>约定front指向队列的第一个元素，也就是说data[front]就是队头数据，front初始值为0。</li><li>约定rear指向队列的最后一个元素的后一个位置，也就是说data[rear-1]就是队尾数据，rear初始值为0。</li><li>队列满的条件是：***( rear+1 )% maxSize &#x3D;&#x3D; front***</li><li>队列空的条件是：rear &#x3D;&#x3D; front</li><li>队列中的元素个数为：***( rear  - front + maxsize) % maxSize***</li><li>因为rear指向队尾的后面一个位置，这个位置就不能存数据，因此有效数据只有maxSize-1个</li></ul><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><blockquote><p>基于Vector实现的LIFO的栈</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line">Stack&lt;Type&gt; stacks = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">push(element);</span><br><span class="line">pop();<span class="comment">//返回并删除</span></span><br><span class="line">peek();<span class="comment">//只返回</span></span><br><span class="line">search(element);<span class="comment">//返回元素的位置, 如2表示栈顶-1</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><blockquote><p>一种线程安全的List实现；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;Type&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">add(element) - 向向量（vector）添加元素</span><br><span class="line">add(index, element) - 将元素添加到指定位置</span><br><span class="line">addAll(vector) - 将向量（vector）的所有元素添加到另一个向量（vector）</span><br><span class="line">addElement(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">setElementAt(E obj, <span class="type">int</span> index)</span><br><span class="line">insertElementAt(E obj, <span class="type">int</span> index) </span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">get(index) - 返回由索引指定的元素</span><br><span class="line">firstElement() </span><br><span class="line">lastElement() </span><br><span class="line">elementAt(<span class="type">int</span> index)</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E obj)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E obj, <span class="type">int</span> index)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">lastindexOf</span><span class="params">(E obj)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(E obj, <span class="type">int</span> index)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeElement</span><span class="params">(E obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">remove(index) - 从指定位置删除元素</span><br><span class="line">removeAll() - 删除所有元素</span><br><span class="line">clear() - 删除所有元素。它比removeAll()更高效</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAllElement</span><span class="params">()</span>; </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeElementAt</span><span class="params">(<span class="type">int</span> index)</span> </span><br><span class="line"></span><br><span class="line">set()更改向量的元素</span><br><span class="line">size()返回向量的大小</span><br><span class="line">toArray()将向量转换为数组</span><br><span class="line">toString()将向量转换为字符串</span><br><span class="line">contains()在向量中搜索指定的元素并返回一个布尔值</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">Enumeration&lt;String&gt; elements = vector.elements();</span><br><span class="line"><span class="keyword">while</span> (elements.hasMoreElements()) &#123;</span><br><span class="line">    System.out.println(elements.nextElement());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Enumeration过时了, 推荐Iterator</span></span><br><span class="line">Iterator&lt;String&gt; it = vector.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote><p>底层基于数组, 访问O(1), 插入删除O(n), 内存开销较LinkedList小</p><p>线程不安全</p></blockquote><p><img src="https://oss.zaqai.com/img/ArrayList-1-768x406-1.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 引入 ArrayList 类</span></span><br><span class="line">ArrayList&lt;E&gt; l =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();　 <span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">// E: 泛型数据类型，只能为引用数据类型(即int不行, Integer行)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(e)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(index, e)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(object)</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span><span class="comment">//返回被修改的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(index index)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span><span class="title function_">indexOf</span><span class="params">(Object o)</span> <span class="comment">//lastIndexOf</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span><span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">Iterator&lt;E&gt;<span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">Object[] toArray()</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">Collections.sort(l);</span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><blockquote><p>底层基于链表, 插入删除O(1), 访问O(n), 内存开销大</p><p>线程不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="type">boolean</span><span class="title function_">add</span><span class="params">(E e)</span><span class="comment">//append末尾</span></span><br><span class="line">    <span class="keyword">void</span><span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span></span><br><span class="line">    <span class="keyword">void</span><span class="title function_">addFirst</span><span class="params">(E e)</span><span class="comment">//添加到起始</span></span><br><span class="line">    <span class="keyword">void</span><span class="title function_">addLast</span><span class="params">(E e)</span><span class="comment">//添加到末尾</span></span><br><span class="line">    <span class="type">boolean</span><span class="title function_">offer</span><span class="params">(E e)</span><span class="comment">//添加到末尾</span></span><br><span class="line">    <span class="type">boolean</span><span class="title function_">offerFirst</span><span class="params">(E e)</span><span class="comment">//添加到起始</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span><span class="title function_">contains</span><span class="params">(Object o)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    E<span class="title function_">element</span><span class="params">()</span><span class="comment">// 返回但不删除头元素</span></span><br><span class="line">    E<span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line">    E<span class="title function_">getFirst</span><span class="params">()</span></span><br><span class="line">    E<span class="title function_">getLast</span><span class="params">()</span></span><br><span class="line">    E<span class="title function_">peek</span><span class="params">()</span><span class="comment">//返回但不删除头元素</span></span><br><span class="line">    E<span class="title function_">peekFirst</span><span class="params">()</span><span class="comment">//返回但不删除头元素(也是头元素)  peekLast 最后</span></span><br><span class="line">    E<span class="title function_">poll</span><span class="params">()</span><span class="comment">//返回并删除头元素  pollFirst() pollLast()</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    E<span class="title function_">pop</span><span class="params">()</span><span class="comment">//删除栈顶</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span><span class="title function_">push</span><span class="params">(E e)</span><span class="comment">//push栈顶</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span><span class="title function_">indexOf</span><span class="params">(Object o)</span></span><br><span class="line">    <span class="type">int</span><span class="title function_">lastIndexOf</span><span class="params">(Object o)</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p><img src="https://oss.zaqai.com/img/image-20220227171401203.png" alt="image-20220227171401203"></p><blockquote><p>是一个散列表, 存储的是键值对映射</p><p>操作基本上和HashMap一样, 不同的是HashTable是同步的， 线程安全, 也就意味着效率比HashMap低</p><p>不允许键或值为null</p><p>底层数组长度可以为任意值，这就造成了hash算法散射不均匀，容易造成hash冲突，默认为11</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">( )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span></span><br><span class="line">    Enumeration <span class="title function_">elements</span><span class="params">( )</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(Object key)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">( )</span></span><br><span class="line">    Enumeration <span class="title function_">keys</span><span class="params">( )</span></span><br><span class="line">    Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span></span><br><span class="line">    Object <span class="title function_">remove</span><span class="params">(Object key)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">( )</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> table.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p><img src="https://oss.zaqai.com/img/image-20220227171334881.png"></p><blockquote><p>允许有一个键为null，允许多个值为null</p><p>底层数组长度必须为2的幂，这样做是为了hash准备，默认为16</p><p>没有同步， 线程不安全，如需线程安全可使用<code>ConcurrentHashMap </code>，HashTable并发性不如 ConcurrentHashMap，因为 ConcurrentHashMap 引入了分段锁。Hashtable 不建议在新代码中使用</p></blockquote><ul><li><p>由数组＋链表组成, 数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</p></li><li><p>当两个key均被hash到数组同一个位置时，会在该位置挂起一个链表</p></li><li><p>java8之后，当链表长度达到8时，会将链表转换为红黑树，遍历红黑树复杂度为O(logn)，由于链表(O(n))</p></li><li><p>满了之后，数组会扩容值原来的二倍，在jdk1.7及之前，需要rehash，重新计算每个元素位置，可能导致原来冲突的位置不再冲突。</p><blockquote><p>在jdk1.8之后，做了巧妙的优化，如在大小为16的时候，5和21会被hash到同一个位置，扩容后大小为32，5还在5，21变为21位置。对比5（0101）和21（10101），只是前面多了个1，也就是变为2倍。</p></blockquote></li></ul><blockquote><p>所以只用将key和11111做与操作就知道扩容后的位置，如0101&amp;11111&#x3D;0101（5还是5），10101&amp;11111&#x3D;10101（21）</p></blockquote><blockquote><p>如果定位到的数组位置不含链表（当前entry的next指向null）,那么查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</p></blockquote><p>  <img src="https://oss.zaqai.com/img/20181102221702492.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api同HashTable</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><blockquote><p>红黑树对所有的key进行排序</p></blockquote><p><img src="https://oss.zaqai.com/img/5621908-9e7544ea7dd5670c.png" alt="img"></p><ul><li>不允许出现重复的key；</li><li>可以插入null键，null值；</li><li>可以对元素进行排序；</li><li>无序集合（插入和遍历顺序不一致）</li></ul><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><blockquote><p>红黑树，即红颜色和黑颜色并存的二叉树，插入的元素节点会被赋为红色或者黑色，待所有元素插入完成后就形成了一颗完整的红黑树, 底层是二叉查找树</p></blockquote><p><img src="https://oss.zaqai.com/img/5621908-3829c438246607f5.jpg" alt="img"></p><ul><li>树中每个节点必须是有颜色的，要么红色，要么黑色；</li><li>树中的根节点必须是黑色的；</li><li>树中的叶节点必须是黑色的，也就是树尾的NIL节点或者为null的节点；</li><li>树中任意一个节点如果是红色的，那么它的两个子节点一点是黑色的；</li><li>任意节点到叶节点（树最下面一个节点）的每一条路径所包含的黑色节点数目一定相同</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>唯一性的比较过程:</p><p>存储元素首先会使用hash()算法函数生成一个int类型hashCode散列值，然后已经的所存储的元素的hashCode值比较，如果hashCode不相等，则所存储的两个对象一定不相等，此时存储当前的新的hashCode值处的元素对象；</p><p>如果hashCode相等，存储元素的对象还是不一定相等，此时会调用equals()方法判断两个对象的内容是否相等，如果内容相等，那么就是同一个对象，无需存储；</p><p>如果比较的内容不相等，那么就是不同的对象，就该存储了，此时就要采用哈希的解决地址冲突算法，在当前hashCode值处类似一个新的链表， 在同一个hashCode值的后面存储存储不同的对象，这样就保证了元素的唯一性。</p><p> HashSet采用哈希算法保证不重复，底层用数组存储数据。默认初始化容量16，加载因子0.75。</p></blockquote><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的。也可以根据访问顺序排序。而HashMap 在遍历时不能保证顺序</p><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><p>继承自HashSet、又基于 LinkedHashMap 来实现的，元素顺序是可以保证的</p><blockquote><p>覆盖hashCode()方法的原则：</p><p>1、一定要让那些我们认为相同的对象返回相同的hashCode值<br>2、尽量让那些我们认为不同的对象返回不同的hashCode值，否则，就会增加冲突的概率。<br>3、尽量的让hashCode值散列开（两值用异或运算可使结果的范围更广）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础笔记_2023.11</title>
      <link href="/2024/01/01/java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0_2023.11/"/>
      <url>/2024/01/01/java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0_2023.11/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础笔记-2023-11"><a href="#java基础笔记-2023-11" class="headerlink" title="java基础笔记_2023.11"></a>java基础笔记_2023.11</h1><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><ul><li><p>Integer对-128~high(high值可在JVM参数里配置)的值有缓存, 通过自动装箱机制创建的Integer会直接由缓存数组返回, 所以缓存范围内的相同值的对象都是同一个, 当然你自己new出来的就不一样了</p></li><li><p>字符串转Integer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;666&quot;</span>);  <span class="comment">// 已弃用, 使用valueof的时间和空间性能更好</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;5555&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span>  Integer.parseInt(<span class="string">&quot;12&quot;</span>); </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java之StringBuilder StringBuffer String</title>
      <link href="/2024/01/01/java%E4%B9%8BStringBuilder%20StringBuffer%20String/"/>
      <url>/2024/01/01/java%E4%B9%8BStringBuilder%20StringBuffer%20String/</url>
      
        <content type="html"><![CDATA[<h1 id="java之StringBuilder-StringBuffer-String"><a href="#java之StringBuilder-StringBuffer-String" class="headerlink" title="java之StringBuilder StringBuffer String"></a>java之StringBuilder StringBuffer String</h1><p><img src="https://oss.zaqai.com/img/java-string-20201208.png" alt="img"></p><blockquote><p>在使用 StringBuffer 或StringBuilder 类时，每次都会对对象本身进行操作，而不是像String生成新的对象</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p></blockquote><blockquote><p>StringBuilder是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是StringBuilder对象中的内容是可变的</p></blockquote><h2 id="StringBuilder-StringBuffer-方法基本相同"><a href="#StringBuilder-StringBuffer-方法基本相同" class="headerlink" title="StringBuilder StringBuffer(方法基本相同)"></a>StringBuilder StringBuffer(方法基本相同)</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// 对象名.length() 序列长度</span></span><br><span class="line">System.out.println(sb.length());  <span class="comment">// 0</span></span><br><span class="line">System.out.println(sb.capacity()); <span class="comment">//获取容量, 大于等于length, 当capacity不够时会自动扩容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象名.append() 追加到序列</span></span><br><span class="line">sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line">sb.append(<span class="number">1</span>).append(<span class="string">&quot;world&quot;</span>).append(<span class="number">2</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">// helloa1world2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引是5的位置替换成空格</span></span><br><span class="line">sb.setCharAt(<span class="number">5</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">// hello 1world2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定位置0前插入0</span></span><br><span class="line">sb.insert(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">// 0hello 1world2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除索引6(包含)至索引14(不包含)的字符串</span></span><br><span class="line">sb.delete(<span class="number">6</span>, <span class="number">14</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">// 0hello</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">append</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">reverse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> offset, Object o)</span></span><br><span class="line"></span><br><span class="line">replace(<span class="type">int</span> start, <span class="type">int</span> end, String str);</span><br><span class="line"></span><br><span class="line">...其他String方法...</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数组转为String</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(&#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串连接</span></span><br><span class="line">String.concat(String);</span><br><span class="line">String+String;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.format : String</span></span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The value of %f, while variable is %d, and is %s&quot;</span>, <span class="number">2.2</span>, <span class="number">2</span>, <span class="string">&quot;de&quot;</span>)); <span class="comment">// The value of 2.200000, while variable is 2, and is de</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String s)</span>; <span class="comment">// 字典序比较, 完全equal返回0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compareToIgnoreCase</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">concat</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">copyValueOf</span><span class="params">(<span class="type">char</span>[] data , [<span class="type">int</span> offset, <span class="type">int</span> count])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">endsWith</span><span class="params">(String suffix)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] getBytes([String charSet]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>; <span class="comment">// 返回此字符串的哈希码</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch, [<span class="type">int</span> fromIndex])</span>; <span class="comment">// 从指定索引开始查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str, [<span class="type">int</span> fromIndex])</span>; <span class="comment">// 从指定索引开始查找</span></span><br><span class="line">...lastIndexOf...</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(String regex)</span>;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">replace</span><span class="params">(<span class="type">char</span> oldChar, <span class="type">char</span> newChar)</span>;</span><br><span class="line">String <span class="title function_">replaceAll</span><span class="params">(String regex, String replacement; // 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="params">String replaceFirst(String regex, String replacement)</span>;</span><br><span class="line"></span><br><span class="line">String[] split(String regex, [<span class="type">int</span> limit]); <span class="comment">// 指定分割的份数</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span>;</span><br><span class="line"></span><br><span class="line">CharSequence <span class="title function_">subSequence</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span>;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, [<span class="type">int</span> endIndex])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] toCharArray();</span><br><span class="line"></span><br><span class="line">String <span class="title function_">toLowerCase</span><span class="params">()</span>;</span><br><span class="line">String <span class="title function_">toUpperCase</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">trim</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(primitive data type x)</span>; <span class="comment">// 返回给定data type类型x参数的字符串表示形式。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="之间的转换"><a href="#之间的转换" class="headerlink" title="之间的转换"></a>之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string转换成StringBuilder</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">System.out.println(sb);  <span class="comment">// hello</span></span><br><span class="line"><span class="comment">// StringBuilder转换成String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">System.out.println(s);  <span class="comment">// hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性--Stream流式编程</title>
      <link href="/2024/01/01/java8%E6%96%B0%E7%89%B9%E6%80%A7--Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/01/01/java8%E6%96%B0%E7%89%B9%E6%80%A7--Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="java8新特性–Stream流式编程"><a href="#java8新特性–Stream流式编程" class="headerlink" title="java8新特性–Stream流式编程"></a>java8新特性–Stream流式编程</h1><blockquote><p>对于流式编程, 学过scala和python的同学应该有所了解, 举个例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line"></span><br><span class="line">list.stream()</span><br><span class="line">        .filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">        .filter(s -&gt; s.length() == <span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>是不是十分简洁优雅, 我当时学习scala的时候, 就被这种流式编程所惊艳到, 进而了解到java8也有这种特性, 以后输出数组什么的再也不用for循环了</p></blockquote><h2 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h2><ul><li>List Set直接.stream()</li><li>map.keySet().stream()  &#x2F;&#x2F;先转化为Set再.stream()</li><li>Collection<String> map2 &#x3D; map.values();      Stream<String> stream4 &#x3D; map2.stream();</li><li>map.entrySet().stream()</li><li>Stream.of(arr);          &#x2F;&#x2F; 根据数组获取流</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法名称</th><th>方法作用</th><th>方法种类</th></tr></thead><tbody><tr><td>count</td><td>统计个数</td><td>终结方法</td></tr><tr><td>forEach</td><td>逐一处理</td><td>终结方法</td></tr><tr><td>filter</td><td>过滤</td><td>函数拼接</td></tr><tr><td>limit</td><td>取用前几个</td><td>函数拼接</td></tr><tr><td>skip</td><td>跳过前几个</td><td>函数拼接</td></tr><tr><td>map</td><td>映射</td><td>函数拼接</td></tr><tr><td>concat</td><td>组合</td><td>函数拼接</td></tr></tbody></table><ul><li><p>forEach 将每一个流元素交给相应的函数进行处理</p></li><li><p>filter 将一个流转换成另一个子集流</p></li><li><p>map 将流中的元素映射到另一个流中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取对应的平方数</span></span><br><span class="line">numbers.stream().map(i -&gt; i * i).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li><p>concat 将两个流合并为一个流</p><p><code> Stream&lt;String&gt; result = Stream.concat(streamA, streamB);</code></p></li></ul><h2 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;张老三&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张小三&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;赵五&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;王八&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 需求：过滤出姓张的并且长度为3的元素</span></span><br><span class="line">        Stream&lt;String&gt; stream = list2.stream().filter((String name) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> name.startsWith(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">        &#125;).filter((String name) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> name.length() == <span class="number">3</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// stream 收集到单列集合中</span></span><br><span class="line">        stream.collect(Collectors.toList()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 自动装箱 自动拆箱</title>
      <link href="/2024/01/01/Java%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%20%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1/"/>
      <url>/2024/01/01/Java%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%20%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-自动装箱-自动拆箱"><a href="#Java-自动装箱-自动拆箱" class="headerlink" title="Java 自动装箱 自动拆箱"></a>Java 自动装箱 自动拆箱</h1><blockquote><p>为什么会写这篇文章? 因为在比较两个<code>ArrayList&lt;Integer&gt;</code>元素的值是否完全对应相等时, 遇到了一个大坑</p><p><img src="https://oss.zaqai.com/img/image-20220304153459943.png" alt="image-20220304153459943"></p><p>明明都是-685, 怎么就不相等了呢? 起初猜想是因为Integer比较的是地址, 但5判断的是相等啊, 又经过一番搜索, 才明白, 遂写下以记录</p></blockquote><blockquote><p>自动装箱 自动拆箱于JDK1.5中引入</p></blockquote><h2 id="int常量池"><a href="#int常量池" class="headerlink" title="int常量池"></a>int常量池</h2><p>要搞清楚上面这个问题, 就要了解常量池</p><blockquote><p>JVM会自动维护八种基本类型的常量池，int常量池中初始化-128~127的范围</p></blockquote><p>我们来看一下<code>Integer.java</code>的源码来验证一下</p><p><img src="https://oss.zaqai.com/img/image-20220304155025669.png" alt="image-20220304155025669"></p><blockquote><p>JVM在启动时就已经将-128~127的Integer对象全部new出来, 因为这个范围内的数比较常用</p></blockquote><h2 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h2><p>定义: 自动将基本数据类型转换为封装类型(如int转为Integer)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 相当于Java编译器替我们执行了 Integer.valueOf(5);</span></span><br></pre></td></tr></table></figure><p>可以通过反编译class文件看出</p><p><img src="https://oss.zaqai.com/img/image-20220304160841851.png"></p><p><img src="https://oss.zaqai.com/img/image-20220304155437062.png" alt="image-20220304155437062"></p><p><code>valueOf</code>方法会判断数值在不在-128~127范围内, 在的话直接返回已经创建的Integer对象, 不在的话再new出来. 这也就解释了为什么最开始的问题中5是相等的, 而-685不相等</p><h2 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h2><p>定义: 自动将封装数据类型转换为基本类型(如Integer转为int)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="number">1.</span> <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a; <span class="comment">// 相当于Java编译器替我们执行了Integer.intValue(5);</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zaqai.com/img/image-20220304161943395.png" alt="image-20220304161943395"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最开始的问题中5相等, 是因为两个<code>ArrayList&lt;Integer&gt;</code>的值都是通过add(int i)添加的, 换句话说, 都发生了自动装箱, 调用了<code>valueOf</code>方法. 5在常量池中, 所以直接返回, 两个list中5相等</p><p>而-685不在常量池中, 都是在堆内存中new出来的, 地址不相等</p><p>当然如果<code>Integer a = new Integer(5);</code>, <code>Integer b = new Integer(5);</code>, <code>a==b</code>为false, 因为此过程是直接new, 不会发生自动装箱, 也就不会调用<code>valueOf</code>方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java List排序</title>
      <link href="/2024/01/01/Java%20List%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/01/01/Java%20List%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-List排序"><a href="#Java-List排序" class="headerlink" title="Java List排序"></a>Java List排序</h1><blockquote><p>首先介绍常用的排序用法</p><p><code>Collections.sort(List list)</code> &#x2F;&#x2F;默认升序, 类需实现<code>Comparable</code>接口, 重写<code>compareTo</code>方法</p><p><code>Collections.sort(List list,Comparator&lt;? super T&gt; c)</code>   &#x2F;&#x2F;传递一个比较器对象, 需重写<code>compare</code>方法</p></blockquote><h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p>整个<code>Comparable.java</code>文件只有一个方法<code>compareTo</code></p><p><img src="https://oss.zaqai.com/img/image-20220303183018375.png" alt="image-20220303183018375"></p><h3 id="基本类型的封装类"><a href="#基本类型的封装类" class="headerlink" title="基本类型的封装类"></a>基本类型的封装类</h3><p>基本类型的封装类(Integer String等)都已经实现了<code>Comparable</code>接口并重写了<code>compareTo</code>方法, 所以可以直接<code>Collections.sort(List list);</code>, 不用传递<code>Comparator </code>了</p><blockquote><p>如<code>Integer.java</code>文件</p><p><img src="https://oss.zaqai.com/img/image-20220303184309446.png" alt="image-20220303184309446"></p></blockquote><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><p>自定义类想实现比较的话, 也可以实现<code>Comparable</code>接口并重写了<code>compareTo</code>方法</p><h2 id="Comparator-接口"><a href="#Comparator-接口" class="headerlink" title="Comparator 接口"></a>Comparator 接口</h2><p><code>Comparator </code>接口的方法比较多, 但我们只需关注<code>compare</code>方法</p><p><img src="https://oss.zaqai.com/img/image-20220303185105902.png" alt="image-20220303185105902"></p><p>传递比较器, 重写<code>compare</code>方法</p><p><img src="https://oss.zaqai.com/img/image-20220303190657838.png" alt="image-20220303190657838"></p><blockquote><p>学会了这种方法新建list, 大概大括号里面就是对象内部了吧, 所以可以直接调方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="number">2</span>);</span><br><span class="line">    add(<span class="number">1</span>);</span><br><span class="line">    add(<span class="number">5</span>);</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="自定义类-1"><a href="#自定义类-1" class="headerlink" title="自定义类"></a>自定义类</h3><p>对于自定义类, 也可不用实现<code>Comparable</code>接口并重写了<code>compareTo</code>方法, 直接传递一个比较器, 重写<code>compare</code>也行</p><hr><h2 id="扩展–Java8新排序方法"><a href="#扩展–Java8新排序方法" class="headerlink" title="扩展–Java8新排序方法"></a>扩展–Java8新排序方法</h2><h3 id="基础类型-List-排序"><a href="#基础类型-List-排序" class="headerlink" title="基础类型 List 排序"></a>基础类型 List 排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sort(Comparator.naturalOrder()); <span class="comment">/* naturalOrder自然排序即：正序 */</span></span><br><span class="line">list.sort(Comparator.reverseOrder()); <span class="comment">/* reverseOrder倒序 */</span></span><br></pre></td></tr></table></figure><h3 id="自定义类排序-list-sort-五种写法"><a href="#自定义类排序-list-sort-五种写法" class="headerlink" title="自定义类排序(list.sort()五种写法)"></a>自定义类排序(list.sort()五种写法)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;TreeNode&gt; listNodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TreeNode&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">    add(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>));</span><br><span class="line">    add(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>));</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*        listNodes.sort(new Comparator&lt;TreeNode&gt;() &#123;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public int compare(TreeNode o1, TreeNode o2) &#123;</span></span><br><span class="line"><span class="comment">//                return o1.val-o2.val;</span></span><br><span class="line"><span class="comment">        return o2.val-o1.val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        listNodes.sort((o1,o2)-&gt;o2.val-o1.val);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        listNodes.sort(Comparator.comparing(node -&gt; node.val));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        listNodes.sort(Comparator.comparing(TreeNode::getVal)); // getVal为getter方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Comparator&lt;TreeNode&gt; comparator =(o1,o2)-&gt;o2.val-o1.val;</span><br><span class="line">listNodes.sort(comparator);</span><br><span class="line"><span class="comment">//        listNodes.sort(comparator.reversed());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listNodes.forEach(node-&gt;System.out.print(node.val));</span><br></pre></td></tr></table></figure><h4 id="二次排序"><a href="#二次排序" class="headerlink" title="二次排序"></a>二次排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        多条件排序第一个写法，先按Age排序，再根据Salary排序</span></span><br><span class="line"><span class="comment">//        Comparator&lt;Developer&gt; comparator = (o1, o2) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            if (o1.getName().equals(o2.getName())) &#123;</span></span><br><span class="line"><span class="comment">//                return o1.getSalary().compareTo(o2.getSalary());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return o2.getAge().compareTo(o1.getAge());</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        listDevs.sort(comparator.reversed());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        多条件排序，先按Age排序，再根据Salary排序</span></span><br><span class="line"><span class="comment">//        Comparator&lt;Developer&gt; ageComparator = (o1, o2)-&gt;o1.getAge().compareTo(o2.getAge());</span></span><br><span class="line"><span class="comment">//        Comparator&lt;Developer&gt; salaryComparator = (o1, o2)-&gt;o1.getSalary().compareTo(o2.getSalary());</span></span><br><span class="line"><span class="comment">//        listDevs.sort(ageComparator.thenComparing(salaryComparator));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        多条件排序第二个写法，先按Age排序，再根据Salary排序</span></span><br><span class="line">listDevs.sort(Comparator.comparing(Developer::getAge).thenComparing(Developer::getSalary));</span><br></pre></td></tr></table></figure><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.cnblogs.com/niceyoo/p/13837835.html">面试官：说一下List排序方法 - niceyoo - 博客园 (cnblogs.com)</a></p><p><a href="https://my.oschina.net/sdlvzg/blog/2243766">Java8 让代码更优雅之List排序 - 阿刚 - OSCHINA - 中文开源技术交流社区</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>j2ee笔记</title>
      <link href="/2024/01/01/j2ee%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/01/j2ee%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="request中文乱码问题"><a href="#request中文乱码问题" class="headerlink" title="request中文乱码问题"></a>request中文乱码问题</h1><ul><li>get:tomcat7及以下版本，get方式获取参数会乱码，</li><li>post:都会乱码<blockquote><p>因为java默认编码<code>ISO-8859-1</code>不支持中文</p></blockquote></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="仅针对post"><a href="#仅针对post" class="headerlink" title="仅针对post"></a>仅针对post</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><h3 id="针对get，慎用，仅针对会乱码的情况（如果原来不乱，用之后会乱）"><a href="#针对get，慎用，仅针对会乱码的情况（如果原来不乱，用之后会乱）" class="headerlink" title="针对get，慎用，仅针对会乱码的情况（如果原来不乱，用之后会乱）"></a>针对get，慎用，仅针对会乱码的情况（如果原来不乱，用之后会乱）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new String(request.getParameter(&quot;name&quot;).getBytes(&quot;ISO-8859_1&quot;),&quot;utf-8&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IOC AOP</title>
      <link href="/2024/01/01/IOC%20AOP/"/>
      <url>/2024/01/01/IOC%20AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC-AOP"><a href="#IOC-AOP" class="headerlink" title="IOC AOP"></a>IOC AOP</h1><h2 id="IOC-控制反转-Inversion-of-Control"><a href="#IOC-控制反转-Inversion-of-Control" class="headerlink" title="IOC-控制反转(Inversion of Control)"></a>IOC-控制反转(Inversion of Control)</h2><ul><li><p>为了降低对象之间的耦合度, 实现解耦</p></li><li><p>IOC容器去控制对象bean的生命周期, 而不是对象的使用者</p></li><li><p>不需要对象的使用者去创建对象, 赋予各种属性, 而是由IOC容器去做, 对象的使用者直接把对象拿来用</p></li><li><p>控制反转是目的, 手段是依赖注入(DI)(Dependency Injection)</p></li><li><p>对象之间不在相互依赖, 通过一个第三方实现解耦</p><p><img src="https://oss.zaqai.com/img/30131727-a8268fe6370049028078e6b8a1cbc88f.png" alt="img"></p></li><li><p>IOC也叫依赖注入(DI), 获得依赖对象的过程由自身管理变为了由IOC容器主动注入</p></li><li><p>IOC容器生成对象是通过反射方式，在运行效率上有一定的损耗</p></li><li><p>●谁依赖于谁：当然是应用程序依赖于IoC容器；</p><p>●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</p><p>●谁注入谁：IoC容器注入应用程序依赖的对象；</p><p>●注入了什么：注入某个对象所需要的外部资源（包括对象、资源、常量数据）</p></li><li><p>一般通过xml文件告诉容器如何创建组件，以及各组件的依赖关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;HikariDataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;BookService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为dataSource的组件通过属性dataSource（即调用setDataSource()方法）注入到另外两个组件中。</p><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean。</p></blockquote></li></ul><h2 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则(DIP)"></a>依赖倒置原则(DIP)</h2><p>它转换了依赖，高层模块不依赖于低层模块的实现，而低层模块依赖于高层模块定义的接口。通俗的讲，就是高层模块定义接口，低层模块负责实现。</p><p>高层模块不应依赖于低层模块，两者应该依赖于抽象。</p><p>抽象不应该依赖于具体，具体应该依赖于抽象</p><ul><li><p>依赖无倒置（低层模块定义接口，高层模块负责实现）</p><p><img src="https://oss.zaqai.com/img/image-20220217221259208.png" alt="img"></p><blockquote><p> 从上图中，我们发现高层模块的类依赖于低层模块的接口。因此，低层模块需要考虑到所有的接口。如果有新的低层模块类出现时，高层模块需要修改代码，来实现新的低层模块的接口。这样，就破坏了开放封闭原则。</p></blockquote></li><li><p>依赖倒置（高层模块定义接口，低层模块负责实现）</p><p><img src="https://oss.zaqai.com/img/image-20220217221227608.png" alt="img"></p><blockquote><p>在这个图中，我们发现高层模块定义了接口，将不再直接依赖于低层模块，低层模块负责实现高层模块定义的接口。这样，当有新的低层模块实现时，不需要修改高层模块的代码。</p></blockquote></li></ul><p><strong>DIP是一种 软件设计原则，它仅仅告诉你两个模块之间应该如何依赖，但是它并没有告诉如何做。IoC则是一种 软件设计模式，它告诉你应该如何做，来解除相互依赖模块的耦合。</strong></p><h2 id="AOP-Aspect-Oriented-Programming-面向切面编程"><a href="#AOP-Aspect-Oriented-Programming-面向切面编程" class="headerlink" title="AOP(Aspect Oriented Programming)面向切面编程"></a>AOP(Aspect Oriented Programming)面向切面编程</h2><blockquote><p>出现原因: 比如某个业务类的CRUD方法, 每个方法都需要进行一些安全检查, 这会造成大量重复的代码. AOP的思想就是将这些重复代码视作切面</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>home-assistant</title>
      <link href="/2024/01/01/home-assistant/"/>
      <url>/2024/01/01/home-assistant/</url>
      
        <content type="html"><![CDATA[<h1 id="home-assistant"><a href="#home-assistant" class="headerlink" title="home-assistant"></a>home-assistant</h1><h2 id="梦开始的地方"><a href="#梦开始的地方" class="headerlink" title="梦开始的地方"></a>梦开始的地方</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=&quot;home-assistant&quot; -e TZ=Asia/Shanghai -v /root/data/docker_data/hassistant:/config -p 8123:8123 -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure><h2 id="hacs-另一个梦开始的地方"><a href="#hacs-另一个梦开始的地方" class="headerlink" title="hacs 另一个梦开始的地方"></a>hacs 另一个梦开始的地方</h2><blockquote><p>试过好多，直接github下载hacs放到custom_components不可行</p><p>要用脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sl.zaqai.com/hacs.sh|bash</span><br></pre></td></tr></table></figure><blockquote><p>如果hacs确实安装不来，就先装个xiaomi-miot吧,同理，最好用脚本，虽然我直接放也成功过</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://raw.fastgit.org/al-one/hass-xiaomi-miot/master/install.sh | HUB_DOMAIN=hub.fastgit.xyz ARCHIVE_TAG=latest bash -</span><br></pre></td></tr></table></figure><h2 id="nodered"><a href="#nodered" class="headerlink" title="nodered"></a>nodered</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1880:1880 --restart=always -e TZ=&quot;Asia/Shanghai&quot; -v /root/data/docker_data/nodered:/data --name nodered nodered/node-red</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/">https://blog.kcm-nixi.cn/2021/11/26/HomeAssistant%E7%9A%84%E9%AB%98%E7%BA%A7%E8%87%AA%E5%8A%A8%E5%8C%96-NodeRed%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go vs java</title>
      <link href="/2024/01/01/go%20vs%20java/"/>
      <url>/2024/01/01/go%20vs%20java/</url>
      
        <content type="html"><![CDATA[<h1 id="go-vs-java"><a href="#go-vs-java" class="headerlink" title="go vs java"></a>go vs java</h1><h2 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h2><p>一个明显的感觉，用java写的应用在服务器上运行，动辄吃掉几百M的内存，而go应用，也就几十M</p><p>今天[刷题](<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/submissions/">力扣（LeetCode）官网 - 全球极客挚爱的技术成长平台</a>)，两种方法，java都是40+MB的内存，而go都是3MB，虽然leetcode的内存消耗可能也就看一乐呵，不过还是能在一定程度上说明问题的。</p><p><img src="https://oss.zaqai.com/img/202309181920000.png" alt="image-20230918192020958"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2024/01/01/git/"/>
      <url>/2024/01/01/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><ul><li><p>初始化: <code>git init</code></p></li><li><p>克隆: <code>git clone url</code></p></li><li><p>查看文件状态: <code>git status [filename]</code></p></li><li><p>查看文件更改的地方: <code>git diff filename</code></p></li><li><p>添加所有文件到暂存区<code>git add .</code></p></li><li><p>提交到本地仓库<code>git commit -m &quot;message&quot;</code>, m参数表示附带提交信息</p></li><li><p>主目录下的<code>.gitignore</code>文件有如下规则：</p><ul><li>1.忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>2.可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围大括号（[string1，string2，..））代表可选的字符串等。</li><li>3.如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。</li><li>4.如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>5.如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）</li></ul><h2 id="一个流程"><a href="#一个流程" class="headerlink" title="一个流程"></a>一个流程</h2><ul><li>初始化一个目录</li><li>修改目录中的文件</li><li>此时<code>git status</code>可以看到哪个文件做了修改</li><li><code>git add .</code>添加到暂存区</li><li><code>git status</code>可以看到修改的文件待提交</li><li>提交后就会记录</li></ul></li><li><p><img src="https://oss.zaqai.com/img/image-20220216151030947.png" alt="image-20220216151030947"></p><blockquote><p>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改</p></blockquote></li></ul><h2 id="初始化远端仓库"><a href="#初始化远端仓库" class="headerlink" title="初始化远端仓库"></a>初始化远端仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# git_test&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M master <span class="comment"># 重命名当前分支为 master</span></span><br><span class="line">git remote add origin https://github.com/xxx/xxx.git <span class="comment"># 关联远程仓库, 远端节点默认使用origin这个名字</span></span><br><span class="line">git push -u origin master <span class="comment"># 把master推向远端的origin位置, 在origin远端服务器上，如果master分支不存在，则创建一个名为master的分支, 如果远端服务器上已存在master分支，则会更新master, 加入-u参数，下次再执行git push命令时，就会用master分支作为默认的远端节点推送上去, 以后可以使用 git push 不带参数直接推送。</span></span><br></pre></td></tr></table></figure><h2 id="commit相关"><a href="#commit相关" class="headerlink" title="commit相关"></a>commit相关</h2><ul><li><p>修改上次commit信息(会改变commit的id,相当于重新生成了一个commit, 用git reflog可以看到)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">&quot;commit msg&quot;</span></span><br><span class="line">git commit --amend <span class="comment"># 在文本编辑器中修改</span></span><br></pre></td></tr></table></figure></li><li><p>将修改加入上次的commit中(其实也新生成了一个commit)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将修改加入暂存区</span></span><br><span class="line">git commit --amend --no-edit <span class="comment"># 文件新的改动已经和上次commit的改动都在一个commit里了</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看分支</span></span><br><span class="line">git branch branch_name <span class="comment"># 创建分支</span></span><br><span class="line">git branch -m old_name new_name <span class="comment"># 修改分支名字</span></span><br><span class="line">git branch -M branch_name <span class="comment"># 直接修改当前分支名字</span></span><br><span class="line">git checkout branch_name <span class="comment"># 切换分支(分支要存在)</span></span><br><span class="line">git checkout -b branch_name <span class="comment"># 创建并切换分支</span></span><br><span class="line">git push origin branch_name <span class="comment"># 推送到远端</span></span><br><span class="line">git branch -d branch_name <span class="comment"># 删除分支</span></span><br><span class="line">git push origin --delete branch_name <span class="comment"># 删除远端分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他分支commit之后, 回到master merge</span></span><br><span class="line">git merge branch_name </span><br><span class="line"><span class="comment"># 两个从同一起点并行开发的分支A,B, 合并时会生成额外的commit(如A合并B),这就是ort策略,之后B再合并A, 是Fast-forward策略,不生成新的commit</span></span><br></pre></td></tr></table></figure><h2 id="rebase-变基-更推荐使用merge"><a href="#rebase-变基-更推荐使用merge" class="headerlink" title="rebase(变基)(更推荐使用merge)"></a>rebase(变基)(更推荐使用merge)</h2><blockquote><p>a b分支都是从master分出去的, base都是master，各自做了改动并commit。</p><p>切换到a分支，执行git rebase b。使用b分支作为a分支的新的参考基准。</p><p>使用rebase方式合并分支，git不会做出一个专门用来合并的commit, 合理使用rebase命令可以使我们的提交历史干净、简洁！</p><p>master分出一个feature分支, master后来merge了, 有一个新提交M, feature在本地也commit了, 此时rebase就是用新提交M作为feature的基底, 做法就是将feature的提交提取出来, 接到M之后(可能要解决冲突).</p><p>如果master没有新提交M, rebase就和merge一样, 只不过没有merge记录</p></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><p>合并多个commit为一个完整commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i  [startpoint]  [endpoint] <span class="comment"># 左开右闭, 所以左边要写到目标位置的前一个, 右边默认是head</span></span><br><span class="line">git rebase -i HEAD~3 <span class="comment"># 合并3个commit</span></span><br></pre></td></tr></table></figure></li><li><p>将某一段commit粘贴到另一个分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase   [startpoint]   [endpoint]  --onto  [branchName]</span><br></pre></td></tr></table></figure></li></ul><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><ul><li><p>HEAD指针指向当前版本</p></li><li><p>HEAD^指向上一版本, HEAD^^上上版本, HEAD~100上100个版本</p></li><li><p><code>git reflog</code>可以看到每个版本的commit id</p><p><img src="https://oss.zaqai.com/img/image-20220216143047792.png" alt="image-20220216143047792"></p></li><li><p>回退上一版本: <code>git reset --hard HEAD^</code></p></li><li><p>回退指定版本: <code>git reset --hard &quot;commit id&quot;</code></p></li></ul><blockquote><p>推荐<code>git reset --soft</code>, <code>hard</code>是回到上个版本提交之后的状态(工作区很干净), 也就是说回退前做的已保存但没commit的更改都会失去<br>默认是<code>--mixed</code>, 回退到上个版本提交之前的状态, 而且回退前做的已保存但没commit的更改会和当前版本的更改在一起<br><code>--soft</code>, 回退到上个版本提交之前的状态, 当前版本提交所做的修改放在暂存的修改里面, 回退前做的已保存但没commit的更改放在修改里面</p></blockquote><p>当前版本（相比于上一版本，新建了文件并写了内容，而且当前版本有未提交的修改</p><p><img src="https://oss.zaqai.com/img/202401161633950.png" alt="image-20240116163309814"></p><p>使用hard回退到上一个版本（上个版本这个文件不存在）作用就是删除这个文件，而且修改丢失</p><p>使用mixed回退，当前版本提交所做的修改（新建文件）和未提交的修改（改成20）混合在一块</p><p><img src="https://oss.zaqai.com/img/202401161640044.png" alt="image-20240116164014008"></p><p>使用soft回退，所有修改都在</p><p><img src="https://oss.zaqai.com/img/202401161636107.png" alt="image-20240116163653072"></p><p><img src="https://oss.zaqai.com/img/202401161641940.png" alt="image-20240116164107903"></p><p><code>git add filename</code> 就是将文件放在暂存区，反动作是<code>git reset filename</code></p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul><li><p>未添加到暂存区</p><p><code>git checkout -- readme.txt</code>用版本库里的版本替换工作区的版本</p></li><li><p>已添加到暂存区但未提交</p><p><code>git reset HEAD readme.txt</code>回退到当前版本库的最新版本</p><p><code>git checkout -- readme.txt</code></p></li></ul><h2 id="push远程仓库"><a href="#push远程仓库" class="headerlink" title="push远程仓库"></a>push远程仓库</h2><ul><li><p><code>git remote add origin https://gitee.com/zaqai/learn.git</code></p><p>将远程仓库和本地关联, origin可以理解为远程仓库的别名?</p></li><li><p><code>git push -u origin master</code></p><p>将本地上传到远程</p><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote></li><li><p><code>git remote rm origin</code></p><p>删除远程库</p></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li>创建名为dev的分支 <code>git branch dev</code></li><li>切换到dev <code>git switch dev</code></li><li><code>git switch -c dev</code>创建并切换</li><li><code>git branch</code>命令会列出所有分支</li><li><code>git merge dev</code>合并分支(在master中)</li><li><code>git branch -d dev</code>删除分支</li></ul><h2 id="git-flow-工作流"><a href="#git-flow-工作流" class="headerlink" title="git flow 工作流"></a>git flow 工作流</h2><p><img src="https://oss.zaqai.com/img/202401201835224.png" alt="image-20240120183454016"></p><ol><li><strong>master 分支：</strong><ul><li>主分支，存储随时可以发布的稳定版本。</li><li>不直接在 master 分支上进行开发。</li></ul></li><li><strong>develop 分支：</strong><ul><li>用于集成所有 feature 分支的开发。</li><li>所有新功能的开发都从这个分支开始。</li><li>当开发周期结束时，develop 分支合并到 master 分支发布新版本。</li></ul></li><li><strong>feature 分支：</strong><ul><li>从 develop 分支拉出，用于开发新功能。</li><li>完成后合并回 develop 分支。</li></ul></li><li><strong>release 分支：</strong><ul><li>用于发布新版本，准备发布前的最后调整。</li><li>从 develop 分支拉出，进行测试和修复 bug。</li><li>完成后合并回 develop 和 master 分支，同时打上版本号。</li></ul></li><li><strong>hotfix 分支：</strong><ul><li>用于紧急修复在 master 分支上发现的 bug。</li><li>从 master 分支拉出，完成后合并回 master 和 develop 分支，同时打上版本号。</li></ul></li></ol><p>使用 Git Flow 工作流的一般步骤如下：</p><ul><li>创建新功能时，从 develop 分支拉出一个 feature 分支。</li><li>完成新功能的开发，合并回 develop 分支。</li><li>准备发布时，从 develop 分支拉出一个 release 分支。</li><li>在 release 分支上进行测试和修复 bug，然后合并回 develop 和 master 分支，同时打上版本号。</li><li>发现紧急 bug 需要立即修复时，从 master 分支拉出一个 hotfix 分支。</li><li>在 hotfix 分支上修复 bug，合并回 master 和 develop 分支，同时打上版本号。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/01/01/clip_based%20OD%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20DetCLIP%20Dictionary-Enriched%20Visual-Concept%20Paralleled%20Pre-training%20for%20Open-world%20Detection/"/>
      <url>/2024/01/01/clip_based%20OD%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%20DetCLIP%20Dictionary-Enriched%20Visual-Concept%20Paralleled%20Pre-training%20for%20Open-world%20Detection/</url>
      
        <content type="html"><![CDATA[<h1 id="clip-based-OD论文阅读-DetCLIP-Dictionary-Enriched-Visual-Concept-Paralleled-Pre-training-for-Open-world-Detection"><a href="#clip-based-OD论文阅读-DetCLIP-Dictionary-Enriched-Visual-Concept-Paralleled-Pre-training-for-Open-world-Detection" class="headerlink" title="clip_based OD论文阅读 DetCLIP: Dictionary-Enriched Visual-Concept Paralleled Pre-training for Open-world Detection"></a>clip_based OD论文阅读 DetCLIP: Dictionary-Enriched Visual-Concept Paralleled Pre-training for Open-world Detection</h1><blockquote><p>NeurIPS 2022</p><p>code: null</p><p>华为诺亚方舟实验室、中山大学、香港科技大学</p></blockquote><p>本文提出了一种基于概念词典设计的知识增强的开放域检测的并行可视化概念预训练方法DetCLIP。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="并行语义方法"><a href="#并行语义方法" class="headerlink" title="并行语义方法"></a>并行语义方法</h3><p><img src="https://oss.zaqai.com/img/202401221617948.png" alt="image-20240122161719739"></p><ul><li><p>传统的检测数据: 直接将类别名称和图像块特征对齐</p></li><li><p>grounding data: 输入文本是物体的描述(句子), 然后对齐</p></li><li><p>GLIP的方法: grounding data和第2种一样, detection data是每个类别名称连成的句子( [“person, bicycle, car, … , toothbrush”])</p><p>弊端:</p><ul><li>类别名称之间出现不必要的交互。</li><li>由于文本输入的上下文长度有限，对比学习中的负样本数量受到限制。</li></ul></li><li><p>DetCLIP方法: 移除了上下文信息，模型直接从每个单独的概念中学习语言特征，更直接，提高了学习效率</p><ul><li><p>Detection data</p><p>假如每个图片中有K个正样本类别, 随机采样负样本类别, 使类别总数达到N</p><p><em>P</em> = [“person”, “bicycle”, “car”, … , “toothbrush”]. (长度为N) 输入文本编码器</p><p>得到N个文本嵌入向量, 连接起来和GT边界框计算对齐损失</p></li><li><p>Grounding data</p><p>从 grounding的标注中为边界框提取正样本短语, 从概念词典中采样负样本短语, 使类别数也达到N</p><p><em>P</em> = [“a woman”, “a herding dog”, “three cattle”, “<em>neg</em>1”, … , “<em>neg**m</em>”]</p><p>之后的步骤和上面类似</p></li></ul></li></ul><h3 id="概念词典"><a href="#概念词典" class="headerlink" title="概念词典"></a>概念词典</h3><blockquote><p>现有的痛点: 标注的域间跨度太大, 不同标注之间可能有包含关系, 如 “man”, “child” or “people” . 如果模型知道这些隐式的关系会有帮助</p></blockquote><p><img src="https://oss.zaqai.com/img/202401222010706.png" alt="image-20240122201004653" style="zoom:50%;" /></p><p>从现有数据集中提取, 经过过滤等操作, 获得概念词典{单词:定义}</p><h4 id="概念词典的两个使用技巧-增强预训练"><a href="#概念词典的两个使用技巧-增强预训练" class="headerlink" title="概念词典的两个使用技巧(增强预训练)"></a>概念词典的两个使用技巧(增强预训练)</h4><p><img src="https://oss.zaqai.com/img/202401222019858.png" alt="image-20240122201927675"></p><ul><li><p>丰富概念(图b上)</p><p>使用单词的定义输入进文本编码器做后续操作</p><p>如果单词在词典中不存在, 计算单词间的余弦相似度, 选择最相似的单词的概念</p><p><em>P</em> <em>∗</em> = [“person, a human being.”, “bicycles, a wheeled vehicle that has two wheels and is moved by foot pedals.”, … , “toothbrush, small brush has long handle used to clean teeth.”]</p></li><li><p>丰富不完整的标注</p><p>对比学习缺少负样本 -&gt; 在词典中随机采样作为负样本(因为词典很大, 随机采样的大概率是负样本), 而不是添加空的输入 </p><p>缺乏正样本的标注以有效地训练模型 -&gt; 在伪标注过程中对图像-文本对数据进行标签完成，我们添加词典{ol}Ll=1中的所有概念作为额外的类别输入，而不是使用标题中的原始名词短语来计算相似性矩阵。因此，图像中显示但不在标题中的概念也可以被标记并获得预训练。</p></li></ul><h3 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h3><p>$\begin{aligned}\mathcal{L}=\mathcal{L}<em>{ALI}(S,G)+\alpha\cdot\mathcal{L}</em>{CEN}+\beta\cdot\mathcal{L}_{REG},\end{aligned}$  S是图片文本对齐的分数矩阵, G是GT对齐矩阵</p><p>$\mathcal{L}_{ALI}$: sigmoid focal loss</p><p>$\mathcal{L}_{CEN}$: sigmoid loss</p><p>$\mathcal{L}_{REG}$: GIoU loss</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker打包容器 载入容器</title>
      <link href="/2024/01/01/docker%E6%89%93%E5%8C%85%E5%AE%B9%E5%99%A8%20%E8%BD%BD%E5%85%A5%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/01/01/docker%E6%89%93%E5%8C%85%E5%AE%B9%E5%99%A8%20%E8%BD%BD%E5%85%A5%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="docker打包容器-载入容器"><a href="#docker打包容器-载入容器" class="headerlink" title="docker打包容器 载入容器"></a>docker打包容器 载入容器</h1><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>docker export 容器id &gt; filename.tar</code></p><h2 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h2><p><code>docker import filename.tar repository:tag</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare Argo Tunnel(cloudflared)  转发私网端口到公网(不限速)</title>
      <link href="/2024/01/01/Cloudflare%20Argo%20Tunnel(cloudflared)%20%20%E8%BD%AC%E5%8F%91%E7%A7%81%E7%BD%91%E7%AB%AF%E5%8F%A3%E5%88%B0%E5%85%AC%E7%BD%91(%E4%B8%8D%E9%99%90%E9%80%9F)/"/>
      <url>/2024/01/01/Cloudflare%20Argo%20Tunnel(cloudflared)%20%20%E8%BD%AC%E5%8F%91%E7%A7%81%E7%BD%91%E7%AB%AF%E5%8F%A3%E5%88%B0%E5%85%AC%E7%BD%91(%E4%B8%8D%E9%99%90%E9%80%9F)/</url>
      
        <content type="html"><![CDATA[<h1 id="Cloudflare-Argo-Tunnel-cloudflared-转发私网端口到公网-不限速"><a href="#Cloudflare-Argo-Tunnel-cloudflared-转发私网端口到公网-不限速" class="headerlink" title="Cloudflare Argo Tunnel(cloudflared)  转发私网端口到公网(不限速)"></a>Cloudflare Argo Tunnel(cloudflared)  转发私网端口到公网(不限速)</h1><blockquote><p>Cloudflare真是私人网站管理员的一大利器, 它最为人熟知的功能是CDN和域名托管服务, 但由于Cloudflare是国外的, 如果在国内使用了它的CDN, 可能非但不能达到加速的效果, 反而会减速, 我的博客套上它的CDN之后就慢了很多.</p><p>但作为财大气粗的公司(1.1.1.1 这么nb的IP都拿到了), 它的其他功能也都很强大, 重要的是免费的计划对于大部分私人网站都够用了. 像workers, 可以提供类似云函数的功能, 即访问特定网址, 会执行你编写的js代码, 从而实现网站反向代理, 配合它的KV存储, 也可以实现短网址和文本分享的功能. </p><p>今天要为大家介绍的是它的隧道功能, 相对于内网穿透, 它的优点是不用公网服务器, 而且速度还相当可观.</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>一个被Cloudflare托管的域名(如果不知道怎么配置, 自行去百度)</p></li><li><p>cloudflared软件包: <a href="https://github.com/cloudflare/cloudflared/releases">Releases · cloudflare&#x2F;cloudflared (github.com)</a></p><p><img src="https://oss.zaqai.com/img/image-20220507131556139.png" alt="image-20220507131556139"></p><p>各种平台, 包括arm(像什么树莓派, 斐讯n1都可以用)</p></li></ul><h2 id="创建隧道"><a href="#创建隧道" class="headerlink" title="创建隧道"></a>创建隧道</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./cloudflared-linux-arm64</span><br><span class="line">mv cloudflared-linux-arm64 /usr/bin/cloudflared</span><br><span class="line">cloudflared tunnel login</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时会出现一个链接, 点击在浏览器打开, 选择你的域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成后会有一个cert.pem文件在~/.cloudflared目录下</span></span><br><span class="line">cloudflared tunnel create 隧道名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">隧道名随意, 如zq-tunnel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时会为该隧道生成一个<span class="built_in">id</span></span></span><br><span class="line">cloudflared tunnel route dns 隧道名 前缀.域名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">隧道名即为上一步所填写, 前缀自定义, 注意不能是已经解析过的前缀, 如tunnel.zaqai.com, 这一步cloudflared会自动为tunnel添加cname</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tunnel:</span> [<span class="string">隧道id</span>]</span><br><span class="line"><span class="attr">credentials-file:</span> <span class="string">/root/.cloudflared/[隧道id].json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">tunnel.zaqai.com</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">http_status:404</span></span><br></pre></td></tr></table></figure><h2 id="启动隧道"><a href="#启动隧道" class="headerlink" title="启动隧道"></a>启动隧道</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared tunnel --config ~/.cloudflared/config.yml run</span><br></pre></td></tr></table></figure><p>此时访问<a href="https://tunnel.zaqai.com/">https://tunnel.zaqai.com</a>, 即可访问到你私网服务器的8080端口</p><p>通过以下命令启动可保持后台运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup cloudflared tunnel --config ~/.cloudflared/config.yml run &gt; ~/.cloudflared/tunnel.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>也可以通过<code>cloudflared service install</code>将cloudflared变为systemctl管理的服务(centos)</p><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p><img src="https://oss.zaqai.com/img/image-20220507134020191.png" alt="image-20220507134020191"></p><p>当然不是, 因为校园网限速大概在2MB&#x2F;s</p><p><img src="https://oss.zaqai.com/img/image-20220507134122711.png" alt="image-20220507134122711"></p><p>没错啦, 我用我的千兆vps测的下载速度, 是我家的宽带上传速度上限了.</p><h2 id="多个端口"><a href="#多个端口" class="headerlink" title="多个端口"></a>多个端口</h2><p>如果想要转发多个端口, 可以这样修改配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tunnel:</span> [<span class="string">隧道id</span>]</span><br><span class="line"><span class="attr">credentials-file:</span> <span class="string">/root/.cloudflared/[隧道id].json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">tunnel.zaqai.com</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">tunnel2.zaqai.com</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">http://localhost:8081</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">http_status:404</span></span><br></pre></td></tr></table></figure><p>要注意<code>tunnel1</code>也必须cname的值和<code>tunnel</code>相同</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>也许有人会说, ipv6不香吗? 确实香, 我在家里的时候配好的ipv6服务器, 到学校没几天ipv6就失联了, (还好留了一手, 弄了个zerotier), 现在就靠隧道来用服务器了</p><p>也可以转发ssh的22端口, 但我还没有成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装aria2</title>
      <link href="/2024/01/01/centos7%E5%AE%89%E8%A3%85aria2/"/>
      <url>/2024/01/01/centos7%E5%AE%89%E8%A3%85aria2/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7安装aria2"><a href="#centos7安装aria2" class="headerlink" title="centos7安装aria2"></a>centos7安装aria2</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install aria2 -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启RPC远程管理命令（用来使用web界面程序连接aria2，所以这个是必须的）</span></span><br><span class="line">aria2c --enable-rpc --rpc-listen-all=true --rpc-allow-origin-all -c -D</span><br></pre></td></tr></table></figure><p><code>vi /root/aria2.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">## &#x27;#&#x27;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释 ##</span><br><span class="line"></span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许非外部访问</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line">#用户名</span><br><span class="line">rpc-user=root</span><br><span class="line">#密码</span><br><span class="line">rpc-passwd=jamay</span><br><span class="line"></span><br><span class="line">###速度相关 </span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=20M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制 0 不限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line"></span><br><span class="line">###进度保存相关 </span><br><span class="line">input-file=/root/aria2.session</span><br><span class="line">save-session=/root/aria2.session</span><br><span class="line">#定时保存会话，需要1.16.1之后的release版</span><br><span class="line">#save-session-interval=60</span><br><span class="line"></span><br><span class="line">###磁盘相关 </span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line">dir=/root/download/</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本</span><br><span class="line">#enable-mmap=true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation=prealloc</span><br><span class="line"></span><br><span class="line">###BT相关 </span><br><span class="line">#启用本地节点查找</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line">#添加额外的tracker</span><br><span class="line">#bt-tracker=&lt;URI&gt;,…</span><br><span class="line">#单种子最大连接数</span><br><span class="line">#bt-max-peers=55</span><br><span class="line">#强制加密, 防迅雷必备</span><br><span class="line">#bt-require-crypto=true</span><br><span class="line">#当下载的文件是一个种子(以.torrent结尾)时, 自动下载BT</span><br><span class="line">follow-torrent=true</span><br><span class="line">#BT监听端口, 当端口屏蔽时使用</span><br><span class="line">#listen-port=6881-6999</span><br><span class="line">#aria2亦可以用于PT下载, 下载的关键在于伪装</span><br><span class="line">#不确定是否需要，为保险起见，need more test</span><br><span class="line">enable-dht=false</span><br><span class="line">bt-enable-lpd=false</span><br><span class="line">enable-peer-exchange=false</span><br><span class="line">#修改特征</span><br><span class="line">user-agent=uTorrent/2210(25130)</span><br><span class="line">peer-id-prefix=-UT2210-</span><br><span class="line">#修改做种设置, 允许做种</span><br><span class="line">seed-ratio=0</span><br><span class="line">#保存会话</span><br><span class="line">force-save=true</span><br><span class="line">bt-hash-check-seed=true</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line">bt-save-metadata=true</span><br><span class="line">#定时保存会话，需要1.16.1之后的某个release版本</span><br><span class="line">#save-session-interval=60</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>aria2c --conf-path=/root/aria2.conf -D</code></p><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p><code>vi /etc/rc.local</code></p><p>添加<code>aria2c --conf-path=/root/aria2.conf -D &amp;</code></p><h2 id="安装web界面"><a href="#安装web界面" class="headerlink" title="安装web界面"></a>安装web界面</h2><p>宝塔新建普通网站</p><p>下载html</p><p><a href="https://github.com/mayswind/AriaNg/releases">Releases · mayswind&#x2F;AriaNg (github.com)</a></p><p>上传至网站目录即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos 安装ohmyzsh</title>
      <link href="/2024/01/01/centos%20%E5%AE%89%E8%A3%85ohmyzsh/"/>
      <url>/2024/01/01/centos%20%E5%AE%89%E8%A3%85ohmyzsh/</url>
      
        <content type="html"><![CDATA[<h1 id="centos-安装ohmyzsh"><a href="#centos-安装ohmyzsh" class="headerlink" title="centos 安装ohmyzsh"></a>centos 安装ohmyzsh</h1><h2 id="git-zsh"><a href="#git-zsh" class="headerlink" title="git zsh"></a>git zsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git zsh wget vim</span><br></pre></td></tr></table></figure><h2 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://sl.zaqai.com/ohmyzsh.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://gitee.com/githubClone/zsh-autosuggestions</span><br><span class="line">git clone https://gitee.com/ponponon/zsh-syntax-highlighting</span><br><span class="line">git clone https://gitee.com/wangnd/zsh-completions.git</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消第二行注释</span></span><br><span class="line">ZSH_THEME=&quot;steeef&quot;</span><br><span class="line">plugins=(git zsh-completions zsh-autosuggestions zsh-syntax-highlighting)</span><br><span class="line">alias hg=&quot;history|grep&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 设备开机或联网时自动开启无线调试(WIFI调试)</title>
      <link href="/2024/01/01/Android%20%E8%AE%BE%E5%A4%87%E5%BC%80%E6%9C%BA%E6%88%96%E8%81%94%E7%BD%91%E6%97%B6%E8%87%AA%E5%8A%A8%E5%BC%80%E5%90%AF%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95(WIFI%E8%B0%83%E8%AF%95)/"/>
      <url>/2024/01/01/Android%20%E8%AE%BE%E5%A4%87%E5%BC%80%E6%9C%BA%E6%88%96%E8%81%94%E7%BD%91%E6%97%B6%E8%87%AA%E5%8A%A8%E5%BC%80%E5%90%AF%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95(WIFI%E8%B0%83%E8%AF%95)/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-设备开机或联网时自动开启无线调试-WIFI调试"><a href="#Android-设备开机或联网时自动开启无线调试-WIFI调试" class="headerlink" title="Android 设备开机或联网时自动开启无线调试(WIFI调试)"></a>Android 设备开机或联网时自动开启无线调试(WIFI调试)</h1><p>一般安卓设备要自动开启无线调试，必须USB连接电脑，然后电脑<a href="https://so.csdn.net/so/search?q=cmd&spm=1001.2101.3001.7020">cmd</a>或终端中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br><span class="line">adb connect 设备ip:5555</span><br></pre></td></tr></table></figure><p>如果要设为自动开启无线调试，应该怎么弄？</p><blockquote><p> 前提：Android 设备需要 Root ！！！</p></blockquote><p>一、修改 &#x2F;system&#x2F;build.prop ，在末尾增加一条 <code>service.adb.tcp.port=39999</code></p><blockquote><p>我的红米note5可以，magisk刷的root，但红米4不行，root有手机管家管理，即使给予文件管理器root权限也无法修改该文件</p></blockquote><p>二、在shell中，最好是su（我的是su），执行<code>setprop persist.adb.tcp.port 39999</code></p><blockquote><p>我的红米4可以</p></blockquote><p><img src="https://oss.zaqai.com/img/image-20220628151135834.png" alt="image-20220628151135834"></p><hr><blockquote><p><a href="https://www.52pojie.cn/thread-1619496-1-1.html">https://www.52pojie.cn/thread-1619496-1-1.html</a></p><p><a href="https://blog.csdn.net/lovelyelfpop/article/details/121395764">https://blog.csdn.net/lovelyelfpop/article/details/121395764</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/31/hello-world/"/>
      <url>/2023/12/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次Spring Boot依赖的坑</title>
      <link href="/2023/01/23/%E8%AE%B0%E4%B8%80%E6%AC%A1Spring%20Boot%E4%BE%9D%E8%B5%96%E7%9A%84%E5%9D%91/"/>
      <url>/2023/01/23/%E8%AE%B0%E4%B8%80%E6%AC%A1Spring%20Boot%E4%BE%9D%E8%B5%96%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次Spring-Boot依赖的坑"><a href="#记一次Spring-Boot依赖的坑" class="headerlink" title="记一次Spring Boot依赖的坑"></a>记一次Spring Boot依赖的坑</h1><blockquote><p>在B站学了EasyExcel之后, 想做一个demo挂在Github, 以便日后使用</p><p>使用Spring Boot做了一个导出excel的功能, 在Controller需要使用<code>HttpServletResponse</code>, 包是<code>import javax.servlet.http.HttpServletResponse;</code></p></blockquote><h2 id="坑1-添加依赖后-Spring-Boot不干了"><a href="#坑1-添加依赖后-Spring-Boot不干了" class="headerlink" title="坑1: 添加依赖后,Spring Boot不干了?"></a>坑1: 添加依赖后,Spring Boot不干了?</h2><p><code>HttpServletResponse</code>直接添加Maven依赖, 默认给我添加了这个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.65<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行也不报错, 但是Spring Boot也不干活了, 抓狂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2024-01-22T23:56:12.259+08:00  INFO 21056 --- [           main] c.z.E.EasyexcelDemoApplication           : Starting EasyexcelDemoApplication using Java 17.0.6 with PID 21056 (D:\f\project\java\easyexcel_demo\target\classes started by q in D:\f\project\java\easyexcel_demo)</span><br><span class="line">2024-01-22T23:56:12.263+08:00  INFO 21056 --- [           main] c.z.E.EasyexcelDemoApplication           : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">2024-01-22T23:56:12.864+08:00  INFO 21056 --- [           main] c.z.E.EasyexcelDemoApplication           : Started EasyexcelDemoApplication in 0.947 seconds (process running for 1.443)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>百度<code>javax.servlet.http.HttpServletResponse</code>, 说是要添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号根据你的需要进行调整 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ok, Spring Boot干活了</p><h2 id="坑2-触发导出功能-报错了"><a href="#坑2-触发导出功能-报错了" class="headerlink" title="坑2: 触发导出功能,报错了"></a>坑2: 触发导出功能,报错了</h2><p>也就是使用了<code>HttpServletResponse</code>, </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2024-01-23T00:23:10.750+08:00 ERROR 2436 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No primary or single unique constructor found for interface javax.servlet.http.HttpServletResponse] with root cause</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: No primary or single unique constructor found for interface javax.servlet.http.HttpServletResponse</span><br><span class="line">at org.springframework.beans.BeanUtils.getResolvableConstructor(BeanUtils.java:267) ~[spring-beans-6.1.3.jar:6.1.3]</span><br></pre></td></tr></table></figure><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>springboot3.0 的导出的依赖要从<code>import javax.servlet.http.HttpServletResponse;</code> 变为<code>import jakarta.servlet.http.HttpServletResponse;</code></p><p>所有功能正常</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
